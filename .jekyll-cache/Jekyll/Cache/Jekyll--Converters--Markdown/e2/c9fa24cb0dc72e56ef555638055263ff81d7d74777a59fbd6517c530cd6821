I"r
<ul>
  <li>본 포스팅은 Ken Krueger 선생님의 <a href="https://www.udemy.com/course/microservices-with-spring-cloud/">Microservices with Spring Cloud</a> 강의를 정리하며 사견을 붙인 것입니다.</li>
  <li>포스팅 내 목차는 개별 동영상 강의 기준입니다.</li>
</ul>

<h2 id="15-spring-cloud-eureka---service-discovery">15. Spring Cloud Eureka - Service Discovery</h2>

<hr />

<ul>
  <li>Spring Cloud Eureka를 이용한 Passive Service Discovery 를 배워보겠습니다.
    <ul>
      <li>passive 하니까 수동 서비스 발견? 으로 읽힐 수 있지만, 동작 하는걸 보면 Service Discovery를 게임에서 패시브 스킬 쓰듯이 알아서 쓴다는 것 같습니다.</li>
    </ul>
  </li>
</ul>

<h3 id="151-학습목표">15.1. 학습목표</h3>

<ul>
  <li>이번 강의를 들으면
    <ul>
      <li>Passive Service Discovery가 뭔지 알게 됩니다.</li>
      <li>Eureka Server를 Build and Run 할 수 있습니다.</li>
      <li>Eureka Client를 Build and Run and Configure 할 수 있습니다.</li>
    </ul>
  </li>
</ul>

<h3 id="152-passive-service-discovery-란">15.2. Passive Service Discovery 란?</h3>

<ul>
  <li>채팅 프로그램을 켜서 채팅 방에 들어갔다고 생각 해봅시다.
1 사용자 클라이언트는 자신을 서버에 등록합니다. 
2 서버는 사용자가 온라인에 있다는걸 알게 됩니다.
3 서버가 채팅방에 있는 다른 사람들을 알려줍니다.
4 마찬가지로, 사용자도 다른 사용자들에 의해 discovered 됩니다.
5 그리고 채팅방에 있는 사람들은 새로운 사람이 들어오면 계속 discovered 됩니다.</li>
  <li>MSA엔 많은 서비스들이 있습니다. 각 서비스들이 서로 사용 가능한 상태인지 알아야 합니다.
    <ul>
      <li>수동으로 상태를 확인해 줄 수도 있지만 딱 봐도 안좋은 방법입니다.</li>
      <li>이때 Service Discovery를 사용합니다. Service Discovery는 lookup 기능을 제공해줍니다.
        <ul>
          <li>클라이언트는 자기 자신을 등록하고, 다른 서비스들을 발견합니다.</li>
          <li>Eureka 말고도 Consul, Etcd, Zookeeper 등의 기술이 있습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="153-eureka">15.3. Eureka!!</h3>

<ul>
  <li>Eureka는 Netflix에서 만들었습니다. 지금은 Spring Cloud Netflix에 포함되어 있습니다.</li>
  <li>Eureka는 lookup 서버를 제공합니다.
    <ul>
      <li>lookup 서버는 등록된 클라이언트들을 관리합니다.</li>
      <li>lookup 서버는 여러 인스턴스가 실행됩니다.(한 JVM에서 여러 인스턴스가 아니라 여러 서벅랙, Region별 인스턴스 인것 같습니다.) 로드밸런서를 통해 빠른 lookup이 가능하게 합니다.</li>
      <li>여러 사본 서버들은 서로 상태를 공유합니다.</li>
    </ul>
  </li>
  <li>클라이언트는 Eureka 서버를 등록합니다.
    <ul>
      <li>호스트 ip, 포트 health indicator url 등을 등록합니다.</li>
    </ul>
  </li>
  <li>클라이언트는 주기적으로 Eureka 서버에 살아있다는 신호를 보냅니다. Eureka 서버는 일정 시간동안 신호를 주지 않는 클라이언트를 해제합니다.</li>
</ul>

<h3 id="154-eureka-서버-만들기">15.4. Eureka 서버 만들기</h3>

<ul>
  <li>
    <p>서버를 만드는 방법은 쉽습니다.</p>

    <ul>
      <li>
        <p>의존성을 추가합니다.</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p><code class="highlighter-rouge">@EnableEurekaServer</code> 어노테이션을 이용해 Eureka 서버로 등록합니다.</p>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@SpringBootApplication</span>
  <span class="nd">@EnableEurekaServer</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="155-multi-servers">15.5. Multi Servers</h3>

<ul>
  <li>Eureka 서버를 1개만 실행하면 경고가 뜹니다. Eureka 서버는 기본적으로 여러 사본들이 서로 통신하는걸 기본으로 만들어졌습니다.</li>
  <li>후… 하루 영어 섭취량 오바됐다… (작성중..)</li>
</ul>

:ET