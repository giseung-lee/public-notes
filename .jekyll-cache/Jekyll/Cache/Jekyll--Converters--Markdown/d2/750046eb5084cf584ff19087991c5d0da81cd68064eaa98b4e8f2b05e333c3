I"
<ul>
  <li>Spring 특징이라고 검색하면 무조건 나오는 4개만 정리해둡니다.
    <ul>
      <li>POJO</li>
      <li>AOP
        <ul>
          <li><a href="https://spring.io/blog/2012/05/23/transactions-caching-and-aop-understanding-proxy-usage-in-spring">https://spring.io/blog/2012/05/23/transactions-caching-and-aop-understanding-proxy-usage-in-spring</a></li>
          <li>http://egloos.zum.com/aretias/v/708477</li>
        </ul>
      </li>
      <li>DI / IoC</li>
    </ul>
  </li>
</ul>

<h3 id="pojo">POJO</h3>

<hr />

<ul>
  <li>Plain Old Java Object로 구성가능합니다. 즉, 프레임워크를 위한 새로운 언어를 익힐 필요 없이 Java로 작성할 수 있다는 것입니다.</li>
  <li>프로그래밍에 워낙 많은 기술들이 쏟아지다 보니 기존 지식을 재사용할 수 있다는 것 만으로도 큰 메리트인 것 같습니다. Javascript 기반의 기술들이 쏟아지는 것과 같이.</li>
</ul>

<h3 id="aop">AOP</h3>

<hr />

<ul>
  <li>AOP(aspect oriented programming)이란 쉽게 말해 보조적인 업무와 핵심 업무를 나눠 생각하겠다는 것입니다.
    <ul>
      <li>로그, 예외 처리 같이 업무의 핵심은 아니지만 모든 업무마다 발생하는 보조업무들을 프로그래머들이 신경쓰지 않게 하기 위한 기법입니다.</li>
      <li>주업무 전, 후, 전후 언제 돌아갈지 정할 수 있습니다.</li>
    </ul>
  </li>
  <li>동작 과정을 더 구체적으로 알아보겠습니다.
    <ul>
      <li>보조업무가 주업무가 이루어지는 객체 자체를 찾아가는게 아닙니다.</li>
      <li>proxy라는 dummy 객체가 있습니다. 보조업무는 proxy를 찾아갑니다. proxy가 보조업무와 주업무를 실행 시킵니다.</li>
    </ul>
  </li>
</ul>

<p class="p_img"><img src="/public/image/java/aop-no-proxy.png" alt="aop-no-proxy.png" /><small>출처 : https://spring.io/blog/2012/05/23/transactions-caching-and-aop-understanding-proxy-usage-in-spring</small></p>

<h3 id="di--ioc">DI / IoC</h3>

<hr />

<ul>
  <li>자바에서 객체 생성 관리 방법은 has-a관계로 A클래스 안에서 B클래스 인스턴스 생성을 합니다.</li>
  <li>예를들어 A클래스의 인스턴스를 생성하는데 B클래스가 필요하다고 할때, 일반적인 객체 생성 과정은 A클래스의 인스턴스를 만드는 과정에서 B클래스의 인스턴스도 만들어짐.</li>
  <li>이런 관계는 객체간의 결합도가 높기 때문에 유연성이 떨어짐.</li>
  <li>이를 낮춰 주는 방법이 Dependency Injection임.
    <ul>
      <li>A클래스에서 B인스턴스를 만드는게 아니라 B인스턴스를 따로 만든 뒤, A인스턴스를 만들때 B인스턴스를 Injection 해주는 거임.</li>
    </ul>
  </li>
  <li>IoC는 DI과정에서 이루어집니다.
    <ul>
      <li>일반적인 자바 객체 생성과정이라면 A인스턴스를 만들기 시작하고 그 안에서 B인스턴스를 만듬. 즉, 상위 객체부터 생성함.</li>
      <li>하지만 DI를 하기 위해선 하위 객체를 생성한 뒤 상위 객체를 생성할 때 하위 객체를 Inject해줌.</li>
      <li>기존의 객체 생성과정과 반대로 제어권이 넘어간다고 해서 Inversion of Control임.</li>
    </ul>
  </li>
</ul>
:ET