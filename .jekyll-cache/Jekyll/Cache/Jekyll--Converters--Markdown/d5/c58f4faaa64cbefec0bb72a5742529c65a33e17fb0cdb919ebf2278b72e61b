I"+
<h3 id="들어가며">들어가며</h3>

<hr />

<ul>
  <li>사용 언어 별로 다른 문서를 주거나, 브라우저별로 다른 자바스크립트를 주어야 하는 등 하나의 URL이 여러 리소스에 대응되야 할 때가 있습니다.</li>
  <li>이때, 어떤 리소스를 받을 지 클라이언트와 서버가 협상할 수 있습니다. 이를 내용 협상이라고 합니다.</li>
  <li>한편, 내용 협상 결과로 주어야할 리소스가 이미 존재하는 경우도 있지만 동적으로 생성해야 할 때도 있습니다. 이를 트랜스 코딩이라고 합니다.</li>
</ul>

<h3 id="171-내용-협상-기법">17.1. 내용 협상 기법</h3>

<hr />

<ul>
  <li>내용 협상이란 하나의 URL이 여러 리소스에 대응될 때, 어떤 리소스가 적절한 리소스인지 클라이언트와 서버가 정하는 방법입니다.</li>
  <li>내용 협상엔 크게 세 가지 방법이 존재 합니다.
    <ul>
      <li>클라이언트 주도 : 서버가 클라이언트에게 선택지를 제공하면 클라이언트가 선택합니다. 서버에서 구현이 쉽고 클라이언트가 가장 원하는 선택을 할 수 있지만 리소스를 얻기위한 대기시간(단계)가 증가합니다.</li>
      <li>서버 주도 : 클라이언트의 요청헤더를 바탕으로 서버가 리소스를 결정합니다. 클라이언트 주도 협상보다 빠르지만 클라이언트가 원하는 리소스가 없다면 서버가 추측을 해야 하는 상황이 발생합니다.</li>
      <li>투명 : 투명한 중간 장치(주로 프록시 캐시)가 서버를 대신해 협상합니다. 서버의 부하가 줄어드는게 장점이지만 투명 협상에 대한 명세가 없습니다.</li>
    </ul>
  </li>
</ul>

<h3 id="172-클라이언트-주도-협상">17.2. 클라이언트 주도 협상</h3>

<hr />

<ul>
  <li>서버가 선택 가능한 선택지들을 클라이언트에게 돌려주고 사용자가 직접 선택합니다. 그 방법엔 두 가지가 있습니다.
    <ul>
      <li>여러 버전에 대한 링크와 설명이 담긴 HTML 페이지를 돌려줄 수 있습니다.</li>
      <li>300 Multiple Choices 응답 코드로 HTTP/1.1 응답을 돌려줍니다.</li>
    </ul>
  </li>
  <li>서버 입장에선 가장 구현하기 쉽습니다.</li>
  <li>클라이언트는 가능한 선택지 안에서 최선의 선택을 할 수 있습니다.</li>
  <li>단점은 목록을 보여주고 요청을 다시 받기 때문에 리소스를 받는 과정이 길어집니다.</li>
  <li>또 다른 단점으론 리소스당 여러 url이 필요합니다.
    <ul>
      <li>영어페이지, 프랑스어 페이지가 존재하는 www.joes-hardware.com를 요청하면 www.joes-hardware.com/english와 www.joes-hardware.com/french 둘을 준비해야 합니다.</li>
    </ul>
  </li>
</ul>

<h3 id="173-서버-주도-협상">17.3. 서버 주도 협상</h3>

<hr />

<ul>
  <li>서버 주도 협상은 클라이언트가 선호하는 옵션을 같이 요청합니다.
    <ul>
      <li>Accept 관련 헤더인 내용 협상 헤더를 사용합니다.</li>
      <li>User-Agent와 같은 내용 협상 헤더 외 다른 헤더를 사용합니다.</li>
    </ul>
  </li>
  <li>서버는 위 헤더들을 파악해 클라이언트가 원하는 리소스를 돌려줍니다.</li>
</ul>

<h4 id="1731-내용-협상-헤더">17.3.1. 내용 협상 헤더</h4>

<ul>
  <li>
    <p>내용 협상 헤더엔 아래와 같은 것들이 있습니다.</p>

    <table>
      <thead>
        <tr>
          <th>헤더</th>
          <th>설명</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Accept</td>
          <td>서버가 어떤 미디어 타입으로 보내도 되는지 알려줍니다.</td>
        </tr>
        <tr>
          <td>Accept-Language</td>
          <td>서버가 어떤 언어로 보내도 되는지 알려줍니다.</td>
        </tr>
        <tr>
          <td>Accept-Charset</td>
          <td>서버가 어떤 charset으로 보내도 되는지 알려줍니다.</td>
        </tr>
        <tr>
          <td>Accept-Encoding</td>
          <td>서버가 어떤 인코딩으로 보내도 되는지 알려줍니다.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>앞 장들에서 살펴본 Content로 시작하는 엔터티 헤더와 각각 대응됩니다.</p>
  </li>
  <li>
    <p>클라이언트는 매 요청마다 선호 정보를 다시 보내야 합니다.(HTTP는 Stateless 하기 때문입니다.)</p>
  </li>
  <li>
    <p>각 헤더엔 1개의 선호가 아니라 여러 선호를 담을 수 있습니다.</p>

    <ul>
      <li>Accept-Language : ko, en, fr</li>
      <li>이때, 각 선호에 quality value (앞으로 q값이라 칭함)를 주어 선호의 정도를 나타낼 수 있습니다.</li>
    </ul>
  </li>
</ul>

<h4 id="1732-내용-협상-헤더의-품질값quality-value-q값">17.3.2. 내용 협상 헤더의 품질값(quality value, q값)</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accept-Language : en;q=0.5, fr;q=0.0, nl;q=1.0, tr;q=0.0
</code></pre></div></div>

<ul>
  <li>0.0은 선호하지 않음, 1.0은 가장 선호함입니다.</li>
  <li>위 헤더는 프랑스어(fr), 터키어(tr)는 원하지 않고 영어(en)는 받아들일 수 있으며 네더란드어(nl)를 가장 선호한다는 뜻입니다.</li>
  <li>한편, 서버에 클라이언트가 선호하는 버전이 없을 수 있습니다. 이 때 서버는 기본 문서를 주거나 클라이언트의 선호에 맞추기 위해 트랜스코딩을 할 수 있습니다.</li>
</ul>

<h4 id="1733-그-외의-헤더들에-의해-결정">17.3.3. 그 외의 헤더들에 의해 결정</h4>

<ul>
  <li>브라우저의 종류와 같이 리소스별로 따로 관리해야 하지만 내용 협상 헤더엔 담길 수 없는 것들이 있습니다.</li>
  <li>이땐 User-Agent와 같은 내용 협상 헤더 외의 헤더를 사용할 수 있습니다.</li>
  <li>이 헤더들에선 q값을 사용할 수 없습니다.</li>
  <li>한편, 캐시를 이용하기 위해 Vary 헤더를 이용하기도 합니다.
    <ul>
      <li>Vary 헤더는 서버가 응답시에 추가하는 헤더입니다.</li>
      <li>Vary 헤더는 서버가 어떤 요청 헤더를 참고하고 해당 리소스를 응답해줬는지 말해줍니다.</li>
      <li>캐시가 요청을 받는 상황이라면 Vary헤더를 통해 클라이언트의 요청에 맞춰 캐시된 리소스를 돌려줄 수 있습니다.</li>
    </ul>
  </li>
</ul>

<h4 id="1734-아파치의-내용-협상">17.3.4. 아파치의 내용 협상</h4>

<ul>
  <li></li>
</ul>

<h4 id="1735-서버-측-확장">17.3.5. 서버 측 확장</h4>

<h3 id="174-투명-협상">17.4. 투명 협상</h3>

<hr />

<h4 id="1741-캐시와-얼터네이트alternate">17.4.1. 캐시와 얼터네이트(alternate)</h4>

<h4 id="1742-vary-헤더">17.4.2. Vary 헤더</h4>

<h3 id="175-트랜스코딩">17.5. 트랜스코딩</h3>

<hr />

<h4 id="1751-포맷-변환">17.5.1. 포맷 변환</h4>

<h4 id="1752-정보-합성">17.5.2. 정보 합성</h4>

<h4 id="1753-콘텐츠-주입">17.5.3. 콘텐츠 주입</h4>

<h4 id="1754-트랜스코딩-vs-정적으로-미리-생성해놓기">17.5.4. 트랜스코딩 vs 정적으로 미리 생성해놓기</h4>

<h3 id="176-다음-단계">17.6. 다음 단계</h3>

<hr />

<h3 id="마치며">마치며</h3>

<hr />

:ET