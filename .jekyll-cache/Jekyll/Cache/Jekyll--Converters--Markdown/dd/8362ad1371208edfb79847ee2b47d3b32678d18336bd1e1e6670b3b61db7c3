I"^S
<h3 id="들어가며">들어가며</h3>

<p>이번 장에선 사용자를 식별하여 콘텐츠를 개인화하는 기술들을 알아볼 것입니다.</p>

<hr />

<h3 id="111-개별-접촉">11.1. 개별 접촉</h3>

<p>HTTP는 익명으로 사용하며 Stateless합니다.(Stateless : 연결 자체에 대한 정보를 가지지 않고, 매 요청은 일회성이고 독립적임) 하지만 웹 서버는 사용자를 식별하고 싶기 때문에 관련 기술들이 개발되었습니다.</p>

<p>우리가 사용하는 거의 모든 웹 사이트는 사용자를 식별해 사용자에게 맞는 정보를 제공합니다.</p>

<p><strong>개별 인사</strong></p>

<p>온라인 쇼핑몰 등이 각 사용자들을 위해 특화된 페이지를 만듭니다.</p>

<p><strong>사용자 맞춤 추천</strong></p>

<p>온라인 쇼핑몰은 고객이 방문한 페이지, 구매 내역들을 추적해 고객이 원할 것이라 예상되는 상품을 추천해줍니다. 생일과 같이 특별한 날엔 그에 맞는 상품을 제시합니다.</p>

<p><strong>저장된 사용자 정보</strong></p>

<p>인터넷으로 상품을 주문시에 매번 주소와 신용카드 정보를 입력하는건 매우 귀찮은 일입니다. 이런 정보를 각 개인별로 저장해 더 편리하게 이용할 수 있게 해줍니다.</p>

<p><strong>세션 추적</strong></p>

<p>HTTP트랜잭션은 기본적으로 Stateless 합니다. 따라서 사용자를 식별하고 추적하기 위해선 다른 방법이 필요합니다. 뒤로는 그 아래와 같은 사용자를 식별하기 위한 방법들을 알아보겠습니다.</p>

<ul>
  <li>사용자 식별 관련 정보를 전달하는 HTTP 헤더</li>
  <li>클라이언트 IP 주소 추적</li>
  <li>사용자 로그인 인증</li>
  <li>URL에 식별자를 포함하는 fat URL</li>
  <li>식별 정보를 지속해서 유지하는 쿠키</li>
</ul>

<hr />

<h3 id="112-http-헤더">11.2. HTTP 헤더</h3>

<p>아래 7가지 HTTP 헤더는 사용자에 대한 ‘정보’를 전달하는 헤더들입니다. 각 헤더들은 사용자에 대한 ‘정보’를 전달할 뿐 각 헤더 하나만 가지고 사용자를 식별할 순 없습니다.</p>

<table>
  <thead>
    <tr>
      <th>헤더이름</th>
      <th>헤더타입</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>From</td>
      <td>요청</td>
      <td>사용자의 이메일 주소</td>
    </tr>
    <tr>
      <td>User-Agent</td>
      <td>요청</td>
      <td>사용자의 브라우저</td>
    </tr>
    <tr>
      <td>Referer</td>
      <td>요청</td>
      <td>사용자가 현재 링크를타고 온 근원 페이지</td>
    </tr>
    <tr>
      <td>Authorization</td>
      <td>요청</td>
      <td>사용자의 이름과 비밀번호</td>
    </tr>
    <tr>
      <td>Client-ip</td>
      <td>확장(요청)</td>
      <td>클라이언트의 IP주소</td>
    </tr>
    <tr>
      <td>X-Forwarded-For</td>
      <td>확장(요청)</td>
      <td>클라이언트의 IP주소</td>
    </tr>
    <tr>
      <td>Cookie</td>
      <td>확장(요청)</td>
      <td>서버가 생성한 ID 라벨</td>
    </tr>
  </tbody>
</table>

<p>이번 절에선 위 3개를 알아보고 밑에 4개는 뒤의 각 절에서 알아볼 것입니다.</p>

<p><strong>From 헤더</strong></p>

<p>사용자의 이메일 주소를 나타냅니다. 이메일로는 각 개인 혹은 단체를 식별해낼 수 있지만 서버가 이를 모아 스팸 메일 등 악의적인 목적으로 사용할 수 있기 때문에 자주 사용되진 않습니다. 웹 로봇같은 경우 로봇이 서버에 문제를 일으킬 경우 메일을 보내라는 뜻에서 From 헤더에 문의메일 주소를 남기기도 합니다.</p>

<p><strong>User-Agent</strong> 헤더</p>

<p>사용자가 쓰고 있는 브라우저의 이름과 버전정보, 간혹 운영체제에 대한 정보까지 보내줍니다. 사용자를 식별할 순 없지만 사용자가 사용하는 환경에 대한 정보를 받아 그 환경에 맞는 최적의 콘텐츠를 제공할 수 있습니다.</p>

<p><strong>Referer</strong> 헤더</p>

<p>현재 페이지로 유입하게한 URL을 가리킵니다. 이 역시 이 헤더 자체로는 사용자를 식별할 수 없지만 사용자의 행동에 대한 정보를 알려줍니다. Referer 헤더의 정보로 통계를 내어 본인 사이트에 사람들이 어떤 경로로 많이 들어오는지, 어떤 주제의 사이트에서 유입이 되는지 등을 파악할 수 있습니다.</p>

<hr />

<h3 id="113-클라이언-트-ip-주소">11.3. 클라이언 트 IP 주소</h3>

<p>웹이 막 시작할 시절엔 사용자들이 각자 바뀌지 않는 IP 주소를 가지고 있었습니다. 그래서 초기엔 이런 IP를 이용해 사용자를 식별하려고 했습니다. 기본적으로 HTTP 메세지 자체엔 IP 주소가 없습니다.(IP주소를 담는 Client-ip 같은 헤더는 HTTP 표준이 아닙니다.) 하지만 연결된 TCP 커넥션을 찾아보면 반대쪽의 IP를 알 수 있습니다.</p>

<p>하지만 이렇게 IP로 식별하는 방법은 다음과 같은 약점을 갖고 있습니다.</p>

<ul>
  <li>IP주소는 사용자가 아니라 컴퓨터를 가리킵니다. 가정에서도 여러명이 같은 PC를 사용하며, 공용 PC는 여러 사람이 사용하게 됩니다.</li>
  <li>현대의 많은 ISP(Internet Service Provider)에선 동적으로 IP주소를 할당합니다. 로그인한 시간에 따라 사용자는 매번 다른 IP를 받습니다.</li>
  <li>보안 강화를 위해 NAT(Network Address Translation) 방화벽을 사용하는 경우가 많습니다. 이 경우 서버가 TCP 커넥션을 살펴 알아낸 IP는 사용자의 IP가 아니라 방화벽의 IP입니다.</li>
  <li>현대의 웹에선 클라이언트의 요청이 바로 서버로 가는 경우는 거의 없습니다. 많은 프록시와 게이트웨이를 통과합니다. 이 경우에도 서버는 프록시와 게이트웨이의 IP만 볼 수 있습니다. (이를 해결하려 Client-ip나 X-Forwarded-For HTTP 같은 헤더에 클라이언트의 ip를 담는 프록시도 있으나 표준도 아니고 모든 프록시들이 그렇지도 않습니다.)</li>
</ul>

<p>위와 같은 이유로 IP는 사용자를 식별하기위해 쓰이지 못합니다. 인트라넷 같은 경우엔 보안 기능을 위해 특정 IP에서 오는 사용자에게만 문서를 전달하기도 합니다.</p>

<hr />

<h3 id="114-사용자-로그인">11.4. 사용자 로그인</h3>

<p>사용자에게 로그인을 요구하는 건 더 직접적이고 명확한 식별 방법입니다. HTTP는 로그인을 위해 ‘WWW-Authenticate’헤더와 ‘Authorization’ 헤더를 가지고 있습니다. 한번 로그인 해두면 브라우저는 같은 호스트에게 하는 모든 요청은 이 헤더를 함께 보낼 수 있습니다.</p>

<p>사용자가 로그인이 필요한 리소스를 요청한다면, 서버는 401 Login Required 응답 코드를 브라우저에게 보낼 수 있습니다. 브라우저는 이 응답을 받으면 로그인 대화상자를 띄워 로그인 정보를 받고 다음 요청부터 Authorization 헤더에 그 정보를 담아 보냅니다.</p>

<p>하지만 매 사이트들 옮겨 다닐 때마다 아이디와 비밀번호를 기억해 로그인하는건 귀찮은 일입니다. 사용자가 주로 사용하는 아이디를 선점 당할 수도 있습니다. 다음 절?장?에서 이에 대한 대안을 제시합니다.(로그인 유지 말하는건가?)</p>

<hr />

<h3 id="115-뚱뚱한-url">11.5. 뚱뚱한 URL</h3>

<p>사용자의 URL마다 사용자를 식별할 수 있는 정보를 부여해 계속 추적할 수 있습니다. 이를 fat URL이라고 부릅니다. 보통 식별 정보로는 HTTP 트랜잭션이 쓰입니다. 하나의 HTTP 트랜잭션을 ‘세션’, ‘방문’으로 보고 해당 트랜잭션에 대한 id를 부여합니다.</p>

<p>그리고 응답을 줄때 사이트 내에 걸려있는 모든 링크들의 마지막에 그 id를 붙여 추적합니다. 예를들어 한 트랜잭션의 정보로 <strong>‘002-1145265-898332’</strong>라는 id를 만들었다면 응답을 줄때 걸리는 모든 링크 뒤에 <strong>‘http://www….com/…/002-1145265-898332’</strong>와 같이 id를 붙여 사용자를 계속 추적합니다.</p>

<p>하지만 fat URL엔 다음과 같은 단점이 있습니다.</p>

<p><strong>못생긴 URL</strong></p>

<p>긴 id가 생성되어 URL에 붙으므로 사용자에게 혼란을 줄 수 있습니다.</p>

<p><strong>공유하지 못하는 URL</strong></p>

<p>fat URL엔 사용자의 세션과 같은 개인정보가 들어 있어 해당 URL을 다른사람에게 공유한다면 자신의 개인정보를 유출하게 됩니다.</p>

<p><strong>캐시를 사용할 수 없음</strong></p>

<p>사용자마다, 같은 사용자도 브라우저를 닫고 다시 켤때마다 URL이 달라지므로 캐싱할 수 없습니다.</p>

<p><strong>서버 부하 가중</strong></p>

<p>서버는 fat url에 해당하는 HTML을 계속 다시 그려야 합니다.</p>

<p><strong>이탈</strong></p>

<p>사용자 의도치 않게 다른 사이트로 이동하거나 닫아버리면 지속되고 있던 fat URL이 끊기게 됩니다. 쇼핑몰에서 이런 상황이 일어날 경우 담아 놓은 장바구니가 모두 비워질 수 있습니다.</p>

<p><strong>세션 간 지속성의 부재</strong></p>

<p>fat URL을 북마킹 하지 않는 이상 로그아웃하면 모든 정보를 잃게 됩니다.</p>

<hr />

<h3 id="116-쿠키">11.6. 쿠키</h3>

<p>쿠키는 사용자를 식별하고 세션을 유지하는데 가장 널리 사용되는 방식입니다. 넷스케이프에서 최초로 제작했으며 현재는 모든 브라우저에서 지원합니다.</p>

<p>쿠키는 캐시와 충돌할 수 있기때문에 대부분의 캐시나 브라우저에선 쿠키에 있는 내용을 캐싱하지 않습니다.</p>

<h4 id="1161-쿠키의-타입">11.6.1. 쿠키의 타입</h4>

<p>쿠키는 세션 쿠키와 지속 쿠키로 나뉩니다.</p>

<p><strong>세션 쿠키(session cookie)</strong></p>

<p>사이트 관련 설정과 선호사항을 저장하는 임시 쿠키입니다. 브라우저를 닫으면 삭제됩니다. 쿠키의 파키에 대한 파라미터들 중 Discard가 설정되어 있거나, Expires 혹은 Max-Age 파라미터가 없으면 세션쿠키입니다.</p>

<p><strong>지속 쿠키(persistent cookie)</strong></p>

<p>브라우저를 닫아도 삭제되지 않습니다. 하드 디스크에 직접 저장되어 다음에 브라우저를 켤때에도 사용됩니다. 주기적으로 방문 하는 사이트의 설정 정보나 로그인 정보가 들어 있습니다. 파기되기까지의 시간을 가리키는 Expires, Max-Age 파라미터가 설정될 수 있습니다.</p>

<h4 id="1162-쿠키는-어떻게-동작하는가">11.6.2. 쿠키는 어떻게 동작하는가</h4>

<p>사용자가 어느 웹 사이트에 처음 방문하면 웹 서버는 사용자를 식별하기 위한 id를 쿠키에 할당합니다. 쿠키는 {이름=값, 이름=값, … , 이름=값} 와 같이 표현되며 응답헤더인 Set-Cookie에 담겨 전송됩니다. Set-Cookie를 받은 브라우저는 쿠키를 저장합니다.</p>

<p>쿠키는 사용자가 정의한 ‘이름=값’의 리스트이기 때문에 id뿐 아니라 어떤 정보든 포함할 수 있습니다.</p>

<h4 id="1163-쿠키-상자--클라이언트-측-상태">11.6.3. 쿠키 상자 : 클라이언트 측 상태</h4>

<p>쿠키는 서버 관련 정보를 클라이언트에 저장되고, 사용자가 해당 서버에 접근할때 마다 그 정보를 같이 전송됩니다. 브라우저는 이런 쿠키 정보를 저장하고 관리할 책임이 있습니다. 이를 ‘클라이언트 측 상태(State)’ 라고 합니다. HTTP명세에서의 공식 명칭은 HTTP State Management Mechanism입니다.</p>

<p><strong>구글 크롬 쿠키</strong></p>

<p>구글의 크롬 브라우저는 ‘Cookies’ 라는 이름의 SQLite 파일에 쿠키를 저장합니다.</p>

<p><code class="highlighter-rouge">C:\Users\{Username}\AppData\Local\Google\Chrome\User Data\Default\Cookies</code></p>

<p>따로 설정하지 않았다면 위의 위치에서 파일을 찾을 수 있고, 크롬 브라우저에선 F12를 눌러 나오는 개발자 도구에서 직접 볼 수 있습니다.</p>

<p><img src="/public/image/Http The Definitive Guide/cookies.png" alt="cookies.png" /></p>

<p>저의 https://www.github.com/에 대한 쿠키입니다. 전체가 한 쿠키인 것이 아니라 각 행 1개씩이 쿠키 1개입니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">Name</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">Value</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">Domain</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">Path</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">Expires/Max-Age</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">Size</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">HttpOnly</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">Secure</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="p">,</span><span class="w">
    </span><span class="err">SameSite</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>위의 형식을 갖는 1개의 쿠키가 12개가 있는 것입니다.</p>

<h4 id="1164-사이트마다-각기-다른-쿠키들">11.6.4. 사이트마다 각기 다른 쿠키들</h4>

<p>브라우저는 수백, 수천개의 쿠키를 가지고 있지만 이걸 각 사이트마다 모두 보내진 않습니다. 당연히 각 사이트에 필요한 쿠키만 보내게 됩니다. 그럼 어떻게 쿠키들이 다른 사이트를 구분하게 될까요</p>

<p><strong>쿠키 Domain 속성</strong></p>

<p>위 쿠키 사진을 보시면 ‘Domain’ 컬럼에 ‘github.com’이 보이실 겁니다. 서버에서 쿠키를 생성할때 Set-Cookie 헤더에 Domain 속성을 기술합니다. 위 사진에선 깃허브 서버에서 쿠키를 만들때 ‘github.com’을 넣어 생성한 것입니다.</p>

<p><strong>쿠키 Path 속성</strong></p>

<p>웹 사이트가 크거나 크지 않더라도 성능을 중요시 하는 웹 사이트라면 쿠키에 path를 설정해 사이트의 일부에만 쿠키가 전달되게 할 수 있습니다. 브라우저는 Domain과 path를 조합해 맞는 URL에만 쿠키를 보내게 됩니다.</p>

<h4 id="1165-쿠키-구성요소">11.6.5. 쿠키 구성요소</h4>

<h4 id="1166-version-0-넷스케이프-쿠키">11.6.6. Version 0 (넷스케이프) 쿠키</h4>

<h4 id="1167-version-1-rfc-2965-쿠키">11.6.7. Version 1 (RFC 2965) 쿠키</h4>

<p>쿠키의 변천은 ‘Version 0(넷스케이프 쿠키)’ -&gt; ‘RFC2109 쿠키’ -&gt; ‘Version 1(RFC 2965) 쿠키’ -&gt; ‘RFC 6265 쿠키’ 와 같이 진행됐습니다. 위의 세 절에선 이 변천중 Version 0와 Version 1을 다루고 있는데 Version 1에 지면을 많이 할애했습니다.</p>

<p>하지만 RFC 6265 쿠키가 나오며 RFC 2109 쿠키와 RFC 2965 쿠키는 폐기되었습니다. 변천 내용이 쿠키의 이해에 중요한 부분이면 따로 포스팅해 남기겠지만 작동 방식자체가 바뀌었다기 보단 문법과 속성들이 바뀐것 뿐이라 따라 남기지 않겠습니다.</p>

<p>대신 버전들에 대해 구글링하다가 쿠키에 대해 심도있고 깔끔하게 정리된 글을 찾았습니다.</p>

<p><a href="https://meetup.toast.com/posts/172">https://meetup.toast.com/posts/172</a>  이곳을 찾고하면 좋을 것 같습니다.(저도 언젠간 저런 수준의 포스팅을 할 수 있겠죠..?)</p>

<p>위 포스팅 자체를 정리해 이 포스팅에 포함시킬가도 했으나 이 포스팅에서 포함하기엔 배보다 배꼽이 더 큰 상황인것 같습니다.</p>

<h4 id="1168-쿠키와-세션-추적">11.6.8. 쿠키와 세션 추적</h4>

<p>쿠키를 이용해 세션을 추적하는 과정을 예시를 들어 설명하고 있지만 앞에서 이미 많이 서술되었으므로 생략합니다.</p>

<h4 id="1169-쿠키와-캐싱">11.6.9. 쿠키와 캐싱</h4>

<p>이번장에서 배운 쿠키의 내용을 캐싱에 그대로 적용하게되면 심각한 문제를 발생할 수 있습니다. 쿠키는 개인정보를 다루는데 이를 캐싱해 다른 사람에게도 그 개인정보를 줄 수 있기 때문입니다.</p>

<p><strong>캐시되지 말아야 할 문서가 있다면 표시하라</strong></p>

<p>해당 문서를 캐시해도 될 지 말 지는 문서의 생산자, 소유자가 가장잘 압니다. 만약 응답할 문서에서 ‘Set-Cookie’헤더만 제외하면 캐싱해도 되는 문서라면 <code class="highlighter-rouge">Cache-Control : no-cache="Set-Cookie"</code>헤더를 포함시키면 됩니다. 쿠키와 상관 없이 그냥 캐싱해도 된다면 <code class="highlighter-rouge">Cache-Control : public</code>헤더를 추가합니다.</p>

<p><strong>Set-Cookie 헤더를 캐시 하는 것에 유의하라</strong></p>

<p>캐시는 Set-Cookie헤더를 가진 응답을 캐싱할땐 조심해야 합니다. 응답헤더인 Set-Cookie 헤더는 보내는 정보를 쿠키에 저장하라는 것을 뜻하는데 Set-Cookie헤더를 캐싱해버리면 다른 사람들의 PC에 타인의 개인정보가 저장되기 때문입니다. 또한, Set-Cookie에 있는 사용자를 식별할 id를 여러 사람이 가져가면 서버 입장에서도 사람들을 식별할 수 없게 됩니다.</p>

<p>반대로, 어떤 캐시는 Set-Cookie 헤더를 모두 지우고 저장하기도 합니다. 개인정보를 보호할 수 있을 것 같지만, Set-Cookie를 받아야할 사용자 조차 못받게 될 수 있습니다.</p>

<p>이런 문제에선 캐시가 요청을 받고 서버에 재검사를 보내 Set-Cookie를 받아오는 방법으로 개선할 수 있습니다. 서버가 <code class="highlighter-rouge">Cache-Control : must-revalidate, max-age=0</code>를 썼다는건 캐시에서 보내기 전에 서버를 다시 다녀오라는 뜻입니다.</p>

<p>또 어떤 보수적인 캐시는 서버측에서 캐시해도 된다고 헤더에 기술해도 Set-Cookie가 있으면 캐시하지 않을 수도 있습니다.</p>

<p>어떤 캐시는 Set-Cookie가 있는 이미지는 캐시하지만 텍스트는 캐시하지 않기도 합니다.</p>

<p><strong>Cookie 헤더를 가지고 있는 요청을 주의하라</strong></p>

<p>Cookie 헤더를 가진 요청에 대한 응답은 개인정보를 포함하고 있을수도 있습니다. 따라서 캐시는 Cookie헤더를 가진 요청에 대한 응답을 캐싱할땐 조심해야 합니다.</p>

<p>보수적인 캐시는 마찬가지로 Cookie 헤더를 가진 요청에 대한 응답은 모두 캐시하지 않을 수도 있습니다. 앞서 말한것 처럼 이미지는 캐시하고, 텍스트는 캐시하지 않을 수도 있습니다.</p>

<h4 id="11610-쿠키-보안-그리고-개인정보">11.6.10. 쿠키, 보안 그리고 개인정보</h4>

<p>쿠키가 보안에 취약하다는 얘기도 있으나 과장된 말이라고 생각합니다. 개인정보는 DB에 저장해두고 쿠키로는 DB에 있는 개인정보를 특정할 수 있는 키값만 보내면 중요한 개인정보를 숨길 수 있습니다.</p>

<p>다만 요 근래 사용자의 활동 정보를 무단으로 수집하려는 마케팅 회사등이 더 문제라고 생각합니다.</p>

<hr />

<h3 id="마치며">마치며</h3>

<p>예전에 이론적으로 배운 쿠키나 실제 개발할때 사용해본 쿠키를 떠올려봤을때 이번 장은 가볍게 넘어갈 수 있을 것이라 생각했습니다. 하지만 캐시와 함께 엮이니 꽤나 머리가 아프기 시작했습니다. 그리고 앞서 소개해드린 <a href="https://meetup.toast.com/posts/172">https://meetup.toast.com/posts/172</a> 이 포스팅을 읽고나니 이정도의 수준으로 알아야 안다고 할 수 있겠구나라고 생각했습니다.</p>
:ET