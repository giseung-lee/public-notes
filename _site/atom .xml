<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>이기승의 개발일지</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2020-04-14T23:35:12+09:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Lee Kiseung</name>
   <email>ntz4kiseung@gmail.com</email>
 </author>

 
 <entry>
   <title>Twitch Chat Analysis</title>
   <link href="http://localhost:4000/posts/projects/twitch_chat_anaylsis/TCA1/"/>
   <updated>2020-04-09T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/projects/twitch_chat_anaylsis/TCA1</id>
   <content type="html">&lt;p&gt;[&quot;posts&quot;, &quot;Projects&quot;, &quot;twitch_chat_anaylsis&quot;]&lt;/p&gt;

&lt;h2 id=&quot;0-개요&quot;&gt;0. 개요&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;급속한 인기를 얻고 있는 인터넷 방송은 방송 시간이 굉장히 깁니다. 적게는 4~5시간, 많게는 12시간, 18시간까지 됩니다. 일반적인 사람이라면 그 긴 방송을 모두 볼 순 없습니다. 재미있는 부분만 골라 볼 수 있는 웹 사이트가 있으면 좋겠다고 생각했고, 이 프로젝트를 시작하게 되었습니다.&lt;/p&gt;

&lt;p&gt;기획은 크게 세 단계로 나누었습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;채팅의 속도를 기반으로 한 다시보기 지점 서비스&lt;/li&gt;
  &lt;li&gt;채팅의 내용을 기반으로 한 다시보기 지점 서비스&lt;/li&gt;
  &lt;li&gt;AWS에 올려 실제 서비스하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그리고 1단계 기획은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기획&lt;/li&gt;
  &lt;li&gt;웹 디자인&lt;/li&gt;
  &lt;li&gt;API 서버 구현 - Node js&lt;/li&gt;
  &lt;li&gt;클라이언트 구현 - React Redux&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위와 같이 나누었습니다. 그리고 1, 2, 3을 마치고 4를 수행하던 도중에…!! 전 직장에 취직이 되어 아쉽게 멈춘 프로젝트입니다.&lt;/p&gt;

&lt;p&gt;이번 포스팅에선 지금까지의 진척상황을 요약하고 다음 포스팅에서 개발을 이어 나가겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;1-기획&quot;&gt;1. 기획&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-웹-디자인&quot;&gt;2. 웹 디자인&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-api-서버-구현&quot;&gt;3. API 서버 구현&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-클라이언트-구현&quot;&gt;4. 클라이언트 구현&lt;/h2&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>기존 Sagyo 프로젝트 알아보기.</a></title>
   <link href="http://localhost:4000/posts/projects/sagyo%20reboot/Sagyo%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/"/>
   <updated>2020-04-05T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/projects/sagyo%20reboot/Sagyo알아보기</id>
   <content type="html">
&lt;h2 id=&quot;0-개요-및-사용기술&quot;&gt;0. 개요 및 사용기술&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Sagyo 프로젝트는 2019년 5월 29일 ~ 2019년 7월 19일에 진행된 6인 프로젝트입니다.
    &lt;ul&gt;
      &lt;li&gt;기획 - 4주&lt;/li&gt;
      &lt;li&gt;DB설계 및 개발 - 1주&lt;/li&gt;
      &lt;li&gt;웹 개발 - 3주&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Sagyo Reboot/plan.png&quot; alt=&quot;plan.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;저희는 &lt;strong&gt;기존 소셜다이닝 웹 서비스&lt;/strong&gt;들이 좋은 취지에도 불구하고 크게 성공하지 못한건 &lt;strong&gt;유저간 신뢰도 확보의 부족&lt;/strong&gt;이라고 진단했습니다. Sagyo는 &lt;strong&gt;기존 소셜다이닝 웹 서비스들의 기능을 구현&lt;/strong&gt;하면서, &lt;strong&gt;유저들 간의 신뢰 확보 수단을 강화&lt;/strong&gt;한 웹 어플리케이션입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;위와 같은 거창한 포부를 갖고 시작했으나, 기획력의 부족으로 &lt;strong&gt;기존 소셜다이닝 웹 서비스들의 기능을 구현하는 데에도 급급했던 프로젝트&lt;/strong&gt;입니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로젝트를 지도한 강사님의 지도아래 &lt;del&gt;당시엔 정말 귀찮았던&lt;/del&gt; 문서 작업을 철저히 했뒀는데, 지금 다시 열어보니 남기길 잘 했다는 생각이 듭니다. (강사님 감사합니다 :pray:)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;사용 기술스택은 전형적인 Spring 프레임워크를 사용하는 Java 스택으로, 다음과 같습니다.
    &lt;ul&gt;
      &lt;li&gt;HTML / CSS / JS&lt;/li&gt;
      &lt;li&gt;Java / Spring&lt;/li&gt;
      &lt;li&gt;Oracle / Mybatis&lt;/li&gt;
      &lt;li&gt;Apache / Tomcat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-기획-및-기능&quot;&gt;1. 기획 및 기능&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트시 작성해 놓은 상세한 요구분석서는 &lt;a href=&quot;/public/document//sagy_require.pdf&quot;&gt;여기&lt;/a&gt;를 참조해주세요. 아래는 간략히 기술하겠습니다.&lt;/li&gt;
  &lt;li&gt;기능별 분류 - 아래에서 ‘모임’은 소셜다이닝 모임을 위한 글이라고 생각하시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;분야&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;회원관련&lt;/td&gt;
      &lt;td&gt;회원 가입, 탈퇴 / 회원정보 조회, 수정 / 로그인 / 로그아웃 / 쪽지 / 팔로우 등&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;검색 및 필터 기능(모임 조회)&lt;/td&gt;
      &lt;td&gt;카테고리 검색 / 통합검색 / 필터링 검색 등&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;모임 개설 및 참가 관련&lt;/td&gt;
      &lt;td&gt;모임개설 / 참여신청 / 수락 및 거절 / 댓글 등&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;사용자간 평가&lt;/td&gt;
      &lt;td&gt;평점 / 뱃지 / 코멘트 등&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;신고 및 관리 기능&lt;/td&gt;
      &lt;td&gt;게시글 및 댓글 신고 / 공지사항 / FAQ / 1:1문의 등&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;위 기능들을 바탕으로 &lt;a href=&quot;/public/document/sagyo_stroyboard.pdf&quot;&gt;스토리보드&lt;/a&gt;를 완성했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-db-설계&quot;&gt;2. DB 설계&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;참여 인원 모두 전반적인 웹 서비스를 배우는 중이었기 때문에 DB설계는 모두 같이 진행했습니다.&lt;/li&gt;
  &lt;li&gt;설계 결과 총 41개의 테이블이 나왔습니다.&lt;/li&gt;
  &lt;li&gt;DB에 대한 명세서는 &lt;a href=&quot;/public/document/sagyo_DBspecification&quot;&gt;여기&lt;/a&gt;, ER다이어그램은 &lt;a href=&quot;/public/document/sagyo_ERdiagram.pdf }}&quot;&gt;여기&lt;/a&gt;를 참고해주세요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-웹-디자인&quot;&gt;3. 웹 디자인&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;흔히 개발자들의 웹 프로젝트가 그렇듯이 저희도 팀원 중 딱히 웹 디자인에 일가견 있는 사람이 없었습니다.&lt;/li&gt;
  &lt;li&gt;제 원래 전공인 조경학에서 익혀온 디자인 &lt;del&gt;베끼기&lt;/del&gt; 실력으로 제가 주도로 진행하게 됐습니다.&lt;/li&gt;
  &lt;li&gt;제작은 Adobe XD로 진행했고, 처음 해본 웹 디자인이었지만 생각보다 잘 나온것 같아 흡족했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Sagyo Reboot/main.png&quot; alt=&quot;main.png&quot; /&gt;&lt;em&gt;메인 페이지 -주황색 색감이 소셜다이닝에 잘 맞는것 같았다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Sagyo Reboot/postlist.png&quot; alt=&quot;postlist.png&quot; /&gt;*글 목록 조회 및 필터링 *&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Sagyo Reboot/post.png&quot; alt=&quot;post.png&quot; /&gt;&lt;em&gt;소셜다이닝 모집글&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Sagyo Reboot/badge.png&quot; alt=&quot;badge.png&quot; /&gt;&lt;em&gt;팀원 K가 제작해준 뱃지들 - 처음엔 당황스러웠지만 보다보니 정들었다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Sagyo Reboot/follow.png&quot; alt=&quot;follow.png&quot; /&gt;&lt;em&gt;팔로우/팔로워 목록&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-역할-분담&quot;&gt;4. 역할 분담&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;6명이 역할을 각각 나누었고 제가 맡게된 것은 다음과 같습니다.
    &lt;ol&gt;
      &lt;li&gt;일정 관리 및 팀원간 개발 범위 조율, 개발 지원 - 팀장의 역할&lt;/li&gt;
      &lt;li&gt;퍼블리싱 - 원래 계획은 각자하는 것이었지만 일정상 제가 모두 처리하게 됐습니다.&lt;/li&gt;
      &lt;li&gt;샘플 데이터 생성 - PL/SQL 문으로 샘플 데이터를 생성했습니다.&lt;/li&gt;
      &lt;li&gt;모임 추천기능 - 모임 목록뿌려주는 방식(검색, 카테고리, 필터링)에 따른 모임 추천&lt;/li&gt;
      &lt;li&gt;메인페이지&lt;/li&gt;
      &lt;li&gt;모임 목록 페이지&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;팀장으로 참여&lt;/strong&gt;하여 ‘1. 개발 범위 조율 및 지원’에 할애한 시간이 커, 실질적인 개발양은 많지 않았습니다. 퍼블리싱이 끝난 후 &lt;strong&gt;본격적인 개발기간의 절반은 돌아다니며 기능 구현 방법에 대한 질문을 받고, 에러를 잡아주고 하는데 사용한 것 같습니다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-개발1---퍼블리싱&quot;&gt;5. 개발1 - 퍼블리싱&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;51-처음-계획&quot;&gt;5.1. 처음 계획&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;본 프로젝트를 진행하는 6명 모두 웹을 처음 배우는 것이라 &lt;strong&gt;원래 계획은 ‘각자 맡은 부분의 퍼블리싱은 각자 하자’&lt;/strong&gt;였습니다. (모두 HTML, CSS 기술을 익혀야 하니)&lt;/li&gt;
  &lt;li&gt;각자 퍼블리싱을 맡기고 &lt;strong&gt;한 주간 지켜봤습니다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;우선 &lt;strong&gt;진행률이 예상의 1/4&lt;/strong&gt;도 되지 않았습니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;같은 페이지인데 서로 다른 결과물&lt;/strong&gt;이 나왔습니다.&lt;/li&gt;
      &lt;li&gt;‘조금 다른거니 나중에 내가 수합하면서 맞춰보자’ 생각하며 소스를 열어봤더니
        &lt;ul&gt;
          &lt;li&gt;div 가운데 정렬을 하는데 그렇게 많은 방법이 있는줄 몰랐습니다. :scream: 6명의 HTML, CSS를 수정하면서 통합하는 것보다 처음부터 만드는게 더 빠를 것 같았습니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;52-특단의-조치&quot;&gt;5.2. 특단의 조치&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;퍼블리싱을 다음주까지 넘기면 프로젝트 전체가 위태로운 상황&lt;/strong&gt;이었습니다. 특단의 조치를 내려야 했습니다.&lt;/li&gt;
  &lt;li&gt;‘&lt;strong&gt;내가 주말에 다 해올테니&lt;/strong&gt;, 월요일부터 진행할 MVC 디자인 패턴 개발 연습을 더 해왔으면 좋겠다.’ 라고 일단 선언 했습니다. 저도 HTML, CSS를 처음 배운거라 자신이 있진 않았지만 이 속도라면 퍼블리싱하다가 프로젝트 기간이 끝날 것 같았습니다.&lt;/li&gt;
  &lt;li&gt;금요일 밤부터 시작해 토요일, 일요일, 월요일 아침까지 하루종일 HTML, CSS와 씨름한 결과 총 27개의 페이지를 모두 끝낼 수 있었습니다.
    &lt;ul&gt;
      &lt;li&gt;아쉬운 점이 있다면, &lt;strong&gt;반응형 웹을 완벽히 구현해 내진 못했습니다.&lt;/strong&gt; 폰트들도 px단위로 맞춰져 있고 꽤 많은 div들이 px 단위로 맞춰져 있었습니다. 이를 일요일 쯤 발견했지만 다시 바꾸기 시작했다간 팀원들이 월요일에 할 일이 없을 것 같았습니다.&lt;/li&gt;
      &lt;li&gt;또, 당시엔 &lt;strong&gt;HTML, CSS 작업만 해서 주었는데&lt;/strong&gt; 모달 팝업, 아코디언 목록 같이 &lt;strong&gt;JS가 많이 들어가는 페이지를 맡은 팀원들은 그 부분을 처리하느라 시간이 많이 지체되었습니다.&lt;/strong&gt; 이 부분은 나중에 팀원들이 &lt;strong&gt;각자 다른 버전의 JS 라이브러리를 긁어와 심각한 충돌이 발생했던 지점이기도 합니다.&lt;/strong&gt; 이럴줄 알았더라면 JS를 이용한 퍼블리싱도 마무리 했어야 했는데 아쉽습니다.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/8540176&quot;&gt;https://d2.naver.com/helloworld/8540176&lt;/a&gt; 이곳을 정말 많이 참고했습니다. 아마 이 포스트가 없었다면 퍼블리싱 완성하지 못했을 것입니다. 엄청난 감사를… ㅜㅜ&lt;/li&gt;
      &lt;li&gt;그래도 디자인 한대로 퍼블리싱이 잘 나와 만족스러웠습니다. :grinning:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;페이지-켜보고-비교-사진-추가&quot;&gt;페이지 켜보고 비교 사진 추가&lt;/h2&gt;

&lt;h2 id=&quot;6-개발2---샘플-데이터-생성&quot;&gt;6. 개발2 - 샘플 데이터 생성&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;학원에서 각 과목을 배울때 마다 미니 프로젝트를 진행했습니다. 그때 마다 제가 다른 팀들과 다르게 해오던게 있습니다. 바로 샘플 데이터를 자동 생성하는 것입니다.&lt;/li&gt;
  &lt;li&gt;물론, 테스트 샘플 데이터를 만드는 영역도 파고들어가면 끝도 없어서 제가한 방법이 초라해지지만.. 그래도 다른팀이 인력을 갈아넣어 2~300개 만든 데이터로 테스트할때 10,000개 이상의 데이터로 테스트한걸 굉장히 뿌듯하게 여기고 있습니다.&lt;/li&gt;
  &lt;li&gt;샘플 데이터 생성은 PL/SQL을 이용했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;하다가 소스코드 찾으면 올리기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;7-개발3---모임-추천기능검색-카테고리-필터링&quot;&gt;7. 개발3 - 모임 추천기능(검색, 카테고리, 필터링)&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;모임 추천은 크게 필터링 요소, 배점 요소로 이루어집니다.&lt;/li&gt;
  &lt;li&gt;필터링 요소는 카테고리 기능이나 필터링 기능을 사용할 때 쓰입니다.&lt;/li&gt;
  &lt;li&gt;배점 요소는 통합 검색 및 필터링 후 나머지 요소들을 계산하기 위해 쓰입니다.&lt;/li&gt;
  &lt;li&gt;배점 요소가 필터링 요소가 될 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;예시1
    &lt;ul&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;8-개발4---메인페이지&quot;&gt;8. 개발4 - 메인페이지&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;메인 페이지엔 활동 지수(기간 내 조회 및 참가 신청 횟수)가 높은 모임, 마감 임박 모임(날짜가 임박했거나 인원수가 임박했거나)이 띄워집니다.&lt;/li&gt;
  &lt;li&gt;저희 웹 서비스에서 ‘뱃지’라고 불리며 이용하고 있는 사용자 평가 수단에 대한 안내가 메인 페이지에 랜덤하게 나옵니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;9-개발5---모임-조회&quot;&gt;9. 개발5 - 모임 조회&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;모임 조회는 크게 통합 검색, 카테고리 검색으로 나뉩니다.&lt;/li&gt;
  &lt;li&gt;통합 검색, 카테고리 검색 이후에 결과들을 필터링 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>오라클, sqldeveloper 연결시 SID 관련 (ORA-12505) 에러</title>
   <link href="http://localhost:4000/posts/googling/etc/%EC%98%A4%EB%9D%BC%ED%81%B4-SID-%EA%B4%80%EB%A0%A8%EC%97%90%EB%9F%AC/"/>
   <updated>2020-04-05T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/etc/오라클 SID 관련에러</id>
   <content type="html">
&lt;h2 id=&quot;오라클-설치-및-sqldeveloper-연결시-에러발생&quot;&gt;오라클 설치 및 sqldeveloper 연결시 에러발생!&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;새 컴퓨터에서 프로젝트 셋팅하던 와중에 발생한 에러입니다. 오라클 11g를 설치하고 sqldeveloper를 설치했습니다. sqldeveloper에서 Oracle 연결하려고 테스트를 눌렀는데…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/etc/sqldeveloper_error.png&quot; alt=&quot;sqldeveloper_error.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;위와 같은 에러가 났습니다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;상태: 실패 -테스트 실패: Listener refused the connection with the following error:
ORA-12505, TNS:&lt;strong&gt;listener does not currently know of SID given&lt;/strong&gt; in connect descriptor&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Oracle 리스너가 주어진 SID를 모른다는데 SID가 뭔지 찾아봤습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;공식 명세에 따르면 SID란 &lt;em&gt;The &lt;strong&gt;system identifier (SID)&lt;/strong&gt; is a &lt;strong&gt;unique name for an Oracle database instance&lt;/strong&gt; on a specific host.&lt;/em&gt; 입니다. 오라클 DB의 인스턴스 이름!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;JVM에 여러 자바 인스턴스들이 만들어지고 각자 이름이 있는 것 처럼 오라클도 하나의 오라클 서버에 여러 DB인스턴스가 생성될 수 있습니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그리고 ORA-12505 에러에 대한 &lt;a href=&quot;https://docs.oracle.com/cd/E11882_01/server.112/e17766/net12500.htm&quot;&gt;공식 명세&lt;/a&gt; 역시 찾아봤습니다. 명세중 중요한 내용을 뽑아봤습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;리스너가 연결 요청을 받았다.&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;connect descriptor가 리스너로부터 SID를 받았는데, SID가 &lt;strong&gt;동적으로 등록&lt;/strong&gt;되지 않았거나 &lt;strong&gt;정적으로 configured&lt;/strong&gt;되지 않았다.&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;리스너가 시작된지 얼마 안돼 DB 인스턴스가 리스너에 등록되지 않았을 수 있다.&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;ORA-12505: TNS:listener does not currently know of SID given in connect descriptor&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;Cause:&lt;/strong&gt; The listener received a request to establish a connection to a database or other service. The connect descriptor received by the listener specified a SID for an instance (usually a database instance) that either has not yet dynamically registered with the listener or has not been statically configured for the listener. This may be a temporary condition such as after the listener has started, but before the database instance has registered with the listener.&lt;/p&gt;

      &lt;p&gt;&lt;strong&gt;Action:&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;- Wait a moment and try to connect a second time.&lt;/p&gt;

      &lt;p&gt;- Check which instances are currently known by the listener by executing: lsnrctl services &lt;listener name=&quot;&quot;&gt;&lt;/listener&gt;&lt;/p&gt;

      &lt;p&gt;- Check that the SID parameter in the connect descriptor specifies an instance known by the listener.&lt;/p&gt;

      &lt;p&gt;- Check for an event in the listener.log file.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오라클을 켠지는 꽤 되었으니 리스너가 시작된지 얼마 되지 않아 SID를 못찾는건 아닌것 같아서 일단 현재 SID를 확인 하는 방법을 찾아봤습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;우선 SQL Plus를 켠 다음 sysdba로 접속합니다.&lt;/p&gt;

        &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;사용자명&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sysdba&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;비밀번호&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    
&lt;span class=&quot;err&quot;&gt;다음에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;접속됨&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enterprise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Edition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Release&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Production&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;With&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Partitioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OLAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Real&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Testing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;options&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;다음 아래의 쿼리로 SID를 알아냅니다.&lt;/p&gt;

        &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;orcl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;변경하면 아래와 같이 접속에 성공합니다!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/etc/sqldeveloper_success.png&quot; alt=&quot;sqldeveloper_success.png&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Line 코딩테스트 후기</title>
   <link href="http://localhost:4000/posts/daily%20thoughts/Line%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%9B%84%EA%B8%B0/"/>
   <updated>2020-04-05T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/daily%20thoughts/Line코딩테스트 후기</id>
   <content type="html">&lt;h3 id=&quot;라인-코딩테스트-후기&quot;&gt;라인 코딩테스트 후기&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;4월 5일 라인 코딩테스트를 보았습니다. 자세한 사항은 당연히 남길 수 없으나 전체적인 총평 및 후기를 남겨봅니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;처음 6문제 150분인걸 들었을 때 머릿속으로 구상해봤습니다. ‘2문제 정도는 보고 바로 풀어서 주석까지 10분안에 쓸 수 있는 문제가 나오겠고, 중간 2문제는 적당한 난이도로 30~40분 걸리는 문제가 나오겠고, 마지막 2문제는 정답을 맞춘다기 보단 최선을 다해서 하는데 까지 해보는 문제로 나오겠지?’ 라는 생각을 했습니다.&lt;/li&gt;
  &lt;li&gt;그런데 문제를 받고 슥 훑어 보는데 &lt;strong&gt;보자마자 코드까지 스르륵 그려지는 문제가 없는 것입니다!&lt;/strong&gt; 보통 1, 2번은 몸풀기로 주던데 이번 코딩테스트 1, 2번은 어떻게 풀어 갈지는 생각이 나지만 코드 한줄 한줄이 눈에 그려지는 정도는 아니었습니다.&lt;/li&gt;
  &lt;li&gt;그런데 더 이상했던건 &lt;strong&gt;보자마자 ‘야~ 이건 힘들겠는데’하는 문제도 없었습니다.&lt;/strong&gt;:fearful: 음.. 뭐지? 6문제가 나오면 1~2문제는 한숨부터 나와야 하는데 막상 그정도 문제는 없었습니다.&lt;/li&gt;
  &lt;li&gt;막상 풀이를 시작하니 술술 풀리진 않지만, 그렇다고 꽉 막힌것도 아닌 20~30분 정도에 한 문제씩 풀어나갔습니다. 6문제 중 5문제는 &lt;del&gt;(더 좋은 풀이가 있는 것 같지만)&lt;/del&gt; 다 풀었고, 마지막 한 문제는 조금 시간이 걸리는 문제라 완성은 못했지만 꽤나 많이 채웠습니다!&lt;/li&gt;
  &lt;li&gt;결과는 나와봐야 알겠지만.. 만족스러운 코딩테스트였습니다.:sunglasses:&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>리다이렉션과 부하 균형</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C20/"/>
   <updated>2020-04-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드20</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;이번 장에선 리다이렉션에 대해 알아보겠습니다.&lt;/li&gt;
  &lt;li&gt;다음과 같은 것들에 대해 배웁니다.
    &lt;ul&gt;
      &lt;li&gt;HTTP 리다이렉션&lt;/li&gt;
      &lt;li&gt;DNS 리다이렉션&lt;/li&gt;
      &lt;li&gt;임의 캐스트 라우팅&lt;/li&gt;
      &lt;li&gt;정책 라우팅&lt;/li&gt;
      &lt;li&gt;아이피 맥 포워딩&lt;/li&gt;
      &lt;li&gt;아이피 주소 포워딩&lt;/li&gt;
      &lt;li&gt;웹 캐시 조직 프로토콜(WCCP)&lt;/li&gt;
      &lt;li&gt;인터캐시 커뮤니케이션 프로토콜(ICP)&lt;/li&gt;
      &lt;li&gt;하이퍼텍스트 캐싱 프로토콜(HTCP)&lt;/li&gt;
      &lt;li&gt;네트워크 요소 제어 프로토콜(NECP)&lt;/li&gt;
      &lt;li&gt;캐시 배열 라우팅 프로토콜(CARP)&lt;/li&gt;
      &lt;li&gt;웹 프록시 자동발견 프로토콜(WPAD)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;201-왜-리다이렉트인가&quot;&gt;20.1. 왜 리다이렉트인가?&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;현대의 웹은 항상 다음과 같은 사항들을 요구합니다.
    &lt;ul&gt;
      &lt;li&gt;신뢰할 수 있는 HTTP 트랜잭션&lt;/li&gt;
      &lt;li&gt;지연 최소화&lt;/li&gt;
      &lt;li&gt;네트워크 대역폭 절약&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;위 사항들을 만족시키려면 콘텐츠의 분산이 필수적입니다. 그리고 그에 따라 리다이렉션도 현대 웹의 필수 사항이 됐습니다.&lt;/li&gt;
  &lt;li&gt;이런 리다이렉션을 구현하기 위해선 부하균형(Load Balancing, 앞으로 로드밸런싱이라 부름)에 관한 문제를 고민해봐야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;202-리다이렉트-할-곳&quot;&gt;20.2. 리다이렉트 할 곳&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;서버, 프록시, 캐시, 게이트웨이 모두 리다이렉션을 할수 있고, 리다이렉션의 대상이 될 수 있습니다.&lt;/li&gt;
  &lt;li&gt;웹 서버로의 리다이렉션은 보통 한 요청에 대해 가장 빠르게 응답할 수 있는 곳으로 보낼때 사용합니다.&lt;/li&gt;
  &lt;li&gt;프록시에서의 리다이렉션은 보통 트래픽의 주 진입로 중간에 끼어 빠른 길을 찾아주고자 할때(캐시 처럼)사용합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;203-리다이렉션-프로토콜의-개요&quot;&gt;20.3. 리다이렉션 프로토콜의 개요&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;리다이렉션의 궁극적인 목표는 HTTP 트랜잭션을 빠르게 만드는 것입니다.&lt;/li&gt;
  &lt;li&gt;리다이렉션되는 HTTP 메세지들은 많은 HTTP 애플리케이션(서버, 프록시 등)과 네트워크 장치(스위치, 라우터 등)에 영향을 받습니다.&lt;/li&gt;
  &lt;li&gt;대부분의 리다이렉션 기법들이 어떤 서버, 프록시에서든 가능하지만 몇몇 리다이렉션 기법(브라우저에서 프록시 설정하는 것 등)은 프록시로 향하는 리다이렉션에서만 작동합니다.
    &lt;ul&gt;
      &lt;li&gt;20.4에선 일반적인 리다이렉션 방법을 알아보고&lt;/li&gt;
      &lt;li&gt;20.5에선 프록시에서만 사용되는 리다이렉션을 알아보겠습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;204-일반적인-리다이렉션-방법&quot;&gt;20.4. 일반적인 리다이렉션 방법&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;이 절에선 서버, 프록시 양쪽에서 모두 쓰일 수 있는 일반적인 리다이렉션 방법을 알아볼 것입니다.&lt;/li&gt;
  &lt;li&gt;다음과 같은 방법을 알아봅니다.
    &lt;ul&gt;
      &lt;li&gt;HTTP 리다이렉션&lt;/li&gt;
      &lt;li&gt;DNS 리다이렉션&lt;/li&gt;
      &lt;li&gt;애니캐스트 어드레싱 (책엔 ‘임의 캐스트(Anycast)’라고 되어 있으나 애니캐스트라고 부르겠습니다.)&lt;/li&gt;
      &lt;li&gt;아이피 맥 포워딩&lt;/li&gt;
      &lt;li&gt;아이피 주소 포워딩&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2041-http-리다이렉션&quot;&gt;20.4.1. HTTP 리다이렉션&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 리다이렉션이란 한 요청에 대해 302 Redirect 코드와 Location헤더 응답으로 리다이렉션 시키는 것입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음은 HTTP 리다이렉션의 예입니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A가 B에게 요청을 보냅니다. Host 헤더는 도메인명입니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /hammers.html HTTP/1.0
Host: www.joes-hardware.com
User-Agent: Mozilla/4.51 [en] (X11; U; IRIX 6.2 IP22) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;B(www.joes-hardware.com)는 분산된 서버중에 가장 빠른 서버를 찾아주는 서버였고 다음과 같은 응답을 돌려 줍니다. 응답은 C서버(161.58.228.45)로 리다이렉션 시키는 응답입니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.0 302 Redirect
Server: Stronghold/2.4.2 Apache/1.3.6
Location: http://161.58.228.45/hammers.html 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A는 B의 응답의 Location 헤더를 읽고 Location 헤더에 있는 ip 주소를 요청의 Host 헤더에 넣습니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /hammers.html HTTP/1.0
Host: 161.58.228.45
User-Agent: Mozilla/4.51 [en] (X11; U; IRIX 6.2 IP22) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;C서버(161.58.228.45)는 A의 요청에 대해 맞는 리소스를 돌려주게 됩니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 리다이렉션의 장점은 다음과 같습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;리다이렉션을 시키는 서버가 클라이언트의 IP 주소등의 정보를 알고 있습니다.&lt;/li&gt;
      &lt;li&gt;클라이언트의 정보에 근거해 최적의 서버를 찾아줄 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 리다이렉션의 단점은 다음과 같습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;리다이렉션을 해주는 서버에 많은 부하가 걸립니다.&lt;/li&gt;
      &lt;li&gt;요청할 때마다 두 번의 왕복이 필요합니다.&lt;/li&gt;
      &lt;li&gt;리다이렉션을 해주는 서버가 고장나면 다른 서버를 이용할 수 없습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단점도 많기 때문에 보통 다른 리다이렉션 기법과 같이 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2042-dns-리다이렉션&quot;&gt;20.4.2. DNS 리다이렉션&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;www.joes-hardware.com 같은 도메인을 받으면 이를 IP로 변환해주는 작업이 필요합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이를 수행해주는 것이 DNS Resolver 입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DNS Resolver는 클라이언트의 운영체제, 클라이언트의 DNS 서버, 원격의 DNS 서버 등 다양합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;한편, 하나의 도메인은 여러 IP를 갖을 수 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;이때 DNS Resolver는 IP의 목록을 보여줍니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;아래는 윈도우 콘솔을 이용해 www.youtube.com의 IP 목록을 찾은 것입니다.&lt;/p&gt;

        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kiseung&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nslookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;youtube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;서버&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;bns1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hananet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;210&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;163&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;
    
&lt;span class=&quot;err&quot;&gt;권한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;없는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;응답&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;youtube&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Addresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6800&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4004&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;174&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;216&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;197&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;175&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;216&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;174&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;216&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;197&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;238&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;206&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;217&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Aliases&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;youtube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;서버:    bns1.hananet.net&lt;/code&gt; 는 제가 사용하고 있는 DNS 서버입니다.  DNS 서버가 다르다면 조회한 IP 목록이 다를 수 있습니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이런 여러 IP중 하나를 선택하는 방법은 매우 다양합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;여러 IP들이 부하를 골고루 받도록 하는 방법을 로드 밸런싱이라고 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DNS 라운드 로빈&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;라운드 로빈은 로드밸런싱의 가장 간단한 방법입니다.&lt;/li&gt;
  &lt;li&gt;라운드 로빈은 여러 개의 서버에 순서대로 부하를 주는 방법입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;다중 주소와 라운드 로빈 주소 순환&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;대부분 DNS 클라이언트는 받아온 IP 목록 중 첫번째 IP를 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이때, DNS 서버는 로드밸런싱을 위해 DNS 클라이언트에게 IP 목록을 돌려주고나서 IP목록을 순환시켜 줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래와 같이 www.youtube.com의 IP 목록을 조회할 때 마다 IP들의 순서가 바뀌는 것을 볼수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;이름:    youtube-ui.l.google.com
Addresses:  2404:6800:4004:81f::200e
          172.217.27.78
          172.217.26.14
          :
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;이름:    youtube-ui.l.google.com
Addresses:  2404:6800:4004:813::200e
          172.217.25.110
          172.217.175.110
          :
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;이름:    youtube-ui.l.google.com
Addresses:  2404:6800:4004:81d::200e
          172.217.175.14
          216.58.197.142
          :
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DNS 캐싱의 효과&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;라운드 로빈은 합리적인 것 같지만 DNS 캐시를 생각해보면 얘기가 달라집니다.&lt;/li&gt;
  &lt;li&gt;콘텐츠들을 캐싱하는 것 처럼 DNS 조회 결과 역시 캐시할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;이때 캐시된 DNS를 사용한다면, 한 클라이언트는 계속 같은 IP를 사용할 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;다른 DNS 기반 리다이렉션 알고리즘&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단순한 라운드 로빈 방식이 아닌 다른 방식으로 여러 IP중 하나를 고르기도 합니다.
    &lt;ul&gt;
      &lt;li&gt;로드 밸런싱 알고리즘 : DNS 서버가 대상 웹 서버들의 로드를 추적해 가장 로드가 적은 서버를 IP목록의 제일 위에 놓습니다.&lt;/li&gt;
      &lt;li&gt;근접 라우팅(Proximity-routing) 알고리즘 : 대상 웹 서버들이 지리적으로 분산되어 있는 경우, 클라이언트와 지리적으로 인접한 웹 서버를 찾습니다.&lt;/li&gt;
      &lt;li&gt;결함 마스킹 알고리즘(Fault-masking) : DNS 서버가 네트워크의 상태를 모니터링하며 장애가 없고 빠른 네트워크로 라우팅 시킵니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2043-임의캐스트anycast-어드레싱&quot;&gt;20.4.3. 임의캐스트(Anycast) 어드레싱&lt;/h4&gt;

&lt;h4 id=&quot;2044-아이피-맥-포워딩&quot;&gt;20.4.4. 아이피 맥 포워딩&lt;/h4&gt;

&lt;h4 id=&quot;2045-아이피-주소-포워딩&quot;&gt;20.4.5. 아이피 주소 포워딩&lt;/h4&gt;

&lt;h4 id=&quot;2046-네트워크-구성요소-제어-프로토콜&quot;&gt;20.4.6. 네트워크 구성요소 제어 프로토콜&lt;/h4&gt;

&lt;h3 id=&quot;205-프록시-리다이렉션-방법&quot;&gt;20.5. 프록시 리다이렉션 방법&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 본 것은 일반적인 리다이렉션 방법이었습니다.&lt;/li&gt;
  &lt;li&gt;한편, 프록시에서만 사용되는 리다이렉션 방법들이 있는데 그 대표적인 예가 브라우저에서 프록시를 설정하는  것입니다.&lt;/li&gt;
  &lt;li&gt;브라우저에서 프록시를 설정하는 방법은 크게 세 가지가 있습니다.
    &lt;ul&gt;
      &lt;li&gt;명시적 설정&lt;/li&gt;
      &lt;li&gt;동적 설정&lt;/li&gt;
      &lt;li&gt;웹 프록시 자동발견&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2051-명시적-브라우저-설정&quot;&gt;20.5.1. 명시적 브라우저 설정&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;대부분의 브라우저에선 수동으로 프록시를 설정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/proxy1.png&quot; alt=&quot;proxy1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/proxy2.png&quot; alt=&quot;proxy2.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수동으로 프록시를 설정하는 방법은 다음과 같은 한계가 있습니다.
    &lt;ul&gt;
      &lt;li&gt;설정한 프록시에 장애가 생기면 통신이 불가능합니다.&lt;/li&gt;
      &lt;li&gt;네트워크 아키텍처가 변경되면 모든 사용자에게 전파해야 하고, 모든 사용자들은 재설정을 해야합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2052-프록시-자동-설정&quot;&gt;20.5.2. 프록시 자동 설정&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;명시적으로 프록시의 주소를 설정하는 것보다 좋은 방법은 프록시의 정보를 갖고있는 URL을 지정하는 것입니다.&lt;/li&gt;
  &lt;li&gt;이런 방법을 프록시 자동설정(Proxy Auto-configuration, PAC) 프로토콜이라고 합니다.&lt;/li&gt;
  &lt;li&gt;이 방법은 PAC 파일이라는 불리는 특별한 파일의 URL을 각 브라우저에 설정하는 것입니다.
    &lt;ul&gt;
      &lt;li&gt;PAC 파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;function FindProxyForURL(url ,host)&lt;/code&gt; 를 구현하는 js 파일입니다.&lt;/li&gt;
      &lt;li&gt;PAC 파일은 요청 URL 별로 접촉해야할 프록시를 맵핑해둔 파일입니다.&lt;/li&gt;
      &lt;li&gt;PAC 파일에 대한 자세한 사항은 &lt;a href=&quot;http://findproxyforurl.com/&quot;&gt;http://findproxyforurl.com/&lt;/a&gt; 를 참조해주세요.&lt;/li&gt;
      &lt;li&gt;PAC 파일을 찾은 브라우저는 &lt;code class=&quot;highlighter-rouge&quot;&gt;FindProxyForURL&lt;/code&gt; 함수를 호출해 프록시의 주소를 받아옵니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;브라우저가 시작될 때 PAC 파일을 찾아옵니다.&lt;/li&gt;
  &lt;li&gt;네트워크 아키텍처의 변경시엔 PAC 파일을 수정하면 사용자들은 자동으로 수정된 프록시의 주소를 찾아갈 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/proxy3.png&quot; alt=&quot;proxy3.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PAC 파일의 URL을 위의 스크립트 주소에 입력하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2053-웹-프록시-자동발견-프로토콜web-proxy-autodiscovery-protocol&quot;&gt;20.5.3. 웹 프록시 자동발견 프로토콜(Web Proxy Autodiscovery Protocol)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;한편, 이 PAC 주소조차 설정 안해도 되는 방법이 있습니다.&lt;/li&gt;
  &lt;li&gt;웹 프록시 자동발견 프로토콜(Web Proxy AutoDiscovery, WPAD)이 이를 가능하게 해줍니다.&lt;/li&gt;
  &lt;li&gt;WPAD는 웹 브라우저가 근처의 프록시를 찾도록 도와줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PAC 파일 자동 발견&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;WPAD는 우선 PAC 파일을 자동으로 찾아줍니다.(어떻게 찾는 지는 뒤에서 소개합니다.)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;PAC 파일자체를 가져오는건 아니고 PAC 파일의 CURL (Client URL) 을 찾습니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;WPAD가 직접 프록시의 주소를 찾진 않습니다.&lt;/li&gt;
      &lt;li&gt;WPAD가 직접 프록시의 주소를 찾으면 PAC파일이 제공하는 부가기능(로드밸런싱, 장애 대처 등)을 사용할 수 없기 때문입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저에서 PAC 파일의 URL을 통해 PAC 파일을 가져옵니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PAC 파일을 실행해 요청할 URL에 맞는 프록시 주소를 가져옵니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WPAD 알고리즘&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그렇다면 WPAD는 어떻게 PAC 파일의 URL을 알아올까요?&lt;/li&gt;
  &lt;li&gt;WPAD는 아래의 방법으로 PAC파일의 URL을 가져올 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;DHCP(Dynamic Host Configuration Protocol, 동적 호스팅 설정 프로토콜)&lt;/li&gt;
      &lt;li&gt;SLP(Service Location Protocol, 서비스 위치 프로토콜)&lt;/li&gt;
      &lt;li&gt;DNS A(Alias) 레코드 룩업(== DNS에게 잘 알려진 호스트명)&lt;/li&gt;
      &lt;li&gt;DNS SRV(Service) 레코드 룩업&lt;/li&gt;
      &lt;li&gt;DNS TXT 레코드 룩업(TXT 레코드의 DNS 서비스 URL들)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WPAD는 위 방법들중 DHCP, SLP를 순서대로 먼저 수행합니다.&lt;/li&gt;
  &lt;li&gt;DHCP, SLP로 PAC 파일의 URL을 찾지 못했다면 아래 3가지 룩업을 여러 차례 순환합니다.&lt;/li&gt;
  &lt;li&gt;그래도 PAC 파일 URL을 찾지 못했다면 프록시를 사용하지 않고 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;WPAD의 더 자세한 사항은 &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-wrec-wpad-01&quot;&gt;명세&lt;/a&gt;를 참고해주세요.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DHCP를 이용한 CURL 발견&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DHCP로 PAC 파일의 URL을 찾는 과정은 아래와 같습니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/wpad_dhcp.png&quot; alt=&quot;wpad_dhcp.png&quot; title=&quot;https://findproxyforurl.com/wpad-introduction/&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;WPAD 클라이언트가 DHCP 서버로 DHCPINFORM 메세지를 보내 PAC 파일의 CURL을 물어봅니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;DHCP 서버가 PAC 파일의 CURL을 발견했다면 DHCP ACK 메시지로 응답합니다.&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;DHCP ACK 메세지엔 ‘252’라는 옵션이 있는데 찾은 CURL이 252 옵션에 들어 있습니다.&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;252=&quot;http://company.com/proxy.pac&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DNS A(alias) 룩업&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS A 룩업은 ‘DNS에게 잘 알려진 호스트 명’이라고도 합니다.&lt;/li&gt;
  &lt;li&gt;입력받은 도메인과 정확히 일치하지 않더라도 DNS가 가지고 있는 호스트의 별칭을 통해 PAC 파일의 CURL을 찾는 과정입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PAC 파일 가져오기&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WPAD가 PAC 파일의 CURL을 갖게된다면, 그 CURL로 GET 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;요청의 결과가 리다이렉트라면, 리다이렉트의 주소가 클라이언트가 가야할 최종목적지 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;언제 WPAD를 실행하는가&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WPAD는 다음과 같은 상황에서 실행될 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;웹 클라이언트가 시작될 때 WPAD가 실행될 수 있습니다.&lt;/li&gt;
      &lt;li&gt;갖고 있는 PAC 파일이 만료됐을때 WPAD 프로세스가 다시 진행될 수도 있습니다.
        &lt;ul&gt;
          &lt;li&gt;단, If-Modified-Since 같은 조건부 요청은 지원하지 않습니다.(캐시의 신선도 검사와 다름 주의)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;현재 PAC 파일로 얻어온 프록시에 장애가 있고 현재 PAC 파일이 다른 대안을 제시해주지 않을때 WPAD로 다른 PAC 파일을 찾을 수도 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WPAD 스푸핑(spoofing, 속이다)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WPAD 알고리즘은 다음과 같이 작동합니다.
    &lt;ul&gt;
      &lt;li&gt;요청 도메인 : a.b.microsoft.com&lt;/li&gt;
      &lt;li&gt;도메인에 ‘wpad’ 를 붙여 WPAD 서버를 찾아봅니다 : wpad.a.b.microsoft.com&lt;/li&gt;
      &lt;li&gt;3차 도메인에 도달할 때 까지 서브 도메인을 지우고 WPAD 서버를 찾는걸 반복합니다.
        &lt;ul&gt;
          &lt;li&gt;1) wpad.b.microsoft.com&lt;/li&gt;
          &lt;li&gt;2) wpad.microsoft.com&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이런 알고리즘은 보안에 취약할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;악의적인 사용자가 서브 도메인이 지워질걸 예상하고 wpad.b.microsoft.com을 선점해 악의적인 프록시를 설치할 수 있기 때문입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;타임아웃&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WPAD가 거치는 각 단계엔 타임아웃이 존재합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관리자를 위한 고려사항&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;추후 기술&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;206-캐시-리다이렉션-방법&quot;&gt;20.6. 캐시 리다이렉션 방법&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;프록시 중 캐시 프록시를 위해 사용되는 리다이렉션은 더욱 복잡합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2061-wccp-리다이렉션&quot;&gt;20.6.1. WCCP 리다이렉션&lt;/h4&gt;

&lt;h3 id=&quot;207-인터넷-캐시-프로토콜&quot;&gt;20.7. 인터넷 캐시 프로토콜&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;208-캐시-배열-라우팅-프로토콜&quot;&gt;20.8. 캐시 배열 라우팅 프로토콜&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;209-하이퍼텍스트-캐싱-프로토콜&quot;&gt;20.9. 하이퍼텍스트 캐싱 프로토콜&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;2091-htcp-인증&quot;&gt;20.9.1. HTCP 인증&lt;/h4&gt;

&lt;h4 id=&quot;2092-캐싱-정책-설정&quot;&gt;20.9.2. 캐싱 정책 설정&lt;/h4&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;목차에 있는 키워드들은 어느정도 익숙한 키워드가 많아 어렵지 않게 읽을 수 있을 것 같았는데 세부적으로 생소한 개념들이 많이 고전중입니다.. 씁..&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>배포 시스템</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C19/"/>
   <updated>2020-03-31T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드19</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;이번 장에선 웹의 배포 및 협업에 대해 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;191-배포-지원을-위한-frontpage-서버-확장&quot;&gt;19.1. 배포 지원을 위한 FrontPage 서버 확장&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;FrontPage는 마이크로스프트의 개발 및 배포 프로그램입니다.&lt;/li&gt;
  &lt;li&gt;1994년 Vermeer Technologies사에서 처음 개발했고 마이크로소프트가 인수하였습니다.&lt;/li&gt;
  &lt;li&gt;2003년 마지막 버전을 끝으로 현재는 FrontPage의 개발이 중단됐습니다.&lt;/li&gt;
  &lt;li&gt;현재는 사용되지 않는 프로그램이나 한 때 많이 사용되었고, 프로그램이 작동하는 과정을 이해하면 다른 기술들을 이해하는데 도움이 될 것 같아 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1911-frontpage-서버-확장&quot;&gt;19.1.1. FrontPage 서버 확장&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;FrontPage는 쉽게 말해 RPC(Remote Procedure Call) 프로토콜 통신으로 서버에게 명령을 내릴 수 있는 프로그램 입니다. 배포를 위해 사용됩니다.&lt;/li&gt;
  &lt;li&gt;이를 위해 서버는 FPSE(FrontPage Server Extension)을 구현하고 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;아래 그림을 보시겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/frontpage.png&quot; alt=&quot;frontpage.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FrontPage 클라이언트에서 서버로 ①요청을 보냅니다.
    &lt;ul&gt;
      &lt;li&gt;①요청은 HTTP POST 요청 위에 RPC 계층을 구현합니다. 19.1.3.에서 더 자세히 알아봅니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버는 ①요청을 읽고 ②로 보내 요청받은 메서드를 수행합니다.
    &lt;ul&gt;
      &lt;li&gt;서버와 FPSE는 CGI(Common Gateway Interface) 혹은 ISAPI(Internet Server Application Program Interface, 마이크로소프트 IIS서버에서 사용)와 같은 API로 통신합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 후 ③응답 결과를 돌려줍니다.&lt;/li&gt;
  &lt;li&gt;위 과정은 FrontPage 클라이언트와 서버사이에 방화벽, 프록시 등이 있더라도 HTTP POST 메서드 통신만 가능하다면 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1912-frontpage-용어&quot;&gt;19.1.2. FrontPage 용어&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FrontPage를 이해하기 위한 몇 가지 용어를 알고 갑시다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;가상 서버&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;가상 서버는 한 웹 서버에서 여러 사이트를 호스팅할때, 클라이언트 입장에선 각자의 전용 서버처럼 보이는 가상의 서버를 말합니다.&lt;/li&gt;
      &lt;li&gt;가상 서버를 지원하는 웹 서버를 ‘다중 호스팅(multi-hosting)’ 웹 서버라고 부릅니다.&lt;/li&gt;
      &lt;li&gt;여러 개의 IP 주소를 갖는 장비를 ‘다중 홈(multi-homed)’ 서버라고 부릅니다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;루트 웹&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;루트 웹이란 한 웹 서버의 최상위 콘텐츠 디렉터리를 말합니다.(Spring 프레임워크의 WebContents 폴더)&lt;/li&gt;
      &lt;li&gt;다중 호스팅 환경이라면, 가상 서버의 최상위 콘텐츠 디렉토리를 말합니다.&lt;/li&gt;
      &lt;li&gt;루트 웹에 접근하기 위해선 서버의 URL만 기술하면 됩니다.&lt;/li&gt;
      &lt;li&gt;한 웹 서버엔 한 개의 루트 웹만 있습니다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;서브 웹&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;서브 웹은 루트 웹의 하위 디렉토리, 혹은 한 서버의 FPSE 확장 웹인 다른 서브 웹의 하위 디렉토리 입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1913-frontpage-rpc-프로토콜&quot;&gt;19.1.3. FrontPage RPC 프로토콜&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FrontPage 클라이언트와 FPSE는 자체 RPC 프로토콜을 통해 통신합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 프로토콜은 HTTP POST 요청의 본문에 RPC 메서드와 변수들을 담는 방식으로 구현됩니다. 아래는 RPC 프로토콜을 사용한 요청의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /_vti_bin/_vti_aut/author.dll HTTP/1.1
Date: Sat, 12 Aug 2000 20:32:54 GMT
User-Agent: MSFrontPage/4.0
  
&amp;lt;BODY&amp;gt;
method=list+documents%3a4%2e0%2e2%2e3717&amp;amp;service%5fname=&amp;amp;listH
iddenDocs=false&amp;amp;listExp
lorerDocs=false&amp;amp;listRecurse=false&amp;amp;listFiles=true&amp;amp;listFolders=t
rue&amp;amp;listLinkInfo=true&amp;amp;l
istIncludeParent=true&amp;amp;listDerived=false
&amp;amp;listBorders=false&amp;amp;listChildWebs=true&amp;amp;initialUrl=&amp;amp;folderList=%
5b%3bTW%7c12+Aug+2000+2
0%3a33%3a04+%2d0000%5d 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;한편, FrontPage 클라이언트에서 서버로 RPC 요청을 하기 위해선 실행 시킬 프로그램이 어디 있는지 알아야 합니다.(위 예시에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;/_vti_bin/_vti_aut/author.dll&lt;/code&gt; 와 같은 경로 )&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;이를 위해 FrontPage 클라이언트는 프로그램들의 위치를 묻는 GET 요청을 보냅니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_vti_inf.html HTTP/1.1
Date: Sat, 12 Aug 2020 20:31:32 GMT
User-agent: Mozilla/2.0 (compatiable;Ms FrontPage 4.0)
Host: taskserver:80
Accept: auth/sicily
Content-length: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;위와 같은 요청엔 아래와 같은 목록을 가진 응답이 옵니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FPShtmlScriptUrl=&quot;_vti_bin/_vti_rpc/shtml.dll&quot;
FPAuthorScriptUrl=&quot;_vti_bin/_vti_aut/author.dll&quot;
FPAdminScriptUrl=&quot;_vti_bin/_vti_adm/admin.dll&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FPShtmlScriptUrl는 ‘탐색 시간(browse time)’에 대한 명령을 보낼 위치입니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FPAuthorScriptUrl는 ‘저작 시간(authoring time)’에 대한 명령을 보낼 위치입니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FPAdminScriptUrl는 ‘관리 동작’에 대한 명령을 보낼 위치입니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;요청&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;요청에서 사용 가능한 FPSE의 메서드는 &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ms454298(v=office.14)&quot;&gt;링크&lt;/a&gt;를 남기겠습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청의 본문은 &lt;code class=&quot;highlighter-rouge&quot;&gt;method=&amp;lt;command&amp;gt;&lt;/code&gt; 형식으로 이루어져 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 요청 예시를 보면 &lt;command /&gt; 부분이 복잡해 보입니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;커맨드 부분의 빈칸은 ‘+’로 인코딩 되며 알파벳 외의 문자는 퍼센트인코딩(%XX) 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 요청 예시를 보기 좋게 파싱하면 아래와 같습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;method=list+documents:4.0.1.3717
&amp;amp;service_name=
&amp;amp;listHiddenDocs=false
&amp;amp;listExplorerDocs=false
		:
		:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 파라미터들이 어떤걸 나타내는지는 &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ms442283(v%3Doffice.14)#parameters&quot;&gt;링크&lt;/a&gt;를 남기겠습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;응답&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;요청에 대한 응답은 일반적인 응답과 같이 성공 혹은 에러입니다.&lt;/li&gt;
  &lt;li&gt;간혹 “Sample Retrun Code”를 응답으로 받는 메서드도 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1914-frontpage-보안-모델&quot;&gt;19.1.4. FrontPage 보안 모델&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;대부분의 경우 FPSE의 보안은 웹 서버에게 의존합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;FPSE에서 마련한 보안 모델은 사용자를 ‘관리자’, ‘저작자’, ‘일반 사용자’ 와 같은 세 그룹으로 나눕니다.&lt;/li&gt;
  &lt;li&gt;IIS(Internet Information Services, 마이크로소프트의 서버)가 아닌 웹 서버라면,
    &lt;ul&gt;
      &lt;li&gt;모든 FPSE 프로그램(~~.dll)이 ‘executable’ 표시가 된 디렉토리에 저장되어야 합니다.&lt;/li&gt;
      &lt;li&gt;그리고 각 프로그램에 접근 허가된 사용자들을 따로 기술합니다. 이를 기술한 파일을 ‘접근 명세 파일’이라고 합니다.
        &lt;ul&gt;
          &lt;li&gt;아파치, NCSA 웹 서버에선 .htaccess 파일에 기술합니다.&lt;/li&gt;
          &lt;li&gt;넷스케이프 웹 서버에선 .nsconfig 파일에 기술합니다.&lt;/li&gt;
          &lt;li&gt;기술 내용은 권한 등급별 사용자, 그룹, IP 주소입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IIS 서버라면,
    &lt;ul&gt;
      &lt;li&gt;윈도우 보안 모델이 우선 적용됩니다.&lt;/li&gt;
      &lt;li&gt;권한 검사는 주어진 루트나 서브노트에 대한 ACL(access control list, 접근 제어 목록)을 보고 검사합니다.&lt;/li&gt;
      &lt;li&gt;IIS가 FrontPage클라이언트의 요청을 받는다면, 우선 요청의 정보로 로그인해 사용자로 가장합니다.&lt;/li&gt;
      &lt;li&gt;그 후, 요청온 DLL에 접근합니다.&lt;/li&gt;
      &lt;li&gt;dll은 ACL을 기준으로 접근한 사용자가 권한이 있는지 검사합니다.&lt;/li&gt;
      &lt;li&gt;성공하면 dll이 실행되고, 실패한다면 ‘승인 거부(permission denied)’ 메세지를 보냅니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;192-webdav와-공동-저작&quot;&gt;19.2. WebDAV와 공동 저작&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;WebDAV = Web Distributed Authoring(분산 저작) and Versioning(버전관리)&lt;/li&gt;
  &lt;li&gt;책엔 WebDAV에 대해 꽤 많은 부분을 할당했습니다.&lt;/li&gt;
  &lt;li&gt;책이 쓰여지던 때엔 WebDAV를 협업을 위한 툴로 사용했습니다.
    &lt;ul&gt;
      &lt;li&gt;당시엔 git, svn 같은 형상관리도구의 수준이 낮았다고 합니다.&lt;/li&gt;
      &lt;li&gt;당시엔 이메일로 파일을 주고받거나 공유 폴더에 파일을 업로드 하기도 했다고 합니다.(선배 개발자님들 존경스럽습니다… :pray:)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하지만 지금은 WebDAV가 개발자들의 협업을 위해 쓰이진 않고 네트워크 드라이브를 만들때 사용하는 것 같습니다.&lt;/li&gt;
  &lt;li&gt;책에 내용은 많으나 적당히 추려 요약하겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1921-webdav-메서드&quot;&gt;19.2.1. WebDAV 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;WebDAV에선 HTTP에 없는 아래와 같은 메서드를 추가했습니다.
    &lt;ul&gt;
      &lt;li&gt;PROPFIND : 리소스의 속성을 읽습니다. properties find&lt;/li&gt;
      &lt;li&gt;PROPPATCH : 한 개 이상의 리소스에 대해 한 개 이상의 속성을 설정합니다. properties patch&lt;/li&gt;
      &lt;li&gt;MKCOL : 콜렉션(collection)을 생성합니다. make collection&lt;/li&gt;
      &lt;li&gt;COPY : 리소스나 리소스의 집합을 복사합니다.&lt;/li&gt;
      &lt;li&gt;MOVE : 리소스나 리소스의 집합을 이동시킵니다.&lt;/li&gt;
      &lt;li&gt;LOCK : 하나 이상의 리소스를 잠급니다.&lt;/li&gt;
      &lt;li&gt;UNLOCK : 잠겨 있는 리소스를 잠금 해제 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;또, HTTP에서 아래와 같은 메서드를 수정했습니다.
    &lt;ul&gt;
      &lt;li&gt;DELETE, PUT, OPTIONS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1922-webdav와-xml&quot;&gt;19.2.2. WebDAV와 XML&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;WebDAV에서 요청 및 응답을 할 시 많은 정보를 주고 받아야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;몇몇 정보는 HTTP 헤더를 통해 전달할 수 있지만 헤더에 전송하는 것은 한계가 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;때문에, WebDAV에선 아래와 같이 본문에 XML을 보낼 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOCK /ch-publish.fm HTTP/1.1
Host: minstar
Content-Type: text/xml
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Content-Length: 201
  
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:lockinfo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:a=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DAV:&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:lockscope&amp;gt;&amp;lt;a:exclusive/&amp;gt;&amp;lt;/a:lockscope&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:locktype&amp;gt;&amp;lt;a:write/&amp;gt;&amp;lt;/a:locktype&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:owner&amp;gt;&amp;lt;a:href&amp;gt;&lt;/span&gt;AuthorA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:href&amp;gt;&amp;lt;/a:owner&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:lockinfo&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WebDAV에서 사용하는 XML의 스킴은 &lt;a href=&quot;http://www.webdav.org/specs/rfc4918.xml#xml.element.definitions&quot;&gt;링크&lt;/a&gt;를 남깁니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1923-webdav-헤더&quot;&gt;19.2.3. WebDAV 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;WebDAV에선 아래와 같은 7개의 HTTP 헤더를 추가했습니다.
    &lt;ul&gt;
      &lt;li&gt;DAV : WevDAV를 제공하는 서버와 통신시 사용.&lt;/li&gt;
      &lt;li&gt;Depth : 계층 구조로 분류된 리소스에 사용&lt;/li&gt;
      &lt;li&gt;Destination : COPY, MOVE 메서드에서 목적지 URI를 지정할때 사용&lt;/li&gt;
      &lt;li&gt;If : COPY, PUT, LOCK과 같은 메서드에서 조건부 요청을 할 때 사용&lt;/li&gt;
      &lt;li&gt;Lock-Token : 해제 해야할 잠금을 명시. UNLOCK 메서드에서 사용&lt;/li&gt;
      &lt;li&gt;Overwrite : COPY, MOVE 메서드에서 사용&lt;/li&gt;
      &lt;li&gt;Timeout : 클라이언트가 필요한 잠금 타임아웃 값을 기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;각 헤더에 대한 상세 사항은 &lt;a href=&quot;http://www.webdav.org/specs/rfc4918.xml#http.headers.for.distributed.authoring&quot;&gt;링크&lt;/a&gt;를 남깁니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1924-webdav-잠금과-덮어쓰기-방지&quot;&gt;19.2.4. WebDAV 잠금과 덮어쓰기 방지&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 파일을 여러 명이 같이 작업할 땐 항상 충돌의 우려가 있습니다.&lt;/li&gt;
  &lt;li&gt;충돌에 관한 문제를 해결하기 위해선 형상관리 툴의 도움을 받아야 합니다.&lt;/li&gt;
  &lt;li&gt;하지만 초기 웹 개발에선 단순히 한 사용자가 파일을 사용할 때 파일을 잠그고, 사용이 끝나면 잠금을 푸는 방식으로 충돌을 막았습니다.&lt;/li&gt;
  &lt;li&gt;잠금의 방법엔 두가지가 있습니다.
    &lt;ul&gt;
      &lt;li&gt;배타적 쓰기 잠금 : 파일을 잠근 한 사용자만 파일을 쓸 수 있습니다.&lt;/li&gt;
      &lt;li&gt;공유된 쓰기 잠금 : 한 그룹만이 하나의 파일을 쓸 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;잠금을 구현하기 위해선 LOCK, UNLOCK 메서드와 저자 식별 알고리즘이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1925-lock-메서드&quot;&gt;19.2.5. LOCK 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;하나의 LOCK 요청으로 하나 이상의 리소스를 잠글 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LOCK 요청의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOCK /ch-publish.fm HTTP/1.1
Host: minstar
Content-Type: text/xml
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Content-Length: 201
  
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:lockinfo&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:a=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DAV:&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:lockscope&amp;gt;&amp;lt;a:exclusive/&amp;gt;&amp;lt;/a:lockscope&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:locktype&amp;gt;&amp;lt;a:write/&amp;gt;&amp;lt;/a:locktype&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:owner&amp;gt;&amp;lt;a:href&amp;gt;&lt;/span&gt;AuthorA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:href&amp;gt;&amp;lt;/a:owner&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:lockinfo&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 xml 태그가 무얼 의미하는 지는 &lt;a href=&quot;http://www.webdav.org/specs/rfc4918.xml#xml.element.definitions&quot;&gt;여기&lt;/a&gt;를 참고해주세요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 요청이 성공하면 아래와 같은 응답을 볼 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 20:56:18 GMT
Content-Type: text/xml
Content-Length: 419
  
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:a=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DAV:&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:lockdiscovery&amp;gt;&amp;lt;a:activelock&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:locktype&amp;gt;&amp;lt;a:write/&amp;gt;&amp;lt;/a:locktype&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:lockscope&amp;gt;&amp;lt;a:exclusive/&amp;gt;&amp;lt;/a:lockscope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:owner&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:a=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DAV:&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a:href&amp;gt;&lt;/span&gt;AutherA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:href&amp;gt;&amp;lt;/a:owner&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:locktoken&amp;gt;&amp;lt;a:href&amp;gt;&lt;/span&gt;opaquelocktoken:*****&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:href&amp;gt;&amp;lt;/a:locktoken&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:depth&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:depth&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:timeout&amp;gt;&lt;/span&gt;Second-180&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:timeout&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:activelock&amp;gt;&amp;lt;/a:lockdiscovery&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:prop&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 각 xml 태그가 의미하는 바는 위의 링크를 참고해주시고, 중요한 건 &lt;strong&gt;opaquelocktoken&lt;/strong&gt; 값입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;opaquelocktoken 스킴&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;잠금이 성공하면 서버는 opaquelocktoken값을 돌려줍니다.&lt;/li&gt;
  &lt;li&gt;opaquelocktoken는 모든 리소스에 대해 유일한 토큰 값을 가집니다.&lt;/li&gt;
  &lt;li&gt;UUID(universal unique identifier) 메커니즘을 통해 만들어지는 값입니다.&lt;/li&gt;
  &lt;li&gt;해당 값을 이용해 잠금한 사용자만이 UNLOCK을 하고 수정한 파일을 저장하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1926-unlock-메서드&quot;&gt;19.2.6. UNLOCK 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;UNLOCK 메서드는 잠긴 하나 이상의 리소스의 잠금을 해제 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UNLOCK을 하기 위해선 다이제스트 인증에 성공해야 하고, Lock-Token 헤더에 보낸 opaquelocktoken 가 맞아야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래는 UNLOCK 요청의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UNLOCK /ch-publish.fm HTTP/1.1
Host: minstar.inktomi.com
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Lock-Token:
opaquelocktoken:*********
  
HTTP/1.1 204 OK
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 20:56:18 GMT 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UNLOCK이 성공했다면 204 No Content 상태 코드를 받게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1927-속성과-meta-데이터&quot;&gt;19.2.7. 속성과 META 데이터&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 리소스에는 많은 속성이 있습니다.&lt;/li&gt;
  &lt;li&gt;그 중, 문서가 편집될 때 마다 자주 변하는 속성을 live 속성이라고 하고, Content-Type같이 거의 변하지 않는 속성을 dead 속성이라고 합니다.&lt;/li&gt;
  &lt;li&gt;WebDAV에선 리소스의 속성을 다루기 위해 PROPFIND 메서드와 PROPPATCH 메서드를 지원합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1928-propfind-메서드&quot;&gt;19.2.8. PROPFIND 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PROPFIND는 파일이나 파일 그룹(주로 디렉토리)의 속성을 읽는 데 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PROPFIND는 아래 세 가지 동작을 지원합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;모든 속성과 그 값을 요청합니다.&lt;/li&gt;
      &lt;li&gt;선택된 속성과 그 값의 집합을 요청합니다.&lt;/li&gt;
      &lt;li&gt;모든 속성의 이름을 요청합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래는 모든 속성과 값을 요청하는 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PROPFIND /ch-publish.fm HTTP/1.1
Host: minstar.inktomi.com
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Depth: 0
Cache-Control: no-cache
Connection: Keep-Alive
Content-Length: 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 요청에 대해선 아래와 같은 응답이 올 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 207 Multi-Status
Server: Microsoft-IIS/5.0
  
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:multistatusxmlns:b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;urn:uuid:********&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:c=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xml:&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:a=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DAV:&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:response&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:href&amp;gt;&lt;/span&gt;http://minstar/ch-publish.fm &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:href&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:propstat&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:status&amp;gt;&lt;/span&gt;HTTP/1.1 200OK&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:status&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:prop&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:getcontentlength&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b:dt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1155&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:getcontentlength&amp;gt;&lt;/span&gt;
     					:
     					:
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:ishidden&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b:dt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:ishidden&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;a:iscollection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b:dt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:iscollection&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:prop&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:propstat&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:response&amp;gt;&amp;lt;/a:multistatus&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1929-proppatch-메서드&quot;&gt;19.2.9. PROPPATCH 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PROPPATCH 메서드는 속성을 설정하거나 제거하는데 사용됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음은 ‘owner’라는 속성을 설정(set)하고 제거(remove)하기 위한 xml 본문입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;d:propertyupdate&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DAV:&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:o=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://namespace/scheme/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;d:set&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;d:prop&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;o:owner&amp;gt;&lt;/span&gt;Author A&lt;span class=&quot;nt&quot;&gt;&amp;lt;/o:owner&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/d:prop&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/d:set&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;d:remove&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;d:prop&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;o:owner/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/d:prop&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/d:remove&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/d:propertyupdate&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;19210-콜렉션과-이름공간-관리&quot;&gt;19.2.10. 콜렉션과 이름공간 관리&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;콜렉션은 리소스들의 논리적 혹은 물리적 그룹입니다.&lt;/li&gt;
  &lt;li&gt;디렉토리가 콜렉션의 한 예라고 볼 수 있습니다.&lt;/li&gt;
  &lt;li&gt;WebDAV의 XML 스킴에선 namespace를 제공합니다.
    &lt;ul&gt;
      &lt;li&gt;namespace를 통해 콜렉션간 충돌이 생기지 않게 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebDAV에선 namespace를 제어하는 다섯 가지 메서드를 제공합니다.
    &lt;ul&gt;
      &lt;li&gt;DELETE, MKCOL, COPY, MOVE, PROPFIND&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;19211-mkcol-메서드&quot;&gt;19.2.11. MKCOL 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MKCOL은 지정된 URL에 해당하는 콜렉션을 서버에 생성합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;콜렉션을 생성하는 일은 PUT이나 POST 메서드를 통해서도 가능하지만, 아래와 같은 이유로 MKCOL메서드가 새로 정의되었습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;PUT, POST를 사용하려면 요청안에 추가적인 정보를 더하는 식으로 요청해야 합니다. 이렇게 매 요청마다 즉석으로 프로토콜을 수정하는건 번거롭고 오류를 내기 쉽습니다.&lt;/li&gt;
      &lt;li&gt;대부분의 접근 제어 메커니즘은 메서드 타입에 기반합니다. 다른 메서드들을 본래 용도와 다르게 사용하면 접근 제어 메커니즘은 잘 동작하지 않습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MKCOL /publishing HTTP/1.1
Host: minstar
Content-Length: 0
Connection: Keep-Alive 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;응답의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 23:20:36 GMT
Location: http://minstar/publishing/
Content-Length: 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;19212-delete-메서드&quot;&gt;19.2.12. DELETE 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DELETE 메서드는 기존 HTTP의 DELETE 메서드에 Depth 헤더를 추가했습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Depth 헤더를 추가한 이유는 디렉토리를 삭제하기 위해서 입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE /publishing HTTP/1.0
Host: minstar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;성공시 응답의 예시 입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Tue, 14 May 2002 16:41:44 GMT
Content-Location: http://minstar/publishing/
Content-Type: text/xml
Content-Length: 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;제거를 시도할 때, 해당 리소스가 잠겨있다면 아래와 같은 응답을 받게 됩니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 207 Multi-Status
Server: Microsoft-IIS/5.0
Content-Location: http://minstar/publishing/
  
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:multistatus&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:a=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DAV:&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:response&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:href&amp;gt;&lt;/span&gt;http://minstar/index3/ch-publish.fm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:href&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a:status&amp;gt;&lt;/span&gt; HTTP/1.1 423 Locked &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:status&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:response&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a:multistatus&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;400대의 에러코드가 아닌 207 Multi-status 임을 주의합시다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;xml status 태그 아래 423 Locked 라는 상태 정보가 주어졌습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;19213-copy와-move-메서드&quot;&gt;19.2.13. COPY와 MOVE 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;COPY 메서드와 MOVE 메서드 역시 MKCOL 메서드 처럼 GET과 POST를 조합해 구현할 수 있지만 그렇게 하지 않습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;COPY, MOVE 메서드는 요청 URL을 원본의 위치, Destination 헤더를 목적지 URL로 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MOVE 메서드는 COPY 후 새로 생성된 URI 무결성 검사, 원본 삭제가 이루어집니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요청의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{COPY,MOVE} /publishing HTTP/1.1
Destination: http://minstar/pub-new
Depth: infinity
Overwrite: T
Host: minstar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;응답의 예시입니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Wed, 15 May 2002 18:29:53 GMT
Location: http://minstar.inktomi.com/pub-new/
Content-Type: text/xml
Content-Length: 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Depth 헤더를 지정하지 않을시 infinity로 간주합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overwrite 헤더는 T, F가 가능합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;잠겨있는 리소스는 COPY, MOVE가 금지됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;잠겨있는 콜렉션 아래로 COPY, MOVE가 되면 COPY, MOVE된 리소스도 잠기게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;19214-향상된-http11-메서드&quot;&gt;19.2.14. 향상된 HTTP/1.1 메서드&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 WebDAV에선 HTTP 메서드중 DELETE, PUT, OPTIONS을 수정했다고 했습니다.&lt;/li&gt;
  &lt;li&gt;DELETE는 콜렉션을 하면서 살펴보았고, PUT과 OPTIONS에 대해 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PUT 메서드&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;WebDAV에서 저작자가 파일을 서버에 전송하는 유일한 방법은 PUT 메서드를 사용하는 것입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WebDAV에선 잠금을 지원하기 위해 PUT 메서드를 수정했습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;If 헤더를 추가했습니다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /ch-publish.fm HTTP/1.1
Accept: */*
If:&lt;span class=&quot;nt&quot;&gt;&amp;lt;http:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minstar&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;htm&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;nt&quot;&gt;&amp;lt;opaquelocktoken:&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;********&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;)
User-Agent: DAV Client (C)
Host: minstar.inktomi.com
Connection: Keep-Alive
Cache-Control: no-cache 
Content-Length: 1155 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OPTIONS 메서드&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP의 OPTIONS는 서버에서 가능한 메서드를 알려달라는 요청입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WebDAV에서의 OPTIONS는 해당 리소스에 대해 어떤 메서드가 가능한지 알려달라는 요청입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래와 같이 요청합니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OPTIONS /ch-publish.fm HTTP/1.1
Accept: */*
Host: minstar.inktomi.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래와 같은 응답을 받습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
MS-Author-Via: DAV
DASL: &amp;lt;DAV:sql&amp;gt;
DAV: 1, 2
Public: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL,PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH
Allow: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, COPY, MOVE, PROPFIND,PROPPATCH,SEARCH, LOCK, UNLOCK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DAV 헤더는 Class 1, 2, 3을 지원하는지 알려줍니다. 위 예시에선 Class 1, Class 2를 지원합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Class 1 : &lt;a href=&quot;http://www.webdav.org/specs/rfc4918.xml&quot;&gt;명세&lt;/a&gt;에 기록된 모든 MUST 요구사항을 지원해야 합니다.&lt;/li&gt;
      &lt;li&gt;Class 2 : Class 1의 요구사항에 더해 LOCK 메서드를 지원합니다. LOCK 메서드를 지원하기 위해선 Timeout 헤더, Lock-Token헤더, &amp;lt;supportedlock&amp;gt; xml 태그, &amp;lt;lockdiscovery&amp;gt; xml 태그를 지원해야 합니다.&lt;/li&gt;
      &lt;li&gt;Class 3 : 명세의 모든 요구사항들을 지원합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Public 헤더 : 서버가 지원하는 모든 메서드가 기술되어 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow 헤더 : 요청한 리소스에 허락된 메서드들이 기술되어 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DASL 헤더 : SEARCH 메서드에서 사용하는 질의 문법 형식이 기술되어 있습니다. 위 예시에선 sql을 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;19215-webdav의-버전-관리&quot;&gt;19.2.15. WebDAV의 버전 관리&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;지금까진 WebDAV의 DAV중 DA(Distributed Authoring)에 대해 알아봤습니다.&lt;/li&gt;
  &lt;li&gt;V(Versioning)은 WevDAV가 처음 생길때 부터 있던건 아닙니다.&lt;/li&gt;
  &lt;li&gt;Versioning은 RFC 3253에서 추가됐는데… 거의 쓰이지 않는 것 같습니다.(책에도 이 내용이 전부입니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;19216-webdav의-미래&quot;&gt;19.2.16. WebDAV의 미래&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;책에서 본 WebDAV의 미래는 밝았지만… :cry:&lt;/li&gt;
  &lt;li&gt;WebDAV의 공식 홈페이지(&lt;a href=&quot;http://www.webdav.org/&quot;&gt;http://www.webdav.org/&lt;/a&gt;) 조차 2009년에 멈춘것 같습니다..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;지금까지 모든 장들이 어깨너머 적어도 한 두번은 들어본 내용이었다면 이번 장의 FrontPage와 WebDAV는 정말 처음 보는 주제였습니다.&lt;/li&gt;
  &lt;li&gt;그만큼 요즘엔 잘 쓰이지 않는 기술들이라 의욕이 조금 떨어졌지만, 과거의 기술을 알아야 그 기술의 한계와 문제를 해결하기 위해 나온 신기술을 이해할 수 있다고 생각하기에 열심히 알아보았습니다.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>우분투(리눅스) GtkWarning</title>
   <link href="http://localhost:4000/posts/googling/linux/GtkWarning/"/>
   <updated>2020-03-31T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/linux/GtkWarning</id>
   <content type="html">
&lt;h3 id=&quot;1-gtkwarning&quot;&gt;1. GtkWarning&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;우분투를 다루다 보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;GtkWarning&lt;/code&gt; 라고 뜨며 GUI들이 안켜질 때가 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Gtk는 &lt;strong&gt;G&lt;/strong&gt;imp &lt;strong&gt;T&lt;/strong&gt;ool&lt;strong&gt;K&lt;/strong&gt;it 이라고 합니다. GUI를 만들기 위한 라이브러리라고 보면 됩니다.(&lt;a href=&quot;https://www.gtk.org/&quot;&gt;https://www.gtk.org/&lt;/a&gt;)
        &lt;ul&gt;
          &lt;li&gt;Gimp는 그림 편집 소프트웨어이며 &lt;a href=&quot;[https://ko.wikipedia.org/wiki/%EA%B7%B8%EB%86%88](https://ko.wikipedia.org/wiki/그놈)&quot;&gt;GNOME&lt;/a&gt; 프로젝트의 일환입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 문제는 아래와 같은 권한 문제입니다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;우분투의 디스플레이 환경은 GNOME을 따릅니다.&lt;/li&gt;
      &lt;li&gt;근데 GNOME은 &lt;a href=&quot;[https://ko.wikipedia.org/wiki/X_%EC%9C%88%EB%8F%84_%EC%8B%9C%EC%8A%A4%ED%85%9C](https://ko.wikipedia.org/wiki/X_윈도_시스템)&quot;&gt;X 서버&lt;/a&gt; 기반입니다.&lt;/li&gt;
      &lt;li&gt;우분투 사용자가 X 서버에 대한 권한이 없습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;xhost 명령어로 X서버에 대한 권한을 주어야 합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xhost +si:localuser:root
xhost +si:localuser:{ubuntuUserName}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;xhost는 X서버 접근 허용 목록에 사용자를 추가하는 명령어 입니다.&lt;/li&gt;
      &lt;li&gt;+si는 Server Interpreted에 추가한다는 것입니다.&lt;/li&gt;
      &lt;li&gt;자세한 사항은 X서버 &lt;a href=&quot;https://www.x.org/archive/X11R7.5/doc/man/man1/xhost.1.html&quot;&gt;명세&lt;/a&gt;를 남깁니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-xhost--unable-to-open-display---sweat&quot;&gt;2. xhost:  unable to open display “” ??? :sweat:&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xhost:  unable to open display &quot;&quot;&lt;/code&gt; 에러가 뜰 수 있습니다. 제가 그랬거든요..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Samba를 이용한 윈도우 우분투 권한 공유</title>
   <link href="http://localhost:4000/posts/googling/jekyll/%EC%9C%88%EB%8F%84%EC%9A%B0-%EC%9A%B0%EB%B6%84%ED%88%AC-%EA%B6%8C%ED%95%9C%EA%B3%B5%EC%9C%A0/"/>
   <updated>2020-03-31T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/jekyll/윈도우 우분투 권한공유</id>
   <content type="html">
&lt;h3 id=&quot;1-지난번-문제&quot;&gt;1. 지난번 문제&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;지난 jekyll 관련 &lt;a href=&quot;/권한문제&quot;&gt;포스팅&lt;/a&gt;은 윈도우에서 수정한 파일을 우분투 사용자가 접근 할 수 있도록 권한을 변경하는 것이었습니다.&lt;/li&gt;
  &lt;li&gt;하지만 지난 번엔 임시 방편으로 권한을 수동 변경한 것입니다.&lt;/li&gt;
  &lt;li&gt;이번 포스팅에선 Samba를 이용해 윈도우와 우분투가 권한을 공유하는 방법을 알아볼 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-samba&quot;&gt;2. Samba?&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;우선 Samba에 대해 간략히 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;21-samba란-무엇인가&quot;&gt;2.1. Samba란 무엇인가!&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Samba의 공식 홈페이지(&lt;a href=&quot;https://www.samba.org/&quot;&gt;https://www.samba.org/&lt;/a&gt;)에선 Samba를 다음과 같이 정의합니다.
    &lt;ul&gt;
      &lt;li&gt;Samba is the standard Windows &lt;strong&gt;interoperability suite of programs&lt;/strong&gt; for Linux and Unix.&lt;/li&gt;
      &lt;li&gt;&amp;gt;&amp;gt; Samba는 Linux와 Unix를 위한 표준 Windows 상호운용 프로그램 제품군(suite)입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;쉽게 말해, Windows와 Linux, Unix를 동시에 운용할 때 필요한 프로그램이라는 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;22-samba는-어떻게-동작하는가&quot;&gt;2.2. Samba는 어떻게 동작하는가&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;/p&gt;

&lt;h3 id=&quot;3-samba-설치-및-공유폴더-생성&quot;&gt;3. Samba 설치 및 공유폴더 생성&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Samba 설치는 &lt;a href=&quot;https://storycompiler.tistory.com/31&quot;&gt;이곳&lt;/a&gt;을 참고하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;31-samba-설치&quot;&gt;3.1. Samba 설치&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아래의 명령어로 samba를 설치해줍니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install samba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래 명령어로 samba의 설정을 위한 gui를 설치해줍니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install system-config-samba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정을 켜줍니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo system-config-samba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;혹시 &lt;code class=&quot;highlighter-rouge&quot;&gt;GtkWarning: could not open display&lt;/code&gt; 가 뜨며 GUI가 안나오는 분들은 &lt;a href=&quot;&quot;&gt;여기&lt;/a&gt;를 참고해주세요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>로깅과 사용 추적</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C21/"/>
   <updated>2020-03-30T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드21</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 살펴본 거의 모든 서버, 프록시 등은 처리한 HTTP 트랜잭션을 요약해 기록해 놓습니다.&lt;/li&gt;
  &lt;li&gt;이번 장에선 기록을 남기는 기술, 로깅에 대해 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;211-로그란-무엇인가&quot;&gt;21.1. 로그란 무엇인가?&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;로깅을 하는 이유는 크게 두 가지 입니다.
    &lt;ul&gt;
      &lt;li&gt;서버나 프록시가 장애를 일으킬 시 문제와 원인을 찾을 수 있습니다.&lt;/li&gt;
      &lt;li&gt;웹 사이트에 대한 통계를 내기 위해 사용할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HTTP메세지를 모조리 로깅할 수도 있지만 이런 방식은 쓸모 없는 데이터까지 저장하게 되어 매우 비효율 적입니다.&lt;/li&gt;
  &lt;li&gt;일반적으로 로깅하는 항목들은 아래와 같습니다.
    &lt;ul&gt;
      &lt;li&gt;HTTP 메서드&lt;/li&gt;
      &lt;li&gt;클라이언트와 서버의 HTTP 버전&lt;/li&gt;
      &lt;li&gt;요청받은 URL&lt;/li&gt;
      &lt;li&gt;응답의 HTTP 상태 코드&lt;/li&gt;
      &lt;li&gt;요청과 응답 메세지의 크기&lt;/li&gt;
      &lt;li&gt;트랜잭션이 일어난 시간&lt;/li&gt;
      &lt;li&gt;Referer 헤더, User-Agent 헤더&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;212-로그-포맷&quot;&gt;21.2. 로그 포맷&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;로그를 남기는 방식에 표준을 만들어 놓으면 다음과 같은 이점이 있습니다.
    &lt;ul&gt;
      &lt;li&gt;로그를 다루는 툴을 만들 수 있습니다.&lt;/li&gt;
      &lt;li&gt;로그를 보기 쉬워집니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;따라서 다양한 로그 포맷 표준들이 존재합니다.&lt;/li&gt;
  &lt;li&gt;대부분의 HTTP 애플리케이션은 한 개 이상의 로그 포맷을 지원합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2121-일반-로그-포맷common-log-format&quot;&gt;21.2.1. 일반 로그 포맷(Common Log Format)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;많이 사용되는 로그 포맷중 하나는 말 그대로 ‘일반 로그 포맷’입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NCSA(National Center for Supercomputing Applications)에서 처음 정의한 포맷입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대부분의 사용 소프트 웨어는 일반 로그 포맷을 지원합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래는 일반 로그 포맷의 필드들입니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;remotehost&lt;/td&gt;
          &lt;td&gt;요청한 컴퓨터의 호스트 명 혹은 IP&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;username&lt;/td&gt;
          &lt;td&gt;ident 검색을 수행했다면, 인증된 요청자의 이름이 존재&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;auth-username&lt;/td&gt;
          &lt;td&gt;인증을 수행 했다면, 인증된 요청자의 이름이 존재&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;timestamp&lt;/td&gt;
          &lt;td&gt;요청 날짜와 시간&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;request-line&lt;/td&gt;
          &lt;td&gt;HTTP 요청의 첫 행을 그대로 기술.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;response-code&lt;/td&gt;
          &lt;td&gt;응답의 HTTP 상태코드&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;response-size&lt;/td&gt;
          &lt;td&gt;응답 엔터티의 Content-Length&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음과 같은 로그가 남을 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;209.1.32.44 - - [03/Oct/1999:14:16:00 -0400] &quot;GET / HTTP/1.0&quot; 200 1024 
http-guide.com - dg [03/Oct/1999:14:16:32 -0400] &quot;GET / HTTP/1.0&quot; 200 477
http-guide.com - dg [03/Oct/1999:14:16:32 -0400] &quot;GET /foo HTTP/1.0&quot; 404 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 로그를 파싱하면 아래와 같이 나뉘어 집니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;로그1&lt;/th&gt;
          &lt;th&gt;로그2&lt;/th&gt;
          &lt;th&gt;로그3&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;remotehost&lt;/td&gt;
          &lt;td&gt;209.1.32.44&lt;/td&gt;
          &lt;td&gt;http-guide.com&lt;/td&gt;
          &lt;td&gt;http-guide.com&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;username&lt;/td&gt;
          &lt;td&gt;&lt;비어있음&gt;&lt;/비어있음&gt;&lt;/td&gt;
          &lt;td&gt;&lt;비어있음&gt;&lt;/비어있음&gt;&lt;/td&gt;
          &lt;td&gt;&lt;비어있음&gt;&lt;/비어있음&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;auth-username&lt;/td&gt;
          &lt;td&gt;&lt;비어있음&gt;&lt;/비어있음&gt;&lt;/td&gt;
          &lt;td&gt;dg&lt;/td&gt;
          &lt;td&gt;dg&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;timestamp&lt;/td&gt;
          &lt;td&gt;03/Oct/1999:14:16:00 -0400&lt;/td&gt;
          &lt;td&gt;03/Oct/1999:14:16:32 -0400&lt;/td&gt;
          &lt;td&gt;03/Oct/1999:14:16:32 -0400&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;request-line&lt;/td&gt;
          &lt;td&gt;GET / HTTP/1.0&lt;/td&gt;
          &lt;td&gt;GET / HTTP/1.0&lt;/td&gt;
          &lt;td&gt;GET /foo HTTP/1.0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;response-code&lt;/td&gt;
          &lt;td&gt;200&lt;/td&gt;
          &lt;td&gt;200&lt;/td&gt;
          &lt;td&gt;404&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;response-size&lt;/td&gt;
          &lt;td&gt;1024&lt;/td&gt;
          &lt;td&gt;477&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2122-혼합-로그-포맷combined-log-format&quot;&gt;21.2.2. 혼합 로그 포맷(Combined Log Format)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;혼합 로그 포맷 역시 자주 사용되는 로그 포맷입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반 로그 포맷과 매우 유사하며 필드 2개가 추가된 것이 전부입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래는 추가된 2개의 필드입니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Referer&lt;/td&gt;
          &lt;td&gt;Referer HTTP 헤더의 값&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;User-Agent&lt;/td&gt;
          &lt;td&gt;User-Agent Referer HTTP 헤더의 값&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래와 같은 로그가 남을 수 있습니다.(한 줄의 로그 입니다.)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;209.1.32.44 - - [03/Oct/1999:14:16:00 -0400] &quot;GET / HTTP/1.0&quot; 200 1024 &quot;http://www.joeshardware.com/&quot; &quot;5.0: Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 로그에서 Referer와 User-Agent는 다음에 해당합니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;로그1&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Referer&lt;/td&gt;
          &lt;td&gt;http://www.joeshardware.com/&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;User-Agent&lt;/td&gt;
          &lt;td&gt;5.0: Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2123-넷스케이프-확장-로그-포맷&quot;&gt;21.2.3. 넷스케이프 확장 로그 포맷&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;넷스케이프 확장 로그 포맷은 일반 로그 포맷에서 시작해 &lt;strong&gt;프록시나 웹 캐시 같은 HTTP 애플리케이션을 지원하기 위해&lt;/strong&gt; 확장되었습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일반 로그 포맷의 7개 필드를 제외하고 확장된 필드들은 다음과 같습니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-response-code&lt;/td&gt;
          &lt;td&gt;트랜잭션이 프록시를 거칠 경우, 서버에서 프록시로의 HTTP 응답 코드&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-response-size&lt;/td&gt;
          &lt;td&gt;트랜잭션이 프록시를 거칠 경우, 서버에서 프록시로의 응답 엔터티 Content-Length&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;client-request-size&lt;/td&gt;
          &lt;td&gt;클라이언트가 프록시로 보내는 요청의 본문이나 엔터티의 Content-Length&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-request-size&lt;/td&gt;
          &lt;td&gt;트랜잭션이 프록시를 거칠 경우, 프록시가 서버로 보내는 요청의 본문이나 엔터티의 Content-Length&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;client-request-hdr-size&lt;/td&gt;
          &lt;td&gt;클라이언트의 요청 헤더의 바이트 길이&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-response-hdr-size&lt;/td&gt;
          &lt;td&gt;트랜잭션이 프록시를 거칠 경우, 프록시가 요청자에게 보내는 응답 헤더의 바이트 길이&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-request-hdr-size&lt;/td&gt;
          &lt;td&gt;트랜잭션이 프록시를 거칠 경우, 프록시가 서버로 전송하는 요청 헤더의 바이트 길이&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;server-response-hdr-size&lt;/td&gt;
          &lt;td&gt;서버 응답 헤더의 바이트 길이&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-timestamp&lt;/td&gt;
          &lt;td&gt;트랜잭션이 프록시를 거칠 경우, 요청과 응답이 프록시를 통해 오가는 총 시간(초)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음과 같은 로그가 남을 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;209.1.32.44 - - [03/Oct/1999:14:16:00-0400] &quot;GET / HTTP/1.0&quot; 200 1024 200 1024 0 0 215 260 279 254 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 로그를 파싱하면 확장된 필드들은 아래와 같은 값을 갖습니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;로그1&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-response-code&lt;/td&gt;
          &lt;td&gt;200&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-response-size&lt;/td&gt;
          &lt;td&gt;1024&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;client-request-size&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-request-size&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;client-request-hdr-size&lt;/td&gt;
          &lt;td&gt;215&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-response-hdr-size&lt;/td&gt;
          &lt;td&gt;260&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-request-hdr-size&lt;/td&gt;
          &lt;td&gt;279&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;server-response-hdr-size&lt;/td&gt;
          &lt;td&gt;254&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-timestamp&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2124-넷스케이프-확장-2-로그-포맷&quot;&gt;21.2.4. 넷스케이프 확장 2 로그 포맷&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;넷스케이프 확장 2 로그 포맷은 넷스케이프 확장 로그 포맷을 확장한 것입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;넷스케이프 확장 로그 포맷에 있는 필드를 제외하고 새로 확장된 필드들은 다음과 같습니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;route&lt;/td&gt;
          &lt;td&gt;프록시가 클라이언트에 요청을 만드는데 사용하는 경로&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;client-finish-status-code&lt;/td&gt;
          &lt;td&gt;넷스케이프 확장 2 로그 포맷에서 정의한 클라이언트의 종료 상태 코드&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-finish-status-code&lt;/td&gt;
          &lt;td&gt;넷스케이프 확장 2 로그 포맷에서 정의한 프록시의 종료 상태 코드&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;cache-result-code&lt;/td&gt;
          &lt;td&gt;넷스케이프 확장 2 로그 포맷에서 정의한 캐시 결과 코드&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;route 엔 다음과 같은 값이 가능합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;DIRECT : 리소스를 서버에서 바로 가져옴&lt;/li&gt;
      &lt;li&gt;PROXY(host:port) : 리소스를 host 라는 프록시를 통해 가져옴&lt;/li&gt;
      &lt;li&gt;SOCKS(socks:port) : 리소스를 host라는 SOCKS 서버를 통해 가져옴&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;client-finish-status-code, proxy-finish-status-code 엔 다음과 같은 코드가 존재합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;- : 요청이 시작되지 않음&lt;/li&gt;
      &lt;li&gt;FIN : 요청이 성공적으로 완료됨&lt;/li&gt;
      &lt;li&gt;INTR : 요청이 클라이언트에 의해 중단 되었거나 프록시/서버에 의해 종료됨&lt;/li&gt;
      &lt;li&gt;TIMEOUT : 요청이 프로시/서버의 타임아웃에 걸림&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cache-result-code엔 다음과 같은 코드가 쓰입니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;- : 캐시할 수 없는 리소스&lt;/li&gt;
      &lt;li&gt;WRITTEN : 리소스를 캐시에 저장함&lt;/li&gt;
      &lt;li&gt;REFRESHED : 리소스를 캐시했고 갱신함&lt;/li&gt;
      &lt;li&gt;NO-CHECK : 캐시된 리소스를 반환했고 신선도 검사를 하지 않음&lt;/li&gt;
      &lt;li&gt;UP-TO-DATE : 캐시된 리소스를 반환했고 신선도 검사를 완료함&lt;/li&gt;
      &lt;li&gt;HOST-NOT-AVAILABLE : 캐시된 리소스를 반환했으며, 원격 서버가 사용할 수 있는 상태가 아니었기 때문에 신서도 검사를 하지 않음&lt;/li&gt;
      &lt;li&gt;CL-MISMATCH : 리소스를 캐시에 저장하지 않았다. Content-Length가 리소스의 크기와 맞지 않았기 때문에 쓰기를 중단함.&lt;/li&gt;
      &lt;li&gt;ERROR : 어떤 에러 때문에 리소스를 캐시에 저장하지 못했다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음과 같은 로그를 남길 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;209.1.32.44 - - [03/Oct/1999:14:16:00-0400] &quot;GET / HTTP/1.0&quot; 200 1024 200 1024 0 0 215 260 279 254 3 DIRECT FIN FIN WRITTEN 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;확장된 필드들은 다음과 같이 파싱됩니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;route&lt;/td&gt;
          &lt;td&gt;DIRECT&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;client-finish-status-code&lt;/td&gt;
          &lt;td&gt;FIN&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;proxy-finish-status-code&lt;/td&gt;
          &lt;td&gt;FIN&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;cache-result-code&lt;/td&gt;
          &lt;td&gt;WRITTEN&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2125-스퀴드squid-프록시-로그-포맷&quot;&gt;21.2.5. 스퀴드(Squid) 프록시 로그 포맷&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;스퀴드 프록시 캐시(&lt;a href=&quot;http://www.squid-cache.org/&quot;&gt;http://www.squid-cache.org/&lt;/a&gt;)는 유명한 오픈소스 프록시 캐시 프로젝트입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스퀴드 프록시 로그 포맷은 스퀴드 프록시 캐시에서 사용되는 로그 포맷입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앞서 살펴본 일반 로그 포맷을 원류로한 로그들과는 필드의 구성과 순서가 좀 다릅니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음과 같은 필드가 존재합니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;timestamp&lt;/td&gt;
          &lt;td&gt;GMT 기준 1970년 1월 1일 부터 요청이 도착한 시간까지의 시간을 초 단위로 기술&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;time-elapsed&lt;/td&gt;
          &lt;td&gt;요청과 응답이 프록시를 통해 오고간 총 시간을 밀리초 단위로 기술&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;host-ip&lt;/td&gt;
          &lt;td&gt;클라이언트의 호스트 장비 IP 주소&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;result-code/status&lt;/td&gt;
          &lt;td&gt;result code는 요청에 대해 어떤 일을 했는지를 squid result code로 기술. status는 HTTP 응답 코드&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;size&lt;/td&gt;
          &lt;td&gt;프록시가 클라이언트에게 보낸 HTTP 응답 헤더와 본문을 포함한 응답 길이가 바이트 단위로 기술됨&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;method&lt;/td&gt;
          &lt;td&gt;클라이언트 요청의 HTTP 메서드&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;url&lt;/td&gt;
          &lt;td&gt;클라이언트 요청의 URL&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;rfc931-ident&lt;/td&gt;
          &lt;td&gt;클라이언트에 인증된 사용자 이름&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;hierarchy/from&lt;/td&gt;
          &lt;td&gt;프록시가 클라이언트로 요청을 봬며 거친 경로를 기술.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;content-type&lt;/td&gt;
          &lt;td&gt;프록시 응답 엔터티의 Content-Type&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;squid result code는 꽤나 많기 때문에 링크를 남기겠습니다. &lt;a href=&quot;https://wiki.squid-cache.org/SquidFaq/SquidLogs#Squid_result_codes&quot;&gt;https://wiki.squid-cache.org/SquidFaq/SquidLogs#Squid_result_codes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스퀴드 로그 포맷을 사용한다고 해서 위 링크의 모든 result code를 구현하는 것은 아닙니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스퀴드 로그 포맷은 다음과 같은 로그를 남길 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;99823414 3001 209.1.32.44 TCP_MISS/200 4087 GET http://www.joes-hardware.com - DIRECT/proxy.com text/html 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 로그를 파싱하면 각 필드는 다음과 같은 값을 갖습니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;필드&lt;/th&gt;
          &lt;th&gt;로그1&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;timestamp&lt;/td&gt;
          &lt;td&gt;99823414&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;time-elapsed&lt;/td&gt;
          &lt;td&gt;3001&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;host-ip&lt;/td&gt;
          &lt;td&gt;209.1.32.44&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;result-code/status&lt;/td&gt;
          &lt;td&gt;TCP_MISS/200&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;size&lt;/td&gt;
          &lt;td&gt;4087&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;method&lt;/td&gt;
          &lt;td&gt;GET&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;url&lt;/td&gt;
          &lt;td&gt;http://www.joes-hardware.com&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;rfc931-ident&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;hierarchy/from&lt;/td&gt;
          &lt;td&gt;DIRECT/proxy.com&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;content-type&lt;/td&gt;
          &lt;td&gt;text/html&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;213-적중-계량하기&quot;&gt;21.3. 적중 계량하기&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 말했듯이 로그는 에러를 진단하거나, 웹 사이트에 대한 통계를 내어 여러 용도로 사용하기 위해 남겨집니다.&lt;/li&gt;
  &lt;li&gt;하지만 캐시가 사용된다면 클라이언트의 요청은 서버까지 오지 못하고 캐시에서 처리 됩니다.&lt;/li&gt;
  &lt;li&gt;그렇다면 정확한 통계가 이루어지지 않습니다. 이와 같은 상황은 어떻게 해결할까요?&lt;/li&gt;
  &lt;li&gt;중요한 문서들에 대해 캐시를 하지 않아 버릴 수도 있습니다. 모든 요청은 서버로 가게되고 정확한 통계를 낼 수 있습니다. 하지만 이렇게 되면 응답시간이 길어지고 서버의 부하가 증가합니다.&lt;/li&gt;
  &lt;li&gt;대신 캐시에도 로그가 쌓일테니 캐시의 로그를 주기적으로 원 서버에 보내면 어떨까요? 이런 방법을 적중 계량(Hit Metering) 이라고 합니다.&lt;/li&gt;
  &lt;li&gt;적중 계량은 HTTP의 확장으로 RFC 2227에서 정의되었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2131-개요&quot;&gt;21.3.1. 개요&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;적중 계량 규약은 캐시와 서버가 접근 정보를 공유하고 캐시의 리소스 양을 제어할 수 있는 몇가지 기능을 정의합니다.&lt;/li&gt;
  &lt;li&gt;적중 계량은 캐시에서 요청이 끝남으로서 발생되는 문제를 완벽히 해결해주진 않지만 어느정도로 서버가 원하는 정보를 제공해 줄 순 있습니다.&lt;/li&gt;
  &lt;li&gt;적중 계량을 사용하면 캐시를 이용해 성능을 높이면서도 서버에서 정확한 접근 통계를 낼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2132-meter-헤더&quot;&gt;21.3.2. Meter 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;적중 계량을 위해선 Meter 라는 헤더가 사용됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Meter 헤더에 다양한 지시자와 값들을 통해 적중 계량을 구현할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음은 Meter 헤더에 사용 될 수 있는 지시자들 입니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;지시자&lt;/th&gt;
          &lt;th&gt;약어&lt;/th&gt;
          &lt;th&gt;주체&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;will-report-and-limit&lt;/td&gt;
          &lt;td&gt;w&lt;/td&gt;
          &lt;td&gt;캐시&lt;/td&gt;
          &lt;td&gt;캐시는 사용량을 보고하고 서버가 기술한 사용제한에 복종함&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;wont-report&lt;/td&gt;
          &lt;td&gt;x&lt;/td&gt;
          &lt;td&gt;캐시&lt;/td&gt;
          &lt;td&gt;캐시는 사용 제한에 복종하지만, 사용량 보고는 하지 않음&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;wont-limit&lt;/td&gt;
          &lt;td&gt;y&lt;/td&gt;
          &lt;td&gt;캐시&lt;/td&gt;
          &lt;td&gt;캐시는 사용량 보고를 하지만 사용 제한은 없음&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;count&lt;/td&gt;
          &lt;td&gt;c&lt;/td&gt;
          &lt;td&gt;캐시&lt;/td&gt;
          &lt;td&gt;“사용횟수/재사용횟수” 로 기술되는 보고 지시자. “:count=2/4”와 같이 쓰인다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;max-uses&lt;/td&gt;
          &lt;td&gt;u&lt;/td&gt;
          &lt;td&gt;서버&lt;/td&gt;
          &lt;td&gt;서버가 캐시를 사용해 응답할 수 있는 최대 횟수를 기술. “max-uses=100” 과 같이 쓰임&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;max-reuses&lt;/td&gt;
          &lt;td&gt;r&lt;/td&gt;
          &lt;td&gt;서버&lt;/td&gt;
          &lt;td&gt;서버가 캐시를 재사용해 응답할 수 있는 최대 횟수를 기술. “max-reuses=100”과 같이 쓰임&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;do-report&lt;/td&gt;
          &lt;td&gt;d&lt;/td&gt;
          &lt;td&gt;서버&lt;/td&gt;
          &lt;td&gt;서버가 프록시에게 사용량 보고를 요구함&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;dont-report&lt;/td&gt;
          &lt;td&gt;e&lt;/td&gt;
          &lt;td&gt;서버&lt;/td&gt;
          &lt;td&gt;서버가 사용량 보고를 원하지 않음&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;timeout&lt;/td&gt;
          &lt;td&gt;t&lt;/td&gt;
          &lt;td&gt;서버&lt;/td&gt;
          &lt;td&gt;서버가 리소스를 계량할 때 시간제한을 거는데 사용. 캐시는 해당 타임아웃 정각이나 1분 전후로 보고를 해야함. “timeout=60”과 같이 쓰임&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;wont-ask&lt;/td&gt;
          &lt;td&gt;n&lt;/td&gt;
          &lt;td&gt;서버&lt;/td&gt;
          &lt;td&gt;서버는 계량 정보를 원하지 않음.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래 그림은 Meter 헤더가 사용되는 과정을 나타냅니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/meter_example.png&quot; alt=&quot;meter_example.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트 입장에선 변하는게 없습니다. 프록시가 서버로 요청을 보낼때 ‘will-report-and-limit’을 보내 사용량을 보고하며 사용 제한에 복종한다고 말합니다.&lt;/li&gt;
  &lt;li&gt;서버는 프록시에게 리소스를 건네주며 ‘do-report’를 지시했습니다.&lt;/li&gt;
  &lt;li&gt;프록시는 클라이언트에게 리소스를 건네줍니다.&lt;/li&gt;
  &lt;li&gt;이후 시간이 흘러 프록시가 갖은 리소스가 신선하지 않아 재검사를 보낼때 Meter에 적중 횟수를 보고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;214-개인-정보-보호에-대해&quot;&gt;21.4. 개인 정보 보호에 대해&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;한편, 로깅은 본래 선의의 목적으로 사용되지만 악용 될 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;웹 사이트의 사용 기록을 몰래 매매할 수도 있고 수집한 로그로 개인의 사생활을 엿볼 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;로그를 다루는 개발자라면 항상 이 점을 염두해 두어야 할 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;웹 프로젝트를 할 때 로그는 프레임워크가 해주는대로 ‘알아서 잘 남겠거니’하고 지나쳤었습니다.&lt;/li&gt;
  &lt;li&gt;이번 장을 학습한 이후로는 좀 더 적극적으로 로그를 남기고 사용할 수 있을 것 같습니다.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>웹 호스팅</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C18/"/>
   <updated>2020-03-30T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드18</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;웹 호스팅이란 콘텐츠 리소스를 저장, 중개, 관리하는 일을 통틀어 이르는 말입니다.&lt;/li&gt;
  &lt;li&gt;웹 리소스를 직접 호스팅 할 수도 있지만 호스팅에 필요한 하드웨어, 소프트웨어를 관리해주는 호스팅 업체를 이용할 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;이번 장에선 웹 호스팅 서비스와 관련한 사항들을 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;181-호스팅-서비스&quot;&gt;18.1. 호스팅 서비스&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;웹의 초기엔 대부분 각 회사가 직접 하드웨어와 소프트웨어를 구비해 자체 웹 서버를 구축했습니다.&lt;/li&gt;
  &lt;li&gt;하지만 웹이 발전하며 이를 대신해주는 웹 호스팅 업체들이 등장했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1811-간단한-예--전용-호스팅&quot;&gt;18.1.1. 간단한 예 : 전용 호스팅&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;전용 호스팅이란 말 그대로 한 호스팅 의뢰자에게 하나의 서버를 전용으로 배정해주는 것입니다.&lt;/li&gt;
  &lt;li&gt;호스팅업체 A에 호스팅 의뢰인 A, B가 호스팅을 맡겼다면, 의뢰인 A와 B에게 각각 서버와 IP가 할당됩니다.&lt;/li&gt;
  &lt;li&gt;의뢰인 A의 도메인은 의뢰인 A의 IP로 연결이 되고 의뢰인 B의 도메인은 의뢰인 B의 IP로 연결이 됩니다.&lt;/li&gt;
  &lt;li&gt;웹이 점점 커지며 이런 전용 호스팅 방식은 단점을 많이 보였습니다.
    &lt;ul&gt;
      &lt;li&gt;우선 의뢰인들에게 각각 하드웨어와 서버를 배정하니 비용이 높습니다.&lt;/li&gt;
      &lt;li&gt;그리고 각 웹 사이트들은 항상 운용되는게 아니기 때문에 의뢰인들의 서버들은 놀고 있는 시간이 많이 생깁니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이를 해결하기 위해 하나의 서버에 여러 사이트를 제공하는 가상 호스팅이 등장합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;182-가상-호스팅&quot;&gt;18.2. 가상 호스팅&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;가상 호스팅은 하나의 서버에서 여러 사이트를 호스팅 하는 것입니다.
    &lt;ul&gt;
      &lt;li&gt;쉽게 말해, 다른 도메인을 가지고 있는 두 사이트가 실제로 같은 IP를 갖고 있는 것입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;가상 호스팅된 여러 웹 사이트들은 각각 다른 서버에서 호스팅 되는 것 처럼 보이지만 사실 물리적으로 같은 서버에서 호스팅 되고 있습니다.&lt;/li&gt;
  &lt;li&gt;클라이언트의 입장에선 이용중인 사이트가 가상 호스팅된 사이트인지 느낄 수 없습니다.&lt;/li&gt;
  &lt;li&gt;가상 호스팅은 업체들은 한 서버에 수백, 수천개의 웹 사이트를 호스팅 합니다.
    &lt;ul&gt;
      &lt;li&gt;실제 한 PC에 수천대를 호스팅하는건 아니고 서버 팜을 만들어 각 서버에 부하를 분산시킵니다.(20장에서 자세히 알아봅니다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1821-호스트-정보가-없는-가상-서버-요청&quot;&gt;18.2.1. 호스트 정보가 없는 가상 서버 요청&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;이런 가상 호스팅은 HTTP/1.0 환경에선 문제가 많았습니다.&lt;/li&gt;
  &lt;li&gt;본 책의 초반부분에서 설명했듯이 HTTP/1.0은 URL의 호스트명을 보내지 않고 경로 컴포넌트만 전송합니다.
    &lt;ul&gt;
      &lt;li&gt;http://www.joes-hardware.com/index.html 을 HTTP/1.0으로 전송하면 브라우저는 www.joes-hardware.com과 커넥션을 맺지만 실제로 가는 요청은 “GET /index.html”이 전부입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이와 같은 상황에서 만약 한 호스팅 업체에 www.joes-hardware.com과 www.marys-antiques.com이 호스팅 되어 있다고 가정합시다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 http://www.joes-hardware.com/index.html 를 브라우저에 입력해 브라우저가  www.joes-hardware.com에 커넥션을 맺고 “GET /index.html”을 보냈지만 호스팅하고 있는 서버의 입장에선 /index.html이  www.joes-hardware.com의 것인지, www.marys-antiques.com의 것인지 판별할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;위와 같은 상황이 발생한건 HTTP의 설계자들이 가상 호스팅이 일어날 것이라고 생각하지 못했기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1822-가상-호스팅-동작하게-하기&quot;&gt;18.2.2. 가상 호스팅 동작하게 하기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;위 상황을 해결하기 위해 차선책과 새로운 컨벤션을 개발해야 했습니다.&lt;/li&gt;
  &lt;li&gt;이 문제를 간단히 해결하기 위해선 HTTP 요청에 경로 컴포넌트만이 아니라 완전한 URL을 보내도록 하면 됩니다.
    &lt;ul&gt;
      &lt;li&gt;따라서 HTTP/1.1을 지원하는 서버는 완전한 URL을 처리할 수 있어야 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하지만 이런 새로운 HTTP명세를 따르지 않는 기존의 어플리케이션들을 위해 아래 네 가지 방법 차선책들이 고안됐습니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;URL 경로를 통한 가상 호스팅&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;이 방법은 어떤 사이트를 요청하는것인지 알수 있게 URL에 특별한 경로 컴포넌트를 추가하는 것입니다.&lt;/li&gt;
          &lt;li&gt;예를들어, http://www.joes-hardware.com/index.html 를 http://www.joes-hardware.com/&lt;strong&gt;joe&lt;/strong&gt;/index.html로,  http://www.marys-antiques.com/index.html 를 http://www.marys-antiques.com/&lt;strong&gt;mary&lt;/strong&gt;/index.html로 바꾸는 것입니다.&lt;/li&gt;
          &lt;li&gt;하지만 이 방법은 우리가 생각하는 일반적인 URL과 맞지 않는 좋지 않은 방법입니다. 거의 사용되지 않습니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;포트 번호를 통한 가상 호스팅&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;호스팅 하고 있는 각 웹 사이트에 다른 포트 번호를 할당하면 해당 문제를 해결할 수 있습니다.&lt;/li&gt;
          &lt;li&gt;하지만, 그렇다면 사용자가 항상 URL에 포트번호를 표기해야 하기 때문에 이 역시 잘 사용되지 않습니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;IP 주소를 통한 가상 호스팅&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;가장 많이 사용되는 방법은 각 사이트에 가상 IP를 할당하는 것입니다.&lt;/li&gt;
          &lt;li&gt;www.joes-hardware.com와 www.marys-antiques.com가 실제로 가리키는 IP를 구분하는 것입니다.&lt;/li&gt;
          &lt;li&gt;각 가상 IP들은 사이트들을 호스팅하고 있는 실제 서버로 연결됩니다.&lt;/li&gt;
          &lt;li&gt;이렇게 가상 IP를 사용하는 방법은 규모가 커지면 다음과 같은 문제가 발생할 수 있습니다.
            &lt;ul&gt;
              &lt;li&gt;한 장비에 연결할 수 있는 IP갯수엔 제한이 있습니다.&lt;/li&gt;
              &lt;li&gt;한 장비를 떠나 IP주소는 희소 상품이기 때문에 가상 IP주소를 충분히 확보하지 못할 수 있습니다.&lt;/li&gt;
              &lt;li&gt;서버를 복제할 시엔 각 복제된 서버에 새로운 IP 주소를 부여해야하기 때문에 일이 더 커집니다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;이런 문제들이 있지만 가장 많이 사용되는 방법입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Host 헤더를 통한 가상 호스팅&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;같은 IP주소를 사용하더라도 각 사이트들을 구분할 수 있는 정보를 전달할 수 있다면 가상 호스팅을 사용할 수 있습니다.&lt;/li&gt;
          &lt;li&gt;이를 위해 HTTP를 확장해 HTTP/1.0+ 에서 Host 헤더가 도입되었습니다.&lt;/li&gt;
          &lt;li&gt;또한 HTTP/1.1을 따르는 애플리케이션이라면 Host헤더를 반드시 기술해야 합니다.&lt;/li&gt;
          &lt;li&gt;Host 헤더는 말 그대로 호스트 명을 기술합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1823-http11-host-헤더&quot;&gt;18.2.3. HTTP/1.1 Host 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;현대의 웹에선 가상 호스팅이 매우 흔하기 때문에 모든 HTTP 클라이언트는 Host 헤더를 구현해야 합니다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;문법과 사용 방법&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Host 헤더엔 호스트와 포트번호를 기술합니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host : www.joes-hardware.com
Host : www.joes-hardware.com:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Host헤더에 포트 번호가 없으명 해당 스킴의 기본 포트를 사용합니다.(http의 경우 80, https의 경우 443)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;URL에 IP주소가 있으면 Host 헤더엔 해당 IP주소를 포함해야 합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;URL에 호스트명이 있으면 Host 헤더엔 해당 호스트명을 포함해야 합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;URL에 호스트명이 있다면, Host 헤더에 해당 호스트명에 할당된 IP주소가 있으면 &lt;strong&gt;안됩니다.&lt;/strong&gt;가상 호스팅의 경우 한 IP가 여러 호스트명을 호스팅하고 있을 수 있기 때문입니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;클라이언트가 프록시 서버를 사용한다면, Host 헤더엔 프록시 서버가 아닌 원 목적지 서버의 호스트명과 포트번호를 기술해야 합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;클라이언트는 모든 요청에 Host 헤더를 기술해야 합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;웹 프록시는 요청을 서버에 전달하기 전에 받았던 Host 헤더를 추가해야 합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;HTTP/1.1 웹 서버는 Host 명이 없는 요청 메세지를 받으면 400 상태코드로 응답해야 합니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;Host 헤더의 누락&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;만약 브라우저가 Host 헤더를 보내지 않는다면 서버는 기본 웹 페이지로 보내거나 브라우저를 업그레이드 하라는 에러 페이지를 반환합니다.&lt;/li&gt;
      &lt;li&gt;이 포스팅이 쓰여지는 현재엔 거의 모든 브라우저가 Host 헤더를 전송합니다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;Host 헤더 해석하기&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;가상호스팅을 하지 않는 서버는 Host 헤더를 무시하면 되지만, 가상 호스팅을 하는 서버는 아래와 같은 과정을 거칩니다.
        &lt;ul&gt;
          &lt;li&gt;요청 URL이 완전한 URL이라면 Host 헤더 값은 무시하고 URL에 있는 호스트명을 사용합니다.&lt;/li&gt;
          &lt;li&gt;요청 URL에 호스트명이 없고 Host 헤더가 있다면 Host 헤더를 사용합니다.&lt;/li&gt;
          &lt;li&gt;요청 URL에 호스트명이 없고 Host 헤더도 없다면 400 Bad Request 응답을 반환합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;Host 헤더와 프록시&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;정말 오래됐거나 잘못 만들어진 웹 클라이언트는 가끔 프록시의 주소를 Host 헤더에 담기도 하니 주의해야 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;183-안정적인-웹-사이트-만들기&quot;&gt;18.3. 안정적인 웹 사이트 만들기&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;서버는 다운 될 수도 있고 느려질 수도 있으며 서버를 구성하는 네트워크에 장애가 올 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;이번 절에선 이에 대응하는 방법들을 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1831-미러링-된-서버-팜&quot;&gt;18.3.1. 미러링 된 서버 팜&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;서버 팜(서버 클러스터)은 서로를 대신할 수 있는 웹 서버들의 집합입니다.&lt;/li&gt;
  &lt;li&gt;서버 팜에 있는 콘텐츠들은 한 서버에서 문제가 생기면 다른 서버에서 대신 전달할수 있도록 미러링 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;원본 콘텐츠를 가지고 있는 서버를 master origin server 라고 부릅니다.&lt;/li&gt;
  &lt;li&gt;master origin server로 부터 콘텐츠를 받은 미러링된 서버를 replica origin server라고 부릅니다.&lt;/li&gt;
  &lt;li&gt;서버 팜을 이용한다면 다음 그림과 같은 구조를 띄게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/server_farm.png&quot; alt=&quot;server_farm.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;복제 서버는 스위치를 통해 마스터 서버로 부터 콘텐츠를 미러링 합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 컨텐츠를 요청할때 가리키는 IP는 스위치의 IP 주소입니다.&lt;/li&gt;
  &lt;li&gt;클라이언트의 요청이 서버 팜 안의 여러 서버 중 하나로 가는 방법은 아래와 같습니다.
    &lt;ul&gt;
      &lt;li&gt;HTTP 리다이렉션 : 요청이 마스터 서버로 간뒤 마스터 서버에서 적절한 곳의 복제 서버로 리다이렉트 시킵니다.&lt;/li&gt;
      &lt;li&gt;DNS 리다이렉션 : URL이 4개의 IP주소를 가리킬 수 있고 DNS 서버가 그 중 적절한 IP를 선택해줍니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;더 자세한 내용은 20 장에서 이어집니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/mirror.png&quot; alt=&quot;mirror.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이클립스를 다운받을때 가능한 mirror입니다. 가장 가까운 곳을 선택하면 (보통) 더 빠르게 다운 받을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1832-콘텐츠-분산-네트워크&quot;&gt;18.3.2. 콘텐츠 분산 네트워크&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;콘텐츠 분산 네트워크(CDN)은 콘텐츠의 분산을 목적으로 하는 네트워크 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1833-cdn의-대리-캐시&quot;&gt;18.3.3. CDN의 대리 캐시&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;대리 캐시는 위에서 살펴본 replica origin server를 대신해 사용될 수 있습니다.&lt;/li&gt;
  &lt;li&gt;대리 캐시는 리버스 프록시라고도 불립니다.&lt;/li&gt;
  &lt;li&gt;대리 캐시와 미러링 된 서버의 차이는 콘텐츠 전체를 가지고 있느냐 입니다. 대리 캐시는 콘텐츠 전체를 가지고 있진 않습니다. 수요에 따라 가지고 있을 컨텐츠를 선택합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1834-cdn의-프록시-캐시&quot;&gt;18.3.4. CDN의 프록시 캐시&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;추후 보강&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;184-웹-사이트-빠르게-만들기&quot;&gt;18.4. 웹 사이트 빠르게 만들기&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;이번 장에서 살펴본 내용들은 모두 웹 사이트를 빠르게 만들기 위한 방법들입니다.&lt;/li&gt;
  &lt;li&gt;서버 팜이나 프록시 캐시, 대리 서버를 사용해 서버의 부하를 낮춰줍니다.&lt;/li&gt;
  &lt;li&gt;콘텐츠를 분산 시켜 콘텐츠를 요청한 사용자에게 더 가까운 곳에서 콘텐츠를 제공해줍니다.&lt;/li&gt;
  &lt;li&gt;앞서 살펴본 방법들 말고도 웹 사이트를 빠르게 하기 위해 콘텐츠를 인코딩 할 수도 있습니다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트가 디코딩 할 수 있다는 가정하에, 콘텐츠를 인코딩해 전송할 용량 자체를 줄일 수도 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;미러링과 CDN 부분은 아직 이해가 좀 부족한 것 같습니다. 조금 더 검토해봐야 할 것 같습니다.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>내용 협상과 트랜스코딩</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C17/"/>
   <updated>2020-03-27T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드17</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;사용 언어 별로 다른 문서를 주거나, 브라우저별로 다른 자바스크립트를 주어야 하는 등 하나의 URL이 여러 리소스에 대응되야 할 때가 있습니다.&lt;/li&gt;
  &lt;li&gt;이때, 어떤 리소스를 받을 지 클라이언트와 서버가 협상할 수 있습니다. 이를 내용 협상이라고 합니다.&lt;/li&gt;
  &lt;li&gt;한편, 내용 협상 결과로 주어야할 리소스가 이미 존재하는 경우도 있지만 동적으로 생성해야 할 때도 있습니다. 이를 트랜스 코딩이라고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;171-내용-협상-기법&quot;&gt;17.1. 내용 협상 기법&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;내용 협상이란 하나의 URL이 여러 리소스에 대응될 때, 어떤 리소스가 적절한 리소스인지 클라이언트와 서버가 정하는 방법입니다.&lt;/li&gt;
  &lt;li&gt;내용 협상엔 크게 세 가지 방법이 존재 합니다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트 주도 : 서버가 클라이언트에게 선택지를 제공하면 클라이언트가 선택합니다. 서버에서 구현이 쉽고 클라이언트가 가장 원하는 선택을 할 수 있지만 리소스를 얻기위한 대기시간(단계)가 증가합니다.&lt;/li&gt;
      &lt;li&gt;서버 주도 : 클라이언트의 요청헤더를 바탕으로 서버가 리소스를 결정합니다. 클라이언트 주도 협상보다 빠르지만 클라이언트가 원하는 리소스가 없다면 서버가 추측을 해야 하는 상황이 발생합니다.&lt;/li&gt;
      &lt;li&gt;투명 : 투명한 중간 장치(주로 프록시 캐시)가 서버를 대신해 협상합니다. 서버의 부하가 줄어드는게 장점이지만 투명 협상에 대한 명세가 없습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;172-클라이언트-주도-협상&quot;&gt;17.2. 클라이언트 주도 협상&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;서버가 선택 가능한 선택지들을 클라이언트에게 돌려주고 사용자가 직접 선택합니다. 그 방법엔 두 가지가 있습니다.
    &lt;ul&gt;
      &lt;li&gt;여러 버전에 대한 링크와 설명이 담긴 HTML 페이지를 돌려줄 수 있습니다.&lt;/li&gt;
      &lt;li&gt;300 Multiple Choices 응답 코드로 HTTP/1.1 응답을 돌려줍니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버 입장에선 가장 구현하기 쉽습니다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 가능한 선택지 안에서 최선의 선택을 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;단점은 목록을 보여주고 요청을 다시 받기 때문에 리소스를 받는 과정이 길어집니다.&lt;/li&gt;
  &lt;li&gt;또 다른 단점으론 리소스당 여러 url이 필요합니다.
    &lt;ul&gt;
      &lt;li&gt;영어페이지, 프랑스어 페이지가 존재하는 www.joes-hardware.com를 요청하면 www.joes-hardware.com/english와 www.joes-hardware.com/french 둘을 준비해야 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;173-서버-주도-협상&quot;&gt;17.3. 서버 주도 협상&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;서버 주도 협상은 클라이언트가 선호하는 옵션을 같이 요청합니다.
    &lt;ul&gt;
      &lt;li&gt;Accept 관련 헤더인 내용 협상 헤더를 사용합니다.&lt;/li&gt;
      &lt;li&gt;User-Agent와 같은 내용 협상 헤더 외 다른 헤더를 사용합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버는 위 헤더들을 파악해 클라이언트가 원하는 리소스를 돌려줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1731-내용-협상-헤더&quot;&gt;17.3.1. 내용 협상 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;내용 협상 헤더엔 아래와 같은 것들이 있습니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;헤더&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Accept&lt;/td&gt;
          &lt;td&gt;서버가 어떤 미디어 타입으로 보내도 되는지 알려줍니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Accept-Language&lt;/td&gt;
          &lt;td&gt;서버가 어떤 언어로 보내도 되는지 알려줍니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Accept-Charset&lt;/td&gt;
          &lt;td&gt;서버가 어떤 charset으로 보내도 되는지 알려줍니다.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Accept-Encoding&lt;/td&gt;
          &lt;td&gt;서버가 어떤 인코딩으로 보내도 되는지 알려줍니다.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앞 장들에서 살펴본 Content로 시작하는 엔터티 헤더와 각각 대응됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트는 매 요청마다 선호 정보를 다시 보내야 합니다.(HTTP는 Stateless 하기 때문입니다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 헤더엔 1개의 선호가 아니라 여러 선호를 담을 수 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Accept-Language : ko, en, fr&lt;/li&gt;
      &lt;li&gt;이때, 각 선호에 quality value (앞으로 q값이라 칭함)를 주어 선호의 정도를 나타낼 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1732-내용-협상-헤더의-품질값quality-value-q값&quot;&gt;17.3.2. 내용 협상 헤더의 품질값(quality value, q값)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept-Language : en;q=0.5, fr;q=0.0, nl;q=1.0, tr;q=0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;0.0은 선호하지 않음, 1.0은 가장 선호함입니다.&lt;/li&gt;
  &lt;li&gt;위 헤더는 프랑스어(fr), 터키어(tr)는 원하지 않고 영어(en)는 받아들일 수 있으며 네더란드어(nl)를 가장 선호한다는 뜻입니다.&lt;/li&gt;
  &lt;li&gt;한편, 서버에 클라이언트가 선호하는 버전이 없을 수 있습니다. 이 때 서버는 기본 문서를 주거나 클라이언트의 선호에 맞추기 위해 트랜스코딩을 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1733-그-외의-헤더들에-의해-결정&quot;&gt;17.3.3. 그 외의 헤더들에 의해 결정&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;브라우저의 종류와 같이 리소스별로 따로 관리해야 하지만 내용 협상 헤더엔 담길 수 없는 것들이 있습니다.&lt;/li&gt;
  &lt;li&gt;이땐 User-Agent와 같은 내용 협상 헤더 외의 헤더를 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;이 헤더들에선 q값을 사용할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;한편, 캐시를 이용하기 위해 Vary 헤더를 이용하기도 합니다.
    &lt;ul&gt;
      &lt;li&gt;Vary 헤더는 서버가 응답시에 추가하는 헤더입니다.&lt;/li&gt;
      &lt;li&gt;Vary 헤더는 서버가 어떤 요청 헤더를 참고하고 해당 리소스를 응답해줬는지 말해줍니다.&lt;/li&gt;
      &lt;li&gt;캐시가 요청을 받는 상황이라면 Vary헤더를 통해 클라이언트의 요청에 맞춰 캐시된 리소스를 돌려줄 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1734-아파치의-내용-협상&quot;&gt;17.3.4. 아파치의 내용 협상&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;많이 사용되는 웹 서버인 아파치에서 내용 협상을 구현하기 위해선 각 버전에 해당하는 파일을 적절한 디렉터리에 넣어줘야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 후 아래 둘 중 하나의 방법으로 내용 협상을 진행할 수 있습니다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;type-map 파일 사용하기&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;type-map 파일은 내용 협상 헤더의 내용과 협상 결과 돌려줘야할 리소스를 맵핑해줍니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;type-map 파일을 사용하기 위해선 우선 서버 설정 파일에 type-map 파일들을 위한 설정을 해야 합니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AddHandler type-map .var
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;위 설정은 .var 확장자를 가진 파일들이 type-map임을 뜻합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;type-map 파일은 다음과 같이 이루어져 있습니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;URI: joes-hardware.html
    
URI: joes-hardware.en.html
Content-type: text/html
Content-language: en
    
URI: joes-hardware.fr.de.html
Content-type: text/html;charset=iso-8859-2
Content-language: fr, de 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;위와 같이 구성하면 아파치가 내용 협상 헤더를 읽어 적절한 콘텐츠로 맵핑해줍니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;MultiViews 사용하기&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;MultiViews는 아파치에서 사용자가 설정해 놓은 디렉터리 구조에 맞게 type-map 파일을 생성하도록 하는 지시어입니다.&lt;/li&gt;
      &lt;li&gt;MultiViews를 사용하기 위해선 access.conf 파일에서 Options 지시어를 이용해 설정해 놓은 디렉터리에 MultiViews 옵션을 활성화시켜야 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아파치서버의 내용 협상에 대한 더 자세한 사항은 &lt;a href=&quot;https://httpd.apache.org/docs/2.4/content-negotiation.html&quot;&gt;https://httpd.apache.org/docs/2.4/content-negotiation.html&lt;/a&gt;를 참고하면 좋을 것 같습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1735-서버-측-확장&quot;&gt;17.3.5. 서버 측 확장&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;서버 주도 협상의 다른 방법으로 ASP 와 같은 서버 측 확장을 하는 방법도 있습니다.&lt;/li&gt;
  &lt;li&gt;이는 8장에서 다뤄보았었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;174-투명-협상&quot;&gt;17.4. 투명 협상&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;투명 협상은 캐시 프록시에서 진행되는 협상입니다.&lt;/li&gt;
  &lt;li&gt;투명 협상을 이용하면 클라이언트와 메세지 교환 횟수(클라이언트 측 협상의 단점)를 줄이는 동시에 서버의 부하(서버 측 협상의 단점)를 막을 수 있습니다.&lt;/li&gt;
  &lt;li&gt;프록시가 내용 협상을 하기 위해선 클라이언트의 요청 중 어느 헤더를 살펴봐야하는 지를 알아야 합니다.&lt;/li&gt;
  &lt;li&gt;이를 위해 서버는 캐시 프록시에게 Vary 헤더를 포함시킨 응답을 줍니다. 프록시는 Vary헤더를 통해 어떤 헤더를 검사해야 하는 지 알 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1741-캐시와-얼터네이트alternate&quot;&gt;17.4.1. 캐시와 얼터네이트(alternate)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;캐시 안 같은 문서에 대해 영어버전 문서, 프랑스어 버전 문서가 있다고 가정합시다.&lt;/li&gt;
  &lt;li&gt;이 다른 버전을 배리언트(variant) 혹은 얼터네이트(alternate)라고 부릅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1742-vary-헤더&quot;&gt;17.4.2. Vary 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;캐시는 여러 얼터네이트중 올바른 문서를 클라이언트에게 돌려주어야 합니다.&lt;/li&gt;
  &lt;li&gt;올바른 문서를 찾기 위해선 어떤 조건에서(어떤 헤더를 보고) 서버가 해당 문서를 돌려주었는지 알아야 합니다.&lt;/li&gt;
  &lt;li&gt;이를 알려주는게 Vary 헤더입니다. 서버는 내용 협상결과 문서를 돌려줄때 Vary 헤더에 자신이 검사한 헤더를 나열해줍니다.&lt;/li&gt;
  &lt;li&gt;캐시는 클라이언트의 요청이 왔을때 Vary 헤더에 있는 헤더들을 검사해 맞는 얼터네이트를 찾습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/vary_header.png&quot; alt=&quot;vary_header.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 그림은 캐시된 아파치 문서를 가져올때 어떤 헤더들을 고려했는지를 보여줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;175-트랜스코딩&quot;&gt;17.5. 트랜스코딩&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;지금까지의 내용 협상은 방법이 어찌됐든 협상 결과 돌려줄 문서가 이미 존재해야 했습니다.&lt;/li&gt;
  &lt;li&gt;하지만 모든 웹 페이지들이 한국어 버전을 준비해놓지는 않는 것 처럼, 클라이언트가 요청한 버전의 문서가 없을 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;이럴땐 기존의 문서를 클라이언트의 요청에 맞게 바꾸는 트랜스코딩 과정을 거칠 수 있습니다.&lt;/li&gt;
  &lt;li&gt;아래는 트랜스코딩의 예시입니다.
    &lt;ul&gt;
      &lt;li&gt;HTML문서 → WML문서&lt;/li&gt;
      &lt;li&gt;고해상도 이미지 → 저해상도 이미지&lt;/li&gt;
      &lt;li&gt;64K색 이미지 → 흑백 이미지&lt;/li&gt;
      &lt;li&gt;프레임, 이미지 등을 포함한 복잡한 페이지 → 프레임, 이미지 등이 없는 단순 텍스트 페이지&lt;/li&gt;
      &lt;li&gt;자바 애플릿이 있는 HTML 페이지 → 자바 애플릿이 없는 페이지&lt;/li&gt;
      &lt;li&gt;광고가 있는 페이지 → 광고가 없는 페이지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜스코딩엔 크게 아래 세 가지가 있습니다.
    &lt;ul&gt;
      &lt;li&gt;포맷 변환&lt;/li&gt;
      &lt;li&gt;정보 합성&lt;/li&gt;
      &lt;li&gt;콘텐츠 주입&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1751-포맷-변환&quot;&gt;17.5.1. 포맷 변환&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;포맷 변환은 말 그대로 컨텐츠의 포맷을 바꾸어주는 것입니다.&lt;/li&gt;
  &lt;li&gt;HTML 페이지를 WML 페이지로 바꾸는 것 등이 포맷 변환 트랜스 코딩의 예시 입니다.&lt;/li&gt;
  &lt;li&gt;포맷 변환은 주로 내용 협상 헤더에 의해 주도됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1752-정보-합성information-synthesis&quot;&gt;17.5.2. 정보 합성(information synthesis)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;정보 합성은 한 문서에서 정보의 요점들을 추출하는 것을 말합니다.&lt;/li&gt;
  &lt;li&gt;문서에서 각 절의 제목에 기반해 요약된 문서를 만드는 등이 그 예시입니다.&lt;/li&gt;
  &lt;li&gt;각 문서들의 주요 키워드를 뽑아 페이지들을 분류하는 등 포털 사이드에서도 종종 쓰입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1753-콘텐츠-주입&quot;&gt;17.5.3. 콘텐츠 주입&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;광고가 없는 페이지에 광고를 삽입하는 등의 콘텐츠 주입 역시 트랜스 코딩의 한 예시입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1754-트랜스코딩-vs-정적으로-미리-생성해놓기&quot;&gt;17.5.4. 트랜스코딩 vs 정적으로 미리 생성해놓기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;그렇다면 한 가지 의문이 생길 수 있습니다.&lt;/li&gt;
  &lt;li&gt;트랜스코딩으로 만들어 질 수 있는 콘텐츠들을 미리 생성해 두면 응답 시간을 더 줄일 수 있지 않을까 하는 의문입니다.&lt;/li&gt;
  &lt;li&gt;물론, 서버가 넉넉하다면 그럴 수 있겠지만 모든 서버에는 비용에 제약이 있습니다.&lt;/li&gt;
  &lt;li&gt;트랜스코딩이 될 수 있는 모든 콘텐츠를 미리 생성해 놓는 것은 서버의 공간을 낭비하게 됩니다.(특히 자주 안쓰이는 콘텐츠라면 더욱더)&lt;/li&gt;
  &lt;li&gt;또한 미리 생성해 놓는 방식은 원본 콘텐츠가 조금이라도 변경되면 모든 얼터네이트들을 다시 생성해야 합니다.&lt;/li&gt;
  &lt;li&gt;한편, 트랜스코딩은 서버 외부의 프록시 등에서도 이루어질 수 있기 때문에 자주 요청되는 문서가 아니라면 트랜스 코딩을 통해 서버의 부하를 줄이고 서버를 효율적으로 운용할 수 있게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>국제화</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C16/"/>
   <updated>2020-03-25T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드16</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP가 전세계적으로 사용되기 위해선 여러 이슈들이 존재하지만 그중 주요한 두 가지가 ‘문자집합 인코딩’과 ‘언어 태그’입니다.&lt;/li&gt;
  &lt;li&gt;이번 장에선 다음과 같은 내용을 알아볼 것입니다.
    &lt;ul&gt;
      &lt;li&gt;HTTP가 어떻게 여러 언어 문자 체계 및 표준과 상호작용 하는지&lt;/li&gt;
      &lt;li&gt;문자 인코딩에 관련한 용어, 기술, 표준&lt;/li&gt;
      &lt;li&gt;언어를 위한 표준 명명 체계 및 표준화된 언어 태그가 어떻게 콘텐츠를 서술하는 지&lt;/li&gt;
      &lt;li&gt;국제화된 URI의 규칙과 주의사항&lt;/li&gt;
      &lt;li&gt;날짜 및 그외 국제화 관련 이슈&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;161-국제적인-콘텐츠를-다루기-위해-필요한-http-지원&quot;&gt;16.1. 국제적인 콘텐츠를 다루기 위해 필요한 HTTP 지원&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP의 엔터티 본문은 사실 0, 1로 가득찬 덩어리에 불과합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 0,1의 덩어리들이 각 클라이언트들가 원하는 문자와 언어를 통해 보여지도록 만들어야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버는 클라이언트 프로그램에게 보낸 문서의 문자와 언어를 Content-Type charset 매개변수와 Content-Language 헤더를 통해 알려줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트는 서버에게 자신이 어떤 언어를 이해할 수 있고 선호하는 지 Accept-Charset과 Accept-Language 헤더를 통해 알려줍니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept-Language: fr, en;q=0.8
Accept-Charset: iso-8859-1, utf-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위 예시는 프랑스어와 영어를 이해할 수 있으며 각 선호도는 1.0(기본값), 0.8이고, 문자집합은 iso-8859-1과 utf-8을 이해할 수 있다는 뜻입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;162-문자집합과-http&quot;&gt;16.2. 문자집합과 HTTP&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1621-charset은-글자를-비트로-변환하는-인코딩이다&quot;&gt;16.2.1. Charset은 글자를 비트로 변환하는 인코딩이다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Charset은 특정 문자 체계의 문자 &amp;lt;-&amp;gt; 비트 둘을 연결해주는 것입니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;11101010 10110000 10000000 &amp;lt;-&amp;gt; 가
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비트 11101010 10110000 10000000를 utf-8로 변환하면 한글 ‘가’가 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Charset 태그는 MIME 문자집합에 표준화되어 있고, IANA가 관리합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Charset은 Content-Type 헤더에 매개변수로 들어갑니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: text/html; charset=utf8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1622-문자집합과-인코딩은-어떻게-동작하는가&quot;&gt;16.2.2. 문자집합과 인코딩은 어떻게 동작하는가&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;비트가 특정 문자체계의 문자로 디코딩 되는 과정은 다음과 같습니다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;비트를 인코딩된 문자집합에 따라 일정 단위로 끊어 문자 코드로 변환합니다.(문자집합에 따라 1글자를 몇 바이트로 계산하는지가 달라지며, 일부 문자집합은 가변적으로 계산하기도 합니다.)&lt;/p&gt;

        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... 11100001 ... -[iso-8859-6]-&amp;gt; 225
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;문자 집합에서 해당 문자 코드가 어떤 문자를 갖는지 찾습니다.&lt;/p&gt;

        &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;225 -[iso-8859-6]-&amp;gt; ف
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP는 해당 문자가 어떻게 표현되는지 관심이 없습니다. 단지 비트 데이터와 어떻게 읽혔으면 좋겠는지를 나타내는 헤더를 전송할 뿐입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비트를 풀어 글자를 표현하는 것은 사용자의 작업 환경(클라이언트 프로그램 및 운영체제)입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1623-잘못된-charset은-잘못된-글자를-낳는다&quot;&gt;16.2.3. 잘못된 charset은 잘못된 글자를 낳는다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;PC를 사용하면서 알수 없는 특수문자들로 가득한 깨진 문서들을 본 적이 있을 것입니다. charset이 잘못되면 클라이언트는 이해할 수 없는 이상한 글자를 보게 됩니다.&lt;/li&gt;
  &lt;li&gt;문자 코드 225는 어떤 문잡집합에서 쓰이느냐에 따라 다양하게 바뀔 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;iso-8859-1 서유럽 문자코드에선 á, iso-8859-6 아랍 코드에선 ف , iso-8859-7 그리스어에선 α, iso-8859-8 히브리어에선 ב 를 보여주게 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1624-표준화된-mime-charset-값&quot;&gt;16.2.4. 표준화된 MIME charset 값&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;특정 문자 인코딩과 특정 코딩된 문자집합의 결합을 MIME charset 이라고 합니다.&lt;/li&gt;
  &lt;li&gt;Content-Type 헤더, Accept-Charset 헤더에서 MIME charset을 사용합니다.&lt;/li&gt;
  &lt;li&gt;MIME charset은 IANA에서 관리합니다.&lt;/li&gt;
  &lt;li&gt;자세한 목록은 &lt;a href=&quot;https://www.iana.org/assignments/character-sets/character-sets.xhtml&quot;&gt;IANA 링크&lt;/a&gt;를 소개해드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1625-content-type-charset-헤더와-meta-태그&quot;&gt;16.2.5. Content-Type charset 헤더와 META 태그&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;웹 서버는 클라이언트에게 MIME charset 태그를 Content-Type 헤더에 담아 보냅니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type : text/html; charset=iso-2022-jp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 Content-Type에 명시되지 않았을 경우 HTML 문서라면 HEAD에서 메타태그를 찾습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;HEAD&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;META&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HTTP-EQUIV=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;CONTENT=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=iso-2022-jp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;META&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;LANG=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TITLE&amp;gt;&lt;/span&gt;Japanese Document&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TITLE&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/HEAD&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;
    ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 HTML문서에 해당 메타태그가 없거나 HTML 문서가 아니라면 텍스트를 스캔하며 문자 인코딩을 추측합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;문자 인코딩 추측에 실패했다면 가장 기본인 iso-8859-1로 간주합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1626-accept-charset-헤더&quot;&gt;16.2.6. Accept-Charset 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트는 모든 문자집합을 지원하진 않습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;따라서 클라이언트는 서버에게 자신은 어떤 문자집합을 지원하는지 알려줄 필요가 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Accept-Charset 헤더를 통해 그 목록과 선호도를 알려줄 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept-Charset: iso-8859-1, utf-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Charset 이라는 응답헤더는 없다는 것에 주의합시다. 응답헤더는 Content-Type의 charset 매개변수가 이미 존재합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;163-다중언어-문자-인코딩에-대한-지침&quot;&gt;16.3. 다중언어 문자 인코딩에 대한 지침&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;문자 체계에 관련한 용어들은 복잡하고 일관성이 없어 배우기 쉽지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1631-문자집합-용어&quot;&gt;16.3.1. 문자집합 용어&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;문자&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;알파벳 각 글자, 숫자, 구두점 등 글쓰기의 최소 단위. Unicode에서 각각의 문자마다 유일한 이름을 부여했습니다. 모든 Unicode 는 &lt;a href=&quot;https://www.unicode.org/charts/&quot;&gt;여기&lt;/a&gt;에서 확인 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;글리프(glyph)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;하나의 글자를 표현하기 위한 여러 형태. 한 문자라도 다양한 글리프가 가능합니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/glyph.png&quot; alt=&quot;glyph.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;코딩된 문자(coded character)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 글자에 할당된 유일한 숫자(문자 코드). 앞서 살펴본 á의 coded character는 225입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;코드 공간(coding space)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문자 코드 값으로 사용하려고 계획해 둔 정수의 범위. 1바이트 문자라면 0~255&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;코드 너비(code width)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 문자 코드의 (고정된 크기의) 비트 개수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;사용 가능 문자집합(character repertoire)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;말 그대로 사용 가능한 문자들의 집합.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;코딩된 문자집합(coded character set)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용 가능 문자집합들의 코딩된 문자 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;문자 인코딩 구조(Character Encoding Schemes)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;숫자로된 문자코드를 비트단위로 인코딩/디코딩 하는 알고리즘.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1632-charset은-형편없는-이름이다&quot;&gt;16.3.2. ‘Charset’은 형편없는 이름이다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;MIME Charset 태그는 사실 문자 집합자체를 의미하는 것이 아닙니다. 비트를 고유한 문자 코드로 맵핑하는 알고리즘의 이름입니다. charset태그에 쓰인 utf8은 utf8 문자 집합자체를 뜻하는게 아니라 비트를 utf8 문자코드로 맵핑하는 알고리즘의 이름입니다.&lt;/li&gt;
  &lt;li&gt;MIME Charset 태그는 ‘문자 인코딩 구조’와 ‘코딩된 문자집합’ 개념을 합친것인데 사실 용어가 애매해지기 시작합니다.&lt;/li&gt;
  &lt;li&gt;이미 ‘문자 인코딩 구조’와 ‘코딩된 문자집합’ 두 개념에 대한 표준이 각각 존재합니다.&lt;/li&gt;
  &lt;li&gt;charset과 관련해선 각 용어들의 의미가 애매하니 charset 관련 문서를 심도있게 다뤄야 한다면 주의해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1633-문자&quot;&gt;16.3.3. 문자&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;문자는 쓰기의 기본 단위입니다.&lt;/li&gt;
  &lt;li&gt;여기서 말하는 문자는 글꼴이나 스타일에 독립적인 유니크하고 추상화된 의미의 문자입니다.&lt;/li&gt;
  &lt;li&gt;사람의 필기체에 따라, 운영체제의 글꼴에 따라 한 문자가 다양한 형태로 표현되지만 모두 같은 문자입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1634-글리프glyphs-연자ligatures-그리고-표현-형태&quot;&gt;16.3.4. 글리프(glyphs), 연자(ligatures) 그리고 표현 형태&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;글리프란 한 문자를 표현하는 다양한 형태입니다. 필기체에 따라, 글꼴에 따라 한 문자에 대해 다양한 글리프가 존재합니다.&lt;/li&gt;
  &lt;li&gt;연자(ligatures)는 쉽게말해 흘려쓰기입니다. 연속된 두 글자를 한 글자처럼 흘려서 쓰는 그런 형태를 연자(ligatures)라고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1635-코딩된-문자집합coded-character-set&quot;&gt;16.3.5. 코딩된 문자집합(Coded Character Set)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;코딩된 문자집합은 각 정수 값들을 하나의 문자에 대응시킵니다.&lt;/li&gt;
  &lt;li&gt;몇몇 코딩된 문자집합들을 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;US-ASCII: 모든 문자집합의 어머니&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1968년 ‘정보교환을 위한 미국 표준 코드’로 표준화된 문자집합입니다.&lt;/li&gt;
  &lt;li&gt;0~127까지만 사용해 코드 공간 전체를 표현하는데 7비트뿐이면 되는 문자집합입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;iso-8859&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유럽의 글자를 표현하기 위한 US-ASCII 의 8비트 확대집합들입니다.&lt;/li&gt;
  &lt;li&gt;8비트 만으론 모든 유럽의 글자를 표현할 수 없어 지역에따라 다른 iso-8859를 제공합니다.
    &lt;ul&gt;
      &lt;li&gt;iso-8859-1 : 서유럽어&lt;/li&gt;
      &lt;li&gt;iso-8859-2 : 중앙 및 동유럽어&lt;/li&gt;
      &lt;li&gt;iso-8859-3 : 남유럽어&lt;/li&gt;
      &lt;li&gt;iso-8859-4 : 북유럽어&lt;/li&gt;
      &lt;li&gt;iso-8859-5 : 키릴어&lt;/li&gt;
      &lt;li&gt;iso-8859-6 : 아랍어&lt;/li&gt;
      &lt;li&gt;iso-8859-7 : 그리스어&lt;/li&gt;
      &lt;li&gt;iso-8859-8 : 히브리어&lt;/li&gt;
      &lt;li&gt;iso-8859-9 : 터키어&lt;/li&gt;
      &lt;li&gt;iso-8859-10 : 노르딕어&lt;/li&gt;
      &lt;li&gt;iso-8859-15 : 새로운 유로 통화 문자를 포함하기 위한 iso-8859-1의 변형&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JIS X 0201&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ASCII를 일본어 가타카나 반각문자로 확장한 문자집합입니다.&lt;/li&gt;
  &lt;li&gt;JIS Roman 이라고도 불립니다.&lt;/li&gt;
  &lt;li&gt;JIs = Japanese Industrial Standard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JIS X 0208 과 JIS X 0212&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JIS X 0201 에서 확장한 가타카나 반각문자는 63개의 표음문자 뿐이었습니다.&lt;/li&gt;
  &lt;li&gt;하지만 일본엔 훨씬 많은 표의문자들이 존재합니다.&lt;/li&gt;
  &lt;li&gt;JIS X 0208은 일본식 한자 6,879개를 추가한 최초의 멀티 바이트 문자집합입니다.&lt;/li&gt;
  &lt;li&gt;JIS X 0212는 6,607개의 문자를 추가했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;UCS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UCS(Universal Character Set)은 전 세계의 모든 글자를 하나의 문자집합으로 통합하려는 표준입니다.&lt;/li&gt;
  &lt;li&gt;UCS는 iso-10646 으로 정의되며&lt;/li&gt;
  &lt;li&gt;우리가 잘 알고있는 Unicode는 UCS 표준을 따르는 상업적인 컨소시엄입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1636-문자-인코딩-구조character-encoding-schemes&quot;&gt;16.3.6. 문자 인코딩 구조(Character Encoding Schemes)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;문자 인코딩 구조란 문자 코드를 비트로, 비트를 문자 코드로 바꾸는 알고리즘입니다.&lt;/li&gt;
  &lt;li&gt;문자 인코딩 구조는 아래 세 종류로 구분할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;고정폭 : 각 문자를 고정된 길이의 비트로 표현합니다. 빠르지만 공간을 낭비할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;가변폭(비모달) : 문자 코드번호 마다 다른 길이의 비트를 사용합니다. 자주 사용되는 문자의 비트를 줄일 수 있고 추가적인 국제 문자들을 여러 바이트로 표현해 1바이트로만 표현하던 문자집합과의 호환성을 유지할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;가변폭(모달) : 모달 인코딩은 여러 가지 문자집합간의 전환을 위해 사용되는 인코딩입니다. 다른 모드로 전환하기 위해 ‘escape’ 패턴을 사용합니다. 복잡한 만큼 처리하는데엔 가장 많은 시간이 걸립니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;몇 가지 인코딩 scheme을 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;8비트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 문자코드를 8비트 값으로 인코딩 합니다. 256개 문자 범위 안에서만 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;UTF-8&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;utf-8은 UCS를 위해 설계된 문자 인코딩 scheme 입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비모달 가변길이 인코딩을 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UTF-8에선 1~3바이트로 문자들이 표현됩니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;인코딩된 첫 바이트의 첫 비트가 0이면 1바이트의 문자입니다. 반대로 1바이트 문자는 첫 비트가 0으로 인코딩 됩니다. 첫 비트가 0이고 나머지 7비트로 문자가 표현되기 때문에 US-ASCII와 호환됩니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xxxxxxx 
01100001 -&amp;gt; 61 -&amp;gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;인코딩된 첫 바이트가 110으로 시작하면 2바이트 문자입니다. 이후 바이트는 10으로 시작합니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;110xxxxx 10xxxxxx
11000010 10100101 -&amp;gt; 194 165 -&amp;gt; ¥
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;인코딩된 첫 바이트가 1110이면 3바이트 문자입니다. 이후 바이트는 10으로 시작합니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1110xxxx 10xxxxxx 10xxxxxx
11101010 10110000 10000000 -&amp;gt; 234 176 128 -&amp;gt; 가
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;iso-2022-jp&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iso-2022-jp는 일본어 인터넷 문서를 위해 널리 사용되는 인코딩입니다.&lt;/li&gt;
  &lt;li&gt;128보다 작은 값으로만 이루어진 가변길이 모달 인코딩입니다.&lt;/li&gt;
  &lt;li&gt;자세한 설명은 생략합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;euc-jp&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;또 하나의 인기있는 일본어 인코딩 입니다.&lt;/li&gt;
  &lt;li&gt;euc는 Extended Unix Code의 약자로, 유닉스에서 아시아 문자를 지원하기 위해 처음 만들어진 문자 인코딩입니다.&lt;/li&gt;
  &lt;li&gt;euc-jp는 비모달 가변 인코딩입니다.&lt;/li&gt;
  &lt;li&gt;역시 자세한 설명은 생략합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;euc-kr&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;euc-kr은 한글 인터넷 문서를 위해 사용되는 가변길이 인코딩입니다.&lt;/li&gt;
  &lt;li&gt;KS X 1003, KS X 1001 두가지 문자 집합을 지원합니다.
    &lt;ul&gt;
      &lt;li&gt;KS X 1003은 US-ASCII의 백슬래쉬를 원화 기호로 치환한 것일 뿐입니다.&lt;/li&gt;
      &lt;li&gt;KS X 1001은 2바이트로 인코딩된 한글, 한자 및 특수문자 집합입니다.&lt;/li&gt;
      &lt;li&gt;KS X 1001은 2,350자를 구현하고 있어 사실 모든 한글을 표현하기에 부족합니다.&lt;/li&gt;
      &lt;li&gt;때문에 한글 ‘채움 문자(fill code, 0xA4 와 0xD4)’를 이용해 초성, 중성, 종성을 합쳐 한 단어를 표현가능하게 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;164-언어-태그와-http&quot;&gt;16.4. 언어 태그와 HTTP&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;언어 태그란 각 언어에 이름을 붙인 짧고 표준화된 문자열 입니다. (영어 - en, 한국어 - ko, 프랑스어 - fr)&lt;/li&gt;
  &lt;li&gt;언어 태그는 표준 언어 뿐 아니라 지역에 따른 언어나(en-US, en-GB) 안 국가내 방언(zh-xiang)을 표현할 수도 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1641-content-language-헤더&quot;&gt;16.4.1. Content-Language 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Language 헤더는 언어 태그를 이용해 해당 콘텐츠가 어떤 언어 사용자를 대상으로 하는지 서술합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Language: ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Language 헤더는 텍스트 문서뿐 아니라 오디오, 동영상 등 특정 언어 사용자를 구분해야 하는 곳이면 어디든 사용할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Language에 여러 언어를 지정할 수도 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Launguage: ko, en
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1642-accept-language-헤더&quot;&gt;16.4.2. Accept-Language 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트는 Accept-Launguage 헤더를 통해 서버에게 자신이 어떤 언어를 선호하는 지 알려줄 수 있습니다.&lt;/li&gt;
  &lt;li&gt;서버가 언어별로 다른 리소스를 제공해줄 수 있을 때 유용합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1643-언어-태그의-종류&quot;&gt;16.4.3. 언어 태그의 종류&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;언어 태그는 일반적인 언어 뿐 아니라 아래와 같이 다양한 언어에 사용될 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;일반적인 언어 : ko, en, fr, es&lt;/li&gt;
      &lt;li&gt;특정 국가의 언어 : en-GB, en-US&lt;/li&gt;
      &lt;li&gt;방언 : no-bok (노르웨이의 book language)&lt;/li&gt;
      &lt;li&gt;지방어 : sgn-US-MA (마서스 비니어드 섬의 수화)&lt;/li&gt;
      &lt;li&gt;그외 다른 언어의 변형이 아닌 표준 언어 : i-navajo (미국 인디언 중 나바호족)&lt;/li&gt;
      &lt;li&gt;비표준 언어 : x-snowboarder-slang (스노우 보드 타는 사람들 슬랭)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1644-서브태그&quot;&gt;16.4.4. 서브태그&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;언어 태그는 ‘ - ‘으로 분리된 하나 이상의 서브태그로 이루어집니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sgn-US-MA (마서스 버니어드 섬의 수화)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;첫 번째 서브태그는 ‘주 서브태그’라고 불리며 표준화 되어 있습니다. a~z 글자만 포함합니다.&lt;/li&gt;
      &lt;li&gt;두 번째 서브태그는 선택적이며 자신만의 이름 표준을 따릅니다. 알파벳, 숫자를 포함하며 최대 8자입니다.&lt;/li&gt;
      &lt;li&gt;세 번째부터의 서브 태그는 따로 표준이 등록되어있지 않습니다. 알파벳, 숫자를 포함하며 최대 8자입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1645-대소문자의-구분-및-표현&quot;&gt;16.4.5. 대소문자의 구분 및 표현&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;모든 태그는 대소문자를 구분하지 않습니다.&lt;/li&gt;
  &lt;li&gt;다만 관용적으로 언어를 나타낼땐 소문자, 국가를 나타낼땐 대문자를 사용합니다.
    &lt;ul&gt;
      &lt;li&gt;‘fr’은 프랑스어로 분류되는 모든 언어를 의미하고, ‘FR’은 국가 프랑스를 의미합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1646-iana-언어-태그-등록&quot;&gt;16.4.6. IANA 언어 태그 등록&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;첫 번째와 두 번째 서브 태그는 여러 표준 문서와 조직에 의해 정의됩니다.&lt;/li&gt;
  &lt;li&gt;IANA에선 RFC 3066 규칙에 따라 표준 언어 태그의 목록을 관리합니다. (&lt;a href=&quot;https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry&quot;&gt;https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;다음 3개의 절에선 RFC 3066의 언어태그 규칙을 소개해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1647-첫-번째-서브태그--이름공간&quot;&gt;16.4.7. 첫 번째 서브태그 : 이름공간&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;첫 번째 서브태그엔 다음과 같은 규칙이 있습니다.
    &lt;ul&gt;
      &lt;li&gt;두 글자라면, ISO-639와 ISO-639-1의 표준 언어 코드입니다.&lt;/li&gt;
      &lt;li&gt;세 글자라면, ISO-639-2 표준과 확장의 표준 언어 코드입니다.&lt;/li&gt;
      &lt;li&gt;‘i’ 라면, IANA에 등록된 언어 코드 입니다.&lt;/li&gt;
      &lt;li&gt;‘x’라면, 특정 개인이나 집단 전용의 비표준 확장 서브태그 입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&quot;&gt;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&lt;/a&gt;에서 ISO-639-1, 2의 목록을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1648-두-번째-서브태그--이름공간&quot;&gt;16.4.8. 두 번째 서브태그 : 이름공간&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;두 번째 서브태그엔 다음과 같은 규칙이 있습니다.
    &lt;ul&gt;
      &lt;li&gt;두 글자라면, ISO-3166에 정의된 국가/지역입니다.&lt;/li&gt;
      &lt;li&gt;3~8 글자라면, IANA에 등록된 것입니다.&lt;/li&gt;
      &lt;li&gt;한 글자라면, 뭔가 잘못된 것입니다.(??? 서양식 조크인가 봅니다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes&quot;&gt;https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes&lt;/a&gt;에서 ISO-3166 목록을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1649-나머지-서브태그--이름공간&quot;&gt;16.4.9. 나머지 서브태그 : 이름공간&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;세 번째와 그 이후의 서브태그는 8자 이하의 알파벳, 숫자로만 이루어져야 한다는것을 제외하면 다른 규칙은 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;16410-선호-언어-설정하기&quot;&gt;16.4.10. 선호 언어 설정하기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;브라우저에서 선호 언어를 설정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;165-국제화된-uri&quot;&gt;16.5. 국제화된 URI&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;책이 작성되던 때의 URI는 오직 US-ASCII만 가능했습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;하지만 현재는 RFC 3986에서 UTF-8 문자를 URI에 이용하는 방법을 명시해 다양한 문자를 문제없이 사용할 수 있습니다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1651-국제적-가독성-vs-의미-있는-문자들&quot;&gt;16.5.1. 국제적 가독성 vs 의미 있는 문자들&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;과거의 URI 설계자들은 URI가 어떤 환경에서도 조작하고 공유하기 쉬웠으면 했고, 동시에 모두가 사용하기 쉽고 기억하기 쉬웠으면 했습니다.&lt;/li&gt;
  &lt;li&gt;하지만 둘은 충돌을 일으켰습니다.&lt;/li&gt;
  &lt;li&gt;조작하고 공유하기 쉽게 하기 위해 US-ASCII 문자셋만을 URI에 허용했는데 이는 비영어권 사람들에겐 매우 불편한 URI가 되었습니다.&lt;/li&gt;
  &lt;li&gt;하지만 URI 설계자들은 모든 문자를 포함해 의미있는 URI를 만드는 것 보다 가독성과 공유 가능성에 더 무게를 두어 US-ASCII 문자셋만 허용하게 됐었습니다.(과거 얘기입니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1652-uri에서-사용될-수-있는-문자들&quot;&gt;16.5.2. URI에서 사용될 수 있는 문자들&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;URI에서 사용될 수 있는 문자들은 US-ASCII의 문자들 중 아래와 같은 것들입니다.
    &lt;ul&gt;
      &lt;li&gt;예약되지 않은 문자 : [  A~Z  a~z  0~9  -  _  .   !  ~  *  ‘  (  )  ]&lt;/li&gt;
      &lt;li&gt;예약된 문자 : [  ;  /  ?  :  @  &amp;amp;  =  +  $  ,  ]&lt;/li&gt;
      &lt;li&gt;이스케이프 : [  % &lt;HEX&gt; &lt;HEX&gt;  ]&lt;/HEX&gt;&lt;/HEX&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1653-이스케이핑과-역이스케이핑unescaping&quot;&gt;16.5.3. 이스케이핑과 역이스케이핑(unescaping)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;URI에선 예약된 문자나 지원하지 않는 문자들을 표현하기위해 ‘이스케이핑’을 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이스케이핑은 %뒤에 해당 문자의 16진수를 붙여 표현하는 것입니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;' ' (공백) -&amp;gt; 32 (US-ASCII) -&amp;gt; %20 (Escaping)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이런 이스케이핑을 퍼센트 인코딩이라고도 부릅니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이스케이핑된 URI를 받으면 반대로 언이스케이핑을 할 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%20 (Escaping) -&amp;gt; 32 (US-ASCII) -&amp;gt; ' ' (공백)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;언이스케이핑을 두 번 하지 않도록 주의합시다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1654-국제-문자들을-이스케이핑-하기&quot;&gt;16.5.4. 국제 문자들을 이스케이핑 하기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;US-ASCII에 없는 국제 문자들을 위와 같은 방법으로 이스케이핑 할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;책이 쓰여질 시점엔 이스케이핑 값이 US-ASCII인 0~127에 들어야 했지만 지금은 아닙니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UTF-8 인코딩 체계를 통해 모든 문자를 이스케이핑 할 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%EA%B0%80 -&amp;gt; 234 176 128 (UTF-8) -&amp;gt; 가
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;166-기타-고려사항&quot;&gt;16.6. 기타 고려사항&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1661-헤더와-명세에-맞지-않는-데이터&quot;&gt;16.6.1. 헤더와 명세에 맞지 않는 데이터&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP 헤더는 반드시 US-ASCII 문자집합으로 이루어져야 합니다.&lt;/li&gt;
  &lt;li&gt;간혹 US-ASCII 문자집합을 벗어나는 문자로 헤더를 구성하는 애플리케이션이 있으니 주의해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1662-날짜&quot;&gt;16.6.2. 날짜&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP 명세에선 GMT 날짜 형식을 명확히 정의하고 있습니다.&lt;/li&gt;
  &lt;li&gt;하지만 역시 날자 형식을 지키지 않는 애플리케이션이 있으니 주의해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1663-도메인-이름&quot;&gt;16.6.3. 도메인 이름&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Internationalizing Domain Name 을 이용해 다양한 문자를 도메인 이름에 포함 시킬 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이는 웹브라우저들이 지원하는 punycode를 통해 가능합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;punycode란 유니코드 문자열을 호스트명에서 사용가능한 문자로 바꾸는 방법으로 RFC 3492에 정의되어 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;한글.com -&amp;gt; xn--bj0bj06e.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;간단한 내용이라 어렵지 않게 읽은 것 같습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>엔터티와 인코딩</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C15/"/>
   <updated>2020-03-24T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드15</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP는 다음과 같은 것들을 보장해줍니다.
    &lt;ul&gt;
      &lt;li&gt;객체가 올바르게 식별되어(콘텐츠의 타입이나 언어 등..) 클라이언트가 콘텐츠를 올바르게 처리할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;객체는 올바르게 압축이 풀릴 것입니다.&lt;/li&gt;
      &lt;li&gt;객체는 항상 최신을 유지할 것입니다.&lt;/li&gt;
      &lt;li&gt;사용자의 요구를 만족시킬 것입니다.&lt;/li&gt;
      &lt;li&gt;네트워크 사이를 빠르고 효율적으로 이동할 것입니다.&lt;/li&gt;
      &lt;li&gt;조작되지 않고 온전히 도착할 것입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;위와 같은 사항들을 보장하기 위해 엔터티와 엔터티 헤더들이 사용됩니다.&lt;/li&gt;
  &lt;li&gt;이번장에서 배울 내용은 위의 사항을 보장하기 위해 사용되는 것들입니다.
    &lt;ul&gt;
      &lt;li&gt;HTTP 메세지 엔터티의 포맷 및 동작방식&lt;/li&gt;
      &lt;li&gt;HTTP가 엔터티 본문크기를 기술하는 방법&lt;/li&gt;
      &lt;li&gt;크기를 줄여주는 콘텐츠 인코딩&lt;/li&gt;
      &lt;li&gt;컨텐츠의 송수신을 위해 수행되는 전송 인코딩(그 중 청크 인코딩)&lt;/li&gt;
      &lt;li&gt;최신 버전을 유지해주기 위한 태그, 라벨, 시간, 체크섬, 검사기, 기타 헤더 필드&lt;/li&gt;
      &lt;li&gt;중단된 다운로드를 중간부터 재개할 수 있게 해주는 범위 요청&lt;/li&gt;
      &lt;li&gt;전에 본 웹페이지를 열때 변경 있는 부분만 요청 할 수 있는 HTTP 델타 인코딩 확장&lt;/li&gt;
      &lt;li&gt;엔터티의 변조를 체크하는 엔터티 본문의 체크섬&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;151-메세지는-컨테이너-엔터티는-화물&quot;&gt;15.1. 메세지는 컨테이너, 엔터티는 화물&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP 메세지가 컨테이너라면 HTTP 엔터티는 그 안의 화물입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.0 200 OK
Server : Netscape-Enterprise/3.6
Date : Sun, 17 Sep 2000 00:01:05 GMT
Content-type : text/plain		-- Entity Header
Content-length : 18			-- Entity Header
					-- CRLF : 엔터티 본문 시작 알림
Hi I'm a message			-- Entity Body
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/1.1 에선 10가지 주요 엔터티 헤더 필드를 정의했습니다.
    &lt;ul&gt;
      &lt;li&gt;Content-Type : 전달된 객체의 종류, 타입&lt;/li&gt;
      &lt;li&gt;Content-Length : 전달되는 메세지의 길이나 크기&lt;/li&gt;
      &lt;li&gt;Content-Language : 전달되는 객체와 가장 잘 대응되는 자연어&lt;/li&gt;
      &lt;li&gt;Content-Encoding : 객체 데이터의 인코딩 방법&lt;/li&gt;
      &lt;li&gt;Content-Location : 요청 시점 기준 객체의 위치&lt;/li&gt;
      &lt;li&gt;Content-Range : 해다 엔터티가 부분 엔터티라면 전체의 어느 부분인지&lt;/li&gt;
      &lt;li&gt;Content-MD5 : 엔터티 본문 콘텐츠에 대한 체크섬&lt;/li&gt;
      &lt;li&gt;Last-Modified : 서버에서 이 콘텐츠가 생성 및 수정된 날&lt;/li&gt;
      &lt;li&gt;Expires : 엔터티 데이터가 신선하지 않은 것으로 간주되는 날짜&lt;/li&gt;
      &lt;li&gt;Allow : 이 리소스에 어느 요청 메서드가 허용되는지&lt;/li&gt;
      &lt;li&gt;ETag : 해당 인스턴스에 대한 고유한 검사기. (엄밀히 말하자면 엔터티 헤더는 아니지만 엔터티와 관련한 중요한 헤더입니다.)&lt;/li&gt;
      &lt;li&gt;Cache-Control : 이 문서가 어떻게 캐시되어야 하는지 (역시 엄밀히 말하자면 엔터티 헤더는 아닙니다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1511-엔터티-본문&quot;&gt;15.1.1. 엔터티 본문&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;엔터티 본문은 가공되지 않은 raw 데이터입니다. 이를 설명해주기 위해 엔터티 헤더가 필요합니다.&lt;/li&gt;
  &lt;li&gt;엔터티 본문은 헤더 필드의 끝을 뜻하는 CRLF 줄 바로 다음부터 시작합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;152-content-length-엔터티의-길이&quot;&gt;15.2. Content-Length: 엔터티의 길이&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Length는 엔터티 본문의 크기를 바이트 단위로 나타냅니다.&lt;/li&gt;
  &lt;li&gt;청크 인코딩으로 전송하지 않는 이상 항상 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;메세지가 중간에 잘렸는지 감지할 때, 지속 커넥션 상황에서 메세지 사이를 올바르게 분할하기 위해 필요합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1521-잘림-검출&quot;&gt;15.2.1. 잘림 검출&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;과거의 HTTP는 커넥션이 닫힌 걸로 메세지가 끝난걸 확인했습니다.&lt;/li&gt;
  &lt;li&gt;Content-Length가 없다면 메세지를 모두 수신하고 정상적으로 커넥션이 닫혔는지, 비정상적으로 닫혀 메세지가 중간에 끊겼는지 알 수 없습니다.&lt;/li&gt;
  &lt;li&gt;캐시가 개입한 상황이라면 캐시는 중간에 잘린 메세지를 캐싱해놓고 계속 클라이언트에게 제공할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1522-잘못된-content-length&quot;&gt;15.2.2. 잘못된 Content-Length&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;잘못된 Content-Length를 가지고 있는건 아예 Content-Length가 없는 것보다 심각한 문제를 야기합니다.&lt;/li&gt;
  &lt;li&gt;HTTP/1.1 에선 클라이언트 프로그램이 잘못된 Content-Length를 받은 사실을 알게되면 사용자에게 알려주도록 되어 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1523-content-length와-지속-커넥션persistent-connection&quot;&gt;15.2.3. Content-Length와 지속 커넥션(Persistent Connection)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;지속커넥션이 기본이된 현재는 Content-Length가 더욱 필수적입니다.&lt;/li&gt;
  &lt;li&gt;한 커넥션으로 여러 메세지가 오가기 때문에 해당 메세지가 언제 끝나는지 알아야 하기 때문입니다.&lt;/li&gt;
  &lt;li&gt;다만, 청크 인코딩을 사용할 시엔 Content-Length가 없을 수 있습니다. 청크 인코딩은 15.6.에서 알아볼 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1524-콘텐츠-인코딩&quot;&gt;15.2.4. 콘텐츠 인코딩&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;콘텐츠가 인코딩 되어 있다면 Content-Length는 인코딩 된 길이를 나타냅니다.&lt;/li&gt;
  &lt;li&gt;간혹 인코딩 전의 Content-Length를 보내는 잘못된 서버도 있으니 주의해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1525-엔터티-본문-길이-판별을-위한-규칙&quot;&gt;15.2.5. 엔터티 본문 길이 판별을 위한 규칙&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;다음은 엔터티 본문의 길이와 끝나는 위치를 판별하는 규칙들입니다. 순서대로 적용되어야 합니다.
    &lt;ol&gt;
      &lt;li&gt;HEAD응답과 같이 본문을 갖는게 금지된 특정 HTTP 메세지에선 Content-Length 헤더가 무시됩니다.&lt;/li&gt;
      &lt;li&gt;메세지가 Transfer-Encoding 헤더를 포함한다면, 엔터티는 ‘0 바이트 청크’라고 불리는 특별한 패턴으로 끝나야 하고 Content-Length는 무시해야 합니다.&lt;/li&gt;
      &lt;li&gt;메세지에 Transfer-Encoding 헤더가 없고 Content-Length 헤더가 있다면 Content-Length헤더는 본문의 길이를 담습니다.&lt;/li&gt;
      &lt;li&gt;메세지가 ‘multipart/byteranges’ 미디어 타입을 사용하고 Content-Length가 없다면 해당 메세지는 각자 스스로 크기를 정의할 것입니다. byterages라는 멀티파트 유형은 자신의 크기를 스스로 정하는 유일한 유형입니다. (수신자가 이를 받아들일 수 있는 능력이 있는지 검증한 후 보내야 합니다.)&lt;/li&gt;
      &lt;li&gt;위의 어느 것에도 해당되지 않으면 엔터티는 커넥션이 닫힐 때 끝납니다.&lt;/li&gt;
      &lt;li&gt;HTTP/1.0과의 호환을 위해, 엔터티 본문을 갖고 있는 HTTP/1.1 &lt;strong&gt;요청&lt;/strong&gt;은 반드시 Content-Length도 갖고 있어야 합니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;153-엔터티-요약&quot;&gt;15.3. 엔터티 요약&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;메세지가 전송중 변조 되는 경우를 감지하기 위해 송신자가 메세지 본문에 대한 체크섬을 만들어 보냅니다.&lt;/li&gt;
  &lt;li&gt;수신자는 자신이 받은 본문으로 체크섬을 만들어 송신자가 보낸 체크섬과 비교해 메세지의 변조 여부를 알아냅니다.&lt;/li&gt;
  &lt;li&gt;해당 방법은 엔터티의 본문과 엔터티 요약 헤더를 모두 교체하는 악의적인 공격은 막을 수 없지만 의도치 않게 메세지가 변경되는 것을 감지할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;엔터티는 ‘원문 -&amp;gt; 콘텐츠 인코딩 -&amp;gt; 전송 인코딩’ 순으로 인코딩 되는데 체크섬을 위한 요약은 콘텐츠 인코딩이 된 다음, 전송 인코딩이 되기 전에 일어납니다.&lt;/li&gt;
  &lt;li&gt;Content-MD5 헤더는 엔터티 본문에 MD5 알고리즘을 적용해 얻은 요약을 보여줍니다. (하지만 MD5 요약은 잘 쓰이지 않습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;154-미디어-타입과-차셋charset&quot;&gt;15.4. 미디어 타입과 차셋(Charset)&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Content-Type 헤더엔 엔터티 본문의 MIME 타입이 기술됩니다.&lt;/li&gt;
  &lt;li&gt;MIME 타입은 Internet Assigned Numbers Authority, IANA 에서 관리합니다.&lt;/li&gt;
  &lt;li&gt;MIME 타입은 원본 엔터티 본문의 타입을 명시하기 때문에 콘텐츠 인코딩을 거치더라도 인코딩 전의 타입을 명시해야 합니다.&lt;/li&gt;
  &lt;li&gt;MIME 타입은 ‘maintype/subtype’으로 나타내지며 자주 쓰이는 MIME 타입들은 아래와 같습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;미디어 타입&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;text/html&lt;/td&gt;
      &lt;td&gt;HTML문서&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;text/plain&lt;/td&gt;
      &lt;td&gt;플레인 텍스트 문서&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image/gif&lt;/td&gt;
      &lt;td&gt;GIF 이미지&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;image/jpeg&lt;/td&gt;
      &lt;td&gt;JPEG 이미지&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;audio/x-wav&lt;/td&gt;
      &lt;td&gt;WAV 음향 데이터를 포함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;model/vrml&lt;/td&gt;
      &lt;td&gt;3차원 VRML 모델&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;application/vnd.ms-powerpoint&lt;/td&gt;
      &lt;td&gt;MS 파워포인트&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;multipart/byteranges&lt;/td&gt;
      &lt;td&gt;여러 부분으로 나뉜 엔터티 본문 중 특정 범위(바이트 단위)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;message/http&lt;/td&gt;
      &lt;td&gt;완전한 HTTP 메세지 (TRACE 메서드에서 사용)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1541-텍스트-매체를-위한-문자-인코딩&quot;&gt;15.4.1. 텍스트 매체를 위한 문자 인코딩&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 타입 안에서도 더 자세히 기술하기 위해 매개변수를 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;아래와 같이 charset으로 html의 인코딩 타입을 알려줄 수 있습니다. charset에 대해선 16장에서 더 자세히 다룹니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: text/html; charset=iso-8859-4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1542-멀티파트-미디어-타입&quot;&gt;15.4.2. 멀티파트 미디어 타입&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;멀티파트 타입은 여러 메세지가 하나의 복합 메세지로 보내지는 것입니다. 각 메세지는 자신을 서술하는 헤더를 갖습니다.&lt;/li&gt;
  &lt;li&gt;멀티파트 본문은 주로 HTML form 제출이나 문서의 일부분을 전송하는 경우에만 쓰입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1543-멀티파트-폼-제출&quot;&gt;15.4.3. 멀티파트 폼 제출&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP form 을 이용해 텍스트 및 파일 등을 같이 전송 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;HTTP form에 2개의 input 태그가 있고 1개엔 텍스트 ‘Sally’가, 1개엔 ‘imagefile.gif’라는 이미지 파일을 담아 전송하는 상황을 가정합시다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: multipart/form-data; boundary=AaB03x
--AaB03x
Content-Disposition: form-data; name=&quot;submit-name&quot;
Sally
--AaB03x
Content-Disposition: form-data; name=&quot;files&quot;
Content-Type: multipart/mixed; boundary=BbC04y
--BbC04y
Content-Disposition: file; filename=&quot;essayfile.txt&quot;
Content-Type: text/plain
...contents of essayfile.txt...
--BbC04y
Content-Disposition: file; filename=&quot;imagefile.gif&quot;
Content-Type: image/gif
Content-Transfer-Encoding: binary
...contents of imagefile.gif...
--BbC04y--
--AaB03x-- 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위와 같은 메세지를 보내게 되는데 위의 Content-Type헤더의 boundary가 각 메세지들의 구분자로 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1544-멀티파트-범위-응답&quot;&gt;15.4.4. 멀티파트 범위 응답&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;멀티파트로 응답이 올 수도 있습니다. 이 경우 요청에 따라 각각 다른 범위의 응답이 올 수 있는데 15.9.에서 자세히 다루겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;155-콘텐츠-인코딩&quot;&gt;15.5. 콘텐츠 인코딩&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;전송 시간을 줄이기 위해, 콘텐츠를 암호화 하기 위해 등 여러 이유로 콘텐츠를 보내기전 인코딩을 수행할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1551-콘텐츠-인코딩-과정&quot;&gt;15.5.1. 콘텐츠 인코딩 과정&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;콘텐츠 인코딩의 개략적인 과정은 다음과 같습니다
    &lt;ol&gt;
      &lt;li&gt;웹 서버가 Content-Type과 Content-Length를 포함해 원본 응답 메세지를 만듭니다.&lt;/li&gt;
      &lt;li&gt;콘텐츠 인코딩 서버(원 서버가 될 수도 있고 프록시가 될 수도 있습니다.)에서 인코딩된 메세지를 만듭니다. Content-Type은 같지만 Content-Length는 다를 수 있습니다. Content-Encoding 헤더에 인코딩 방식을 추가해 알려줍니다.&lt;/li&gt;
      &lt;li&gt;인코딩된 콘텐츠를 전송합니다.&lt;/li&gt;
      &lt;li&gt;수신한 클라이언트는 Content-Encoding에서 적절한 디코딩 방법을 찾아 디코딩합니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1552-콘텐츠-인코딩-유형&quot;&gt;15.5.2. 콘텐츠 인코딩 유형&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP에선 몇 가지 표준 인코딩 유형을 정하고 있고, 확장 인코딩으로 추가하는 것도 가능합니다.&lt;/li&gt;
  &lt;li&gt;각 인코딩 유형은 IANA에서 관리하고 있습니다.&lt;/li&gt;
  &lt;li&gt;주로 쓰이는 콘텐츠 인코딩은 다음과 같습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;콘텐츠 인코딩&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;gzip&lt;/td&gt;
      &lt;td&gt;GNU zip 인코딩. 특히 많이 쓰이는 압축 알고리즘&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;compress&lt;/td&gt;
      &lt;td&gt;유닉스 파일 압축 프로그램인 ‘compress’가 실행됨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;deflate&lt;/td&gt;
      &lt;td&gt;zlib 포맷으로 압축&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;identity&lt;/td&gt;
      &lt;td&gt;엔터티에 어떤 인코딩도 수행되지 않음. Content-Encoding 헤더가 없다면 이 값으로 간주&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1553-accept-encoding-헤더&quot;&gt;15.5.3. Accept-Encoding 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Accept-Encoding 헤더를 통해 클라이언트가 자신이 선호하는 인코딩 방법을 서버에게 알려줄 수 있습니다.&lt;/li&gt;
  &lt;li&gt;Accept-Encoding 헤더가 없다면 어떤 인코딩이든 받을 수 있는 것으로 간주합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept-Encoding : compress, gzip
Accept-Encoding : 
Accept-Encoding : *
Accept-Encoding : compress;q=0.5, gzip;q=1.0
Accept-Encoding : gzip;q=1.0, identity;q=0.5, *;q=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;각 인코딩 방법은 ‘, ‘ 로 구분되며 ‘ * ‘는 ‘그외 모두’를 의미합니다.&lt;/li&gt;
  &lt;li&gt;인코딩 방법에 ‘ ; ‘를 구분자로 두고 설정한 q값은 선호도를 나타냅니다. 0은 선호하지 않음, 1은 선호함을 뜻합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;156-전송-인코딩과-청크-인코딩&quot;&gt;15.6. 전송 인코딩과 청크 인코딩&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 알아본 콘텐츠 인코딩은 콘텐츠의 포맷과 연관되어 있으며 엔터티 본문을 인코딩 합니다.&lt;/li&gt;
  &lt;li&gt;지금 알아볼 전송 인코딩은 콘텐츠의 포맷과는 무관하며 네트워크를 통해 전송되기 위해 본문만이 아니라 메세지 전체에 구조적인 변경을 하는 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1561-안전한-전송&quot;&gt;15.6.1. 안전한 전송&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;모든 프로토콜에서 전송 인코딩은 ‘안전한 전송’을 위해 존재했습니다.&lt;/li&gt;
  &lt;li&gt;HTTP에선 ‘안전한 전송’의 초점을 다른데에 맞추고 있습니다. HTTP에서 메세지의 본문이 문제를 일으키는 경우는 몇가지 밖에 없는데 그중 두가지는 아래와 같습니다. (책 원문을 읽어봐도 뭔가 내용이 매끄럽지가 않습니다.)
    &lt;ul&gt;
      &lt;li&gt;알 수 없는 크기 : 몇몇 인코더는 콘텐츠를 생성하기 전에 메세지 본문의 최종 크기를 판단 할 수 없습니다. Content-Length를 정해줄 수 없기 때문에 데이터의 끝을 알리는 특별한 꼬리말을 붙이기도 하는데 지속 커넥션 상에서 문제를 일으킬 수 있습니다.&lt;/li&gt;
      &lt;li&gt;보안 : 요즘은 SSL 같이 전송계층 위에서 보안이 이루어지기 때문에 보안을 위한 전송 인코딩은 잘 이루어지지 않지만, 전송 인코딩으로 메세지를 알아보기 어렵게 뒤섞기도 했었습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1562-transfer-encoding-헤더&quot;&gt;15.6.2. Transfer-Encoding 헤더&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;전송 인코딩을 위해 사용되는 헤더는 두 개 뿐입니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Transfer-Encoding : 안전한 전송을 위해 어떤 인코딩이 사용됐는지 클라이언트에게 알려줍니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Transfer-Encoding: chunked
Server: Apache/3.0
... 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;TE : 클라이언트가 서버에게 자신이 어떤 전송 인코딩을 사용할 수 있는지 알려줍니다. Accept-Encoding 처럼 q로 표현되는 선호도를 가질 수 있습니다. 다만 HTTP/1.1에선 chucked 인코딩엔 0.0의 q를 갖는걸 허용하지 않습니다.&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /new_products.html HTTP/1.1
Host: www.joes-hardware.com
User-Agent: Mozilla/4.61 [en] (WinNT; I)
TE: trailers;q=0.5, chunked;q=1.0
... 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1563-청크-인코딩&quot;&gt;15.6.3. 청크 인코딩&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;청크 인코딩이란 한 메세지를 일정 크기의 청크로 쪼개 순차적으로 전송하는 방법입니다.&lt;/li&gt;
  &lt;li&gt;일정 크기로 쪼개 보내기 때문에 메세지 전체 크기를 알 필요가 없습니다.&lt;/li&gt;
  &lt;li&gt;동적 생성되는 컨텐츠에 유용하게 사용됩니다.&lt;/li&gt;
  &lt;li&gt;메세지 전체를 다루는 전송 인코딩의 하나이며, 본문만 다뤘던 멀티파트 인코딩과 헷갈리면 안됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;청크와 지속 커넥션&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;지속 커넥션은 메세지간의 구분 지점을 알아야 하기 때문에 Content-Length를 반드시 알아야 했습니다.&lt;/li&gt;
  &lt;li&gt;하지만 콘텐츠가 동적으로 생성되면 보내기 전에 Content-Length를 알아내기 힘듭니다.&lt;/li&gt;
  &lt;li&gt;청크 인코딩은 동적으로 생성되는 본문의 일부를 버퍼에 담다가 모인 덩어리를 보냅니다.&lt;/li&gt;
  &lt;li&gt;생성되는 모든 본문을 전송할때까지 반복하며 크기가 0인 청크로 본문이 끝났음을 알립니다.&lt;/li&gt;
  &lt;li&gt;각 청크는 아래와 같이 16진수로 표현된 바이트 길이와 CRLF, 데이터로 이루어져 있습니다.&lt;/li&gt;
  &lt;li&gt;마지막엔 길이가 0인 청크를 보내 전송이 끝났음을 알려야 합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 청크 인코딩된 데이터를 서버로 보낼 수도 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/chuncked.png&quot; alt=&quot;chuncked.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;청크 인코딩된 메세지의 트레일러&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;트레일러란 메세지가 만들어지기 시작할 땐 값을 알수 없는 헤더들을 담는 곳입니다.(Contetn-MD5 헤더의 경우 문서가 생성되어야 요약을 계산할 수 있습니다.)&lt;/li&gt;
  &lt;li&gt;트레일러는 청크 메세지 끝에 따라올 수 있습니다.&lt;/li&gt;
  &lt;li&gt;아래 두 조건 중 하나를 만족하면 트레일러를 추가할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트의 TE 헤더에 트레일러를 받아들일 수 있음이 명시된 경우&lt;/li&gt;
      &lt;li&gt;트레일러에 있는 정보들이 클라이언트가 무시하고 버려도 되는 경우(선택적인 메타데이터들)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1564-콘텐츠와-전송-인코딩의-조합&quot;&gt;15.6.4. 콘텐츠와 전송 인코딩의 조합&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;콘텐츠 인코딩과 전송 인코딩은 함께 사용될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/contents_transfer_encoding.png&quot; alt=&quot;contents_transfer_encoding.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1565-전송-인코딩-규칙&quot;&gt;15.6.5. 전송 인코딩 규칙&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;전송 인코딩을 사용할 때 아래와 같은 규칙을 지켜야 합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;메세지가 커넥션 종료로 끝나는 경우를 제외하면, 전송 인코딩엔 반드시 ‘chunked’가 포함되어야 합니다.&lt;/li&gt;
      &lt;li&gt;청크 전송 인코딩을 사용할 때, 반드시 마지막 청크 전송 인코딩이 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;청크 전송 인코딩은 메세지 본문에 한 번 이상 적용 되어야 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전송 인코딩은 HTTP/1.1에서 등장한 인코딩이기 때문에 이전 버전의 어플리케이선과 통신해야 할 땐 주의해야 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;157-시간에-따라-바뀌는-인스턴스&quot;&gt;15.7. 시간에 따라 바뀌는 인스턴스&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;우리가 요청하는 많은 웹 객체(web object)들은 동적입니다.&lt;/li&gt;
  &lt;li&gt;요청을 받을 때 마다 한 웹 객체에서 만들어지는 리소스를 각각 다른 인스턴스라고 생각한다면 매번 바뀌는 인스턴스를 다루기 위한 방법이 필요합니다.&lt;/li&gt;
  &lt;li&gt;이런 방법들을 ‘인스턴스 조작(instance manipulation)’이라 부르며 대표적인 예가 ‘범위 요청’과 ‘델타 인코딩’입니다.&lt;/li&gt;
  &lt;li&gt;두 방법 모두 클라이언트가 갖고 있는 리소스 사본이 서버가 가진 것과 같은지 판단하고 다르다면 새 인스턴스를 요청하는 방법입니다. 각각 15.9, 15.10에서 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;158-검사기validator와-신선도&quot;&gt;15.8. 검사기(Validator)와 신선도&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트는 리소스를 받으면 해당 리소스를 캐시에 저장하고 다음 요청은 캐시에서 받아옵니다.&lt;/li&gt;
  &lt;li&gt;캐시한 문서가 만료되면 서버에 다시 요구해야 합니다. 문서가 변경되었다면 새로 받을 것이고, 변경되지 않았다면 다시 받지 않을 것입니다.&lt;/li&gt;
  &lt;li&gt;위 과정을 수행하기 위해 ‘조건부 요청’이라는 요청을 사용합니다.&lt;/li&gt;
  &lt;li&gt;조건부 요청은 클라이언트가 서버에게 자신이 갖고 있는 리소스의 버전을 말해주고 Validator를 통해 자신의 사본이 유효하지 않으면 서버에게 리소스를 요청합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1581-신선도&quot;&gt;15.8.1. 신선도&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;신선도에 대해선 7장에서 많이 알아봤습니다.&lt;/li&gt;
  &lt;li&gt;받은 리소스 사본이 신선한 기간을 알려주기 위해 Expires 헤더와 Cache-Control 헤더를 사용합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expires&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Expires 헤더는 문서가 만료되는 절대 시간을 나타냅니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expires : Sun Mar 18 23:59:12 GMT 2001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expires 헤더를 사용하기 위해 NTP(Network Time Protocol)등의 방법으로 클라이언트와 서버의 시간을 동기화 시켜야 하기 때문에 상대시간을 사용하는 Cache-Control을 더 많이 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cache-Control 헤더는 문서의 최대 수명을 초단위로 나타냅니다.&lt;/li&gt;
  &lt;li&gt;또한 Cache-Control과 함께 사용되는 파라미터들이 많기 때문에 더 자세히 신선도를 다룰 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;지시자&lt;/th&gt;
      &lt;th&gt;메세지 타입&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;no-cache&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no-store&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max-age&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max-stale&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;min-fresh&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no-transform&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;only-if-cached&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no-cache&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no-store&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;no-transform&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;must-revalidate&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;proxy-revalidate&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;max-age&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s-max-age&lt;/td&gt;
      &lt;td&gt;응답&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1582-조건부-요청과-검사기&quot;&gt;15.8.2. 조건부 요청과 검사기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;신선도가 만료됐을 뿐 아직 리소스가 바뀌지 않았을수도 있기 때문에 신선도가 만료되었을 때마다 항상 서버에서 새로 리소스를 받아오는건 비효율적입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조건부 요청을 통해 실제로 리소스가 바뀐 경우에만 사본을 받아올 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조건부 요청은 주로 ‘If-‘로 시작되는 헤더를 통해 구현됩니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /announce.html HTTP/1.0
If-Modified-Since: Sat, 29 Jun 2002, 14:30:00 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;조건부 요청은 쓰인 헤더에 따라 특정 검사기(Validator)를 통해 검사됩니다. (검사기는 아래 표 외에도 유연하게 선택될 수 있습니다.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;요청 유형&lt;/th&gt;
      &lt;th&gt;검사기&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Modified-Since&lt;/td&gt;
      &lt;td&gt;Last-Modified&lt;/td&gt;
      &lt;td&gt;지난번 Last-Modified 응답 헤더에 있던 시각에 마지막으로 수정된 버전이 아니라면 리소스의 사본을 보내라&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Unmodified-Since&lt;/td&gt;
      &lt;td&gt;Last-Modified&lt;/td&gt;
      &lt;td&gt;지난번 Last-Modified 응답 헤더에 있던 시각에 마지막으로 수정된 버전에서 변한 것이 없다면 리소스의 사본을 보내라&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Match&lt;/td&gt;
      &lt;td&gt;ETag&lt;/td&gt;
      &lt;td&gt;지난번 ETag 응답 헤더에 들어있었던 것과 엔터티 태그가 같다면, 리소스의 사본을 보내라&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-None-Match&lt;/td&gt;
      &lt;td&gt;ETag&lt;/td&gt;
      &lt;td&gt;지난번 ETag 응답 헤더에 들어이썽ㅆ던 것과 엔터티 태그가 다르다면, 그 리소스의 사본을 보내라.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP는 검사기를 약한 검사기와 강한 검사기로 나눕니다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;약한 검사기&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;약한 검사기는 인스턴스를 식별하지 못할 수도 있습니다.&lt;/li&gt;
      &lt;li&gt;예시로는 바이트 크기가 있습니다. 실제로 내용이 변경 되었지만 바이트 크기는 변하지 않을 수도 있습니다.&lt;/li&gt;
      &lt;li&gt;Last-Modified는 가장 작은 단위가 1초이기 때문에 약한 검사기에 속합니다.(1초 안에도 여러번 바뀔 수 있기 때문에)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;강한 검사기&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;강한 검사기는 항상 인스턴스를 식별할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;예시로는 리소스에 대한 암호 체크섬, 버전번호 등이 있습니다.&lt;/li&gt;
      &lt;li&gt;ETag엔 주로 매 변경마다 구분되는 값을 넣기 때문에 강한 검사기에 속합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;한편, 사소한 변경이라 모든 클라이언트가 굳이 안받아도 되는 경우가 있습니다. 이땐 서버에서 ‘W/’를 붙여 ‘약한’ 엔터티임을 알려줍니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /annouce.html HTTP/1.1
If-None-Match: W/&quot;v4.0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;159-범위-요청&quot;&gt;15.9. 범위 요청&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트는 문서의 일부분이나 특정 범위만 요청할 수도 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;중간에 실패한 다운로드를 중간 지점부터 받을때, P2P 프로그램에서 여러 사용자로부터 파일의 조각들을 가져올때 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래와 같이 Range 헤더를 통해 받을 범위를 명시해 요청합니다.(클라이언트의 입장에선 문서의 총 크기를 모르기 때문에 끝나는 바이트는 생략해도 됩니다.)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /bigfile.html HTTP/1.1
Host: www.joes-hardware.com
Range: bytes=4000-
User-Agent: Mozilla/4.61 [en] (WinNT; I)
... 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;많은 서버가 범위 요청을 받아들일 수 있지만 아닌 곳도 있습니다. 서버가 자신이 범위 요청을 받을 수 있는 지 명시하고 싶다면 아래와 같이 Accept-Range 헤더를 통해 알려줄 수 있습니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Date: Fri, 05 Nov 1999 22:35:15 GMT 
Server: Apache/1.2.4
Accept-Ranges: bytes
... 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;범위 요청은 객체의 특정 인스턴스중 일부를 주고받는 것이기 때문에 인스턴스 조작의 일종입니다.&lt;/li&gt;
  &lt;li&gt;또한, 인스턴스 조작이기 때문에 클라이언트와 서버가 같은 버전의 문서를 가지고 있을 때만 의미가 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1510-델타-인코딩&quot;&gt;15.10. 델타 인코딩&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;15101-인스턴스-조작-델타-생성기-그리고-델타-적용기&quot;&gt;15.10.1. 인스턴스 조작, 델타 생성기 그리고 델타 적용기&lt;/h4&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;
</content>
 </entry>
 
 <entry>
   <title>보안 HTTP</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C14/"/>
   <updated>2020-03-23T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드14</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;이전 11, 12, 13 장에서 사용자 식별을 위해 필요한 HTTP의 기본 기능을 살펴보았습니다.&lt;/li&gt;
  &lt;li&gt;이번 장에선 디지털 암호화를 이용한 더 적극적인 HTTP 트랜잭션 보안 기술을 알아볼 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;141-http를-안전하게-만들기&quot;&gt;14.1. HTTP를 안전하게 만들기&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;보다 안전한 HTTP 트랜잭션을 위해 다음과 같은 기능을 갖춘 HTTP 보안기술이 필요합니다.
    &lt;ul&gt;
      &lt;li&gt;서버 인증 - 클라이언트는 자신이 대화하고 있는 서버가 위조된 서버가 아닌 진짜 서버임을 알 수 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;클라이언트 인증 - 서버는 자신이 진짜 사용자와 대화하고 있음을 알 수 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;무결성 - 클라이언트와 서버가 주고받는 데이터는 위·변조 되지 않아야 합니다.&lt;/li&gt;
      &lt;li&gt;암호화 - 클라이언트와 서버는 도청에 대한 걱정 없이 대화할 수 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;효율 - 성능이 떨어지는 클라이언트, 서버도 사용할 수 있도록 알고리즘은 효율적이어야 합니다.&lt;/li&gt;
      &lt;li&gt;편재성(Ubiquity) - 거의 모든 클라이언트, 서버에서 지원되어야 합니다.&lt;/li&gt;
      &lt;li&gt;관리상 확장성 - 누구든 어디든지 즉각적인 보안 통신을 할 수 있어야 합니다.&lt;/li&gt;
      &lt;li&gt;적응성 - 현재 알려진 최선의 방법을 지원해야 합니다.&lt;/li&gt;
      &lt;li&gt;사회적 생존성 - 사회의 문화적, 정치적 요구를 만족시켜야 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1411-https&quot;&gt;14.1.1. HTTPS&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS는 위의 조건을 만족하는 가장 인기있는 보안기술입니다.&lt;/li&gt;
  &lt;li&gt;넷스케이프에서 만들었으며 거의 모든 주류 브라우저와 서버에서 지원합니다.&lt;/li&gt;
  &lt;li&gt;HTTPS는 아래 그림과 같이 HTTP 하부레벨에 보안계층(SSL, Secure Sockets Layer 또는 TLS, Transport Layer Security)을 추가하는 방식으로 동작합니다.&lt;/li&gt;
  &lt;li&gt;TCP네트워크로 전송되기 전에 암호화 되므로 중간에 가로채 악용하는걸 방지할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/https_layer.png&quot; alt=&quot;https_layer.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실제 보안 작업은 SSL 라이브러리 안에서 이루어지기 때문에 개발자는 TCP 입력/호출을 SSL 호출로 대체하고 몇몇 보안 정보 설정만 하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;142-디지털-암호화&quot;&gt;14.2. 디지털 암호화&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;이번 절에선 HTTPS를 이해하기 위해 암호학에 관련한 개념들은 간단히 짚고 넘어갈 것입니다.&lt;/li&gt;
  &lt;li&gt;우선 아래 개념들을 숙지합시다.
    &lt;ul&gt;
      &lt;li&gt;암호 - 텍스트를 아무나 읽지 못하도록 인코딩하는 알고리즘&lt;/li&gt;
      &lt;li&gt;키 - 암호의 동작을 변경하는 매개변수 (숫자로 되어있습니다.)&lt;/li&gt;
      &lt;li&gt;대칭키 암호 체계 - 인코딩과 디코딩에 다른 키를 사용하는 알고리즘&lt;/li&gt;
      &lt;li&gt;공개키 암호법 - 비밀 메세지를 전달하는 수백만 개의 컴퓨터를 쉽게 만들 수 있는 시스템&lt;/li&gt;
      &lt;li&gt;디지털 서명 - 메세지가 위·변조 되지 않았음을 확인하기 위한 체크섬&lt;/li&gt;
      &lt;li&gt;디지털 인증서 - 신뢰할 만한 조직에 의해 서명되고 검증된 신원 확인 정보&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1421-비밀-코드의-기술과-과학&quot;&gt;14.2.1. 비밀 코드의 기술과 과학&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;역사적으로 암호법(cryptography)는 아래와 같은 목적으로 사용되었습니다.
    &lt;ul&gt;
      &lt;li&gt;주고 받는 사람 외에 다른 사람이 볼 수 없도록 하기 위해&lt;/li&gt;
      &lt;li&gt;메세지의 변조를 방지하기 위해&lt;/li&gt;
      &lt;li&gt;누군가가 정말로 메세지나 트랜잭션의 저자임을 증명하기 위해&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1422-암호cipher&quot;&gt;14.2.2. 암호(cipher)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;암호(cipher) - 메세지를 인코딩/디코딩 하는 방법&lt;/li&gt;
  &lt;li&gt;텍스트 or 평문 - 인코딩 되기 전의 원본 메세지&lt;/li&gt;
  &lt;li&gt;암호문 - 암호가 적용되 인코딩된 메세지&lt;/li&gt;
  &lt;li&gt;율리우스 카이사르가 사용했다는 알파벳 순환 암호(알파벳을 순서대로 n글자씩 미루는것)도 암호의 한 종류입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1423-암호-기계&quot;&gt;14.2.3. 암호 기계&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;초기 암호는 사람이 직접 인코딩하고 디코딩했기 때문이 간단했습니다.&lt;/li&gt;
  &lt;li&gt;기술이 발전하며 복잡한 암호를 빠르게 인코딩/디코딩 하는 기계가 만들어졌습니다.&lt;/li&gt;
  &lt;li&gt;2차 세계대전 당시 독일군의 에니그마 암호 기계가 대표적인 암호 기계 입니다.(컴퓨터가 아닌 실제 물리적 기계)&lt;/li&gt;
  &lt;li&gt;앤런 튜링은 초기 컴퓨터를 이용해 에니그마 암호를 해독했습니다. (영화 이미테이션 게임을 한 번 더 봅시다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1424-키가-있는-암호&quot;&gt;14.2.4. 키가 있는 암호&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 말한 율리우스 카이사르의 알파벳 순환 암호는 알파벳을 몇글자씩 미루느냐에 따라 암호가 달라집니다.
    &lt;ul&gt;
      &lt;li&gt;2개씩 미룬다면 ‘Hello’ -&amp;gt; ‘Jgnnq’, 4개씩 미룬다면 ‘Hello’ -&amp;gt; ‘Lipps’가 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;에니그마 암호 기계도 설정에 따라 암호들이 다르게 인코딩/디코딩 될 수 있습니다.&lt;/li&gt;
  &lt;li&gt;이와 같이 같은 암호 알고리즘을 다르게 동작하게 만드는 매개변수를 ‘키’라고 합니다.&lt;/li&gt;
  &lt;li&gt;키를 이용하면 하나의 암호 기계를 여러 암호 기계로 만들 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1425-디지털-암호&quot;&gt;14.2.5. 디지털 암호&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;에니그마 같은 초기 기계식 암호와 달리 현대의 암호는 디지털 암호입니다.&lt;/li&gt;
  &lt;li&gt;디지털 암호는 기계식 암호와 달리 다음과 같은 특징이 있습니다.
    &lt;ul&gt;
      &lt;li&gt;속도 및 기능에 대한 기계 장치의 한계를 벗어나 복잡한 인코딩/디코딩이 가능해 졌습니다.&lt;/li&gt;
      &lt;li&gt;매우 큰 값의 키를 사용할 수 있어 하나의 암호 알고리즘으로 다른 수 조개의 알고리즘을 만들 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디지털 암호들은 C = E(P, e),  P = D(C, d) 를 따릅니다.
    &lt;ul&gt;
      &lt;li&gt;E : 인코딩 함수, D : 디코딩 함수&lt;/li&gt;
      &lt;li&gt;P : 평문, C : 암호문&lt;/li&gt;
      &lt;li&gt;e : 인코딩 키, d : 디코딩 키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;143-대칭키-암호법&quot;&gt;14.3. 대칭키 암호법&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;현대의 많은 암호법이 대칭키 암호법을 따릅니다.&lt;/li&gt;
  &lt;li&gt;대칭키 암호법이란 인코딩 시 사용하는 키(e)와 디코딩 시 사용하는 키(d)가 값은 암호법입니다. 앞으로 대칭키를 k라고 부르겠습니다.&lt;/li&gt;
  &lt;li&gt;발신자가 k로 평문을 암호화해 암호문을 전송하면 수신자는 공유 하고 있는 k로 암호문을 디코딩합니다.&lt;/li&gt;
  &lt;li&gt;DES, Triple-DES, RC2, RC4 등이 잘 알려진 대칭키 암호 알고리즘입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1431-키-길이와-열거-공격enumeration-attack&quot;&gt;14.3.1. 키 길이와 열거 공격(Enumeration Attack)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;대부분 암호 알고리즘은 소스코드까지 공개되어 있습니다.&lt;/li&gt;
  &lt;li&gt;그렇기 때문에 키가 누설되지 않는 것이 중요합니다.&lt;/li&gt;
  &lt;li&gt;무차별적으로 모든 키 값을 시도해 보는 것을 ‘열거 공격(Enumeration Attack)’이라고 합니다.&lt;/li&gt;
  &lt;li&gt;가능한 키의 갯수가 적다면 열거 공격은 쉽게 성공하지만 키의 길이가 길어질수록 열거 공격에 걸리는 시간은 기하급수적으로 늘어납니다.&lt;/li&gt;
  &lt;li&gt;모든 숫자가 키로 쓰일 수 있을때, 키가 n비트라면 가능한 키의 갯수는 2^n 개가 됩니다.
    &lt;ul&gt;
      &lt;li&gt;40비트라면 2^40(약 1조)&lt;/li&gt;
      &lt;li&gt;128비트라면 약 340,000,0….0,000 (3.4*10^38)개 입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;아래는 1995년 프로세서 기준으로 각 키의 길이마다 얼마의 비용이면 얼마만에 DES 암호를 깨뜨릴수 있는지를 보여줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;공격비용&lt;/th&gt;
      &lt;th&gt;40비트&lt;/th&gt;
      &lt;th&gt;56비트&lt;/th&gt;
      &lt;th&gt;64비트&lt;/th&gt;
      &lt;th&gt;80비트&lt;/th&gt;
      &lt;th&gt;128비트&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$ 100,000&lt;/td&gt;
      &lt;td&gt;2초&lt;/td&gt;
      &lt;td&gt;35시간&lt;/td&gt;
      &lt;td&gt;1년&lt;/td&gt;
      &lt;td&gt;7만년&lt;/td&gt;
      &lt;td&gt;10^19년&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$ 1,000,000&lt;/td&gt;
      &lt;td&gt;200밀리초&lt;/td&gt;
      &lt;td&gt;3.5시간&lt;/td&gt;
      &lt;td&gt;37일&lt;/td&gt;
      &lt;td&gt;7,000년&lt;/td&gt;
      &lt;td&gt;10^18년&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$ 10,000,000&lt;/td&gt;
      &lt;td&gt;20밀리초&lt;/td&gt;
      &lt;td&gt;21분&lt;/td&gt;
      &lt;td&gt;4일&lt;/td&gt;
      &lt;td&gt;700년&lt;/td&gt;
      &lt;td&gt;10^17년&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$ 100,000,000&lt;/td&gt;
      &lt;td&gt;2밀리초&lt;/td&gt;
      &lt;td&gt;2분&lt;/td&gt;
      &lt;td&gt;9시간&lt;/td&gt;
      &lt;td&gt;70년&lt;/td&gt;
      &lt;td&gt;10^16년&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$ 1,000,000,000&lt;/td&gt;
      &lt;td&gt;200마이크로초&lt;/td&gt;
      &lt;td&gt;13초&lt;/td&gt;
      &lt;td&gt;1시간&lt;/td&gt;
      &lt;td&gt;7년&lt;/td&gt;
      &lt;td&gt;10^15년&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.singularity.com/charts/page61.html&quot;&gt;http://www.singularity.com/charts/page61.html&lt;/a&gt;에 따르면 1995년 프로세서의 클록 스피드가 78,040,000 Hz 였고 2016년에 28,751,000,000 Hz로 약 400배 증가했으나 400배 증가로 10^15라는 숫자를 뚫긴 힘들어 보입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1432-공유키-발급하기&quot;&gt;14.3.2. 공유키 발급하기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;대칭키 암호의 단점은 한 쌍의 발신자, 수신자가 유니크한 키를 가지고 있어야 한다는 것입니다.
    &lt;ul&gt;
      &lt;li&gt;한 네트워크 안 N개의 노드가 서로 대화하기 위해선 1개 노드당 N-1개의 키를 가지고 있어야 되고 전체적으로 N^2-N개의 키가 필요합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;144-공개키-암호법&quot;&gt;14.4. 공개키 암호법&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;공개키 암호법은 위와 같은 문제를 해결하기 위한 것입니다.&lt;/li&gt;
  &lt;li&gt;공개키 암호법은 인코딩 키는 공개하되, 디코딩 키는 소유자만 갖는 방법입니다.
    &lt;ul&gt;
      &lt;li&gt;N개의 노드중 1개의 노드가 N-1개의 노드와 대화하기 위해선, N-1개의 노드들이 쓸 1개의 인코딩 키(공개키)와 1개의 노드가 쓸 1개의 디코딩 키(개인키)만 있으면 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공개키 암호화 기술 덕분에 보안 프로토콜이 빠르게 전 세계 모든 컴퓨터에 보급 되었습니다.&lt;/li&gt;
  &lt;li&gt;공개키 인프라(Public-Key Infrastructure, PKI) 표준화 작업이 계속되고 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1441-rsa&quot;&gt;14.4.1. RSA&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;RSA는 유명한 공개키 암호 알고리즘중 하나입니다.&lt;/li&gt;
  &lt;li&gt;평문의 일부, 암호문, 공개키, RSA 소스코드가 주어져도 개인키를 알아내 평문을 얻는 것은 매우 힘든 일입니다.
    &lt;ul&gt;
      &lt;li&gt;RSA는 매우 큰 소수들에 기반하는데 이를 계산하는게 어렵기 때문입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본적인 RSA의 키 생성 방법과 암호화, 복호화 방법은 간단합니다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/RSA_%EC%95%94%ED%98%B8&quot;&gt;https://ko.wikipedia.org/wiki/RSA_암호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1442-혼성-암호-체계와-세션-키&quot;&gt;14.4.2. 혼성 암호 체계와 세션 키&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;공개키 암호 방식은 수많은 키를 다뤄야 한다는 부담을 줄여주지만 알고리즘 자체가 느리다는 단점이 있습니다.&lt;/li&gt;
  &lt;li&gt;따라서 실제론 대칭키 암호와 비대칭키 암호(공개키 암호)를 같이 사용합니다.
    &lt;ul&gt;
      &lt;li&gt;노드 간 안전한 소통 채널을 만들땐 공개키를 사용하고, 만들어진 안전한 채널에서 임시 대칭키를 생성해 나머지 데이터를 주고 받습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;145-디지털-서명&quot;&gt;14.5. 디지털 서명&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 말했듯이 암호는 다른 사람의 탈취를 방지할 뿐 아니라 작성한 저자가 누구인지 알려주고 메세지의 위조를 방지할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;이를 가능하게 해주는 것이 디지털 서명입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1451-서명은-암호-체크섬이다&quot;&gt;14.5.1. 서명은 암호 체크섬이다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;디지털 서명은 메세지에 붙어있는 암호 체크섬입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디지털 서명으로 발신자 확인이나 메세지 위조 확인을 하는 방법은 아래와 같습니다.&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;A가 B에게 요청받아 응답을 주려는 상황입니다.&lt;/li&gt;
      &lt;li&gt;A가 메세지의 요약(digest)과 개인키를 ‘서명함수’에 넣어 서명을 만듭니다.&lt;/li&gt;
      &lt;li&gt;서명을 메세지에 붙여 B에게 보냅니다.&lt;/li&gt;
      &lt;li&gt;B는 가지고 있는 공개키와 서명함수의 역함수로 서명을 풀어 A가 만든 메세지의 요약을 얻습니다.&lt;/li&gt;
      &lt;li&gt;그리고 B 스스로 A와 공유중인 방법으로 메세지의 요약을 만들어냅니다.&lt;/li&gt;
      &lt;li&gt;A로 부터 받은 요약과 B가 만든 요약이 일치하지 않는다면 중간에 메세지가 위조되었거나 메세지의 저자가 A가 아닌 것입니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;146-디지털-인증서&quot;&gt;14.6. 디지털 인증서&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;주민등록증은 국가에서 인증한 국민에 대한 정보가 들어있고 운전면허증은 각 도에서 인증한 운전자의 정보를 담고 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디지털 인증서란 마찬가지로 신뢰할수 있는 기관으로부터 보증 받은 사용자나 회사에 대한 정보를 담고 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1461-인증서의-내부&quot;&gt;14.6.1. 인증서의 내부&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;인증서 내부는 보통 대상의 이름, 유효기간, 발급자와 같은 기본정보와 ‘발급자의 디지털 서명’이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1462-x509-v3-인증서&quot;&gt;14.6.2. X.509 v3 인증서&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;주민등록증, 여권, 운전면허증 등이 모두 담고 있는 정보가 다르듯이 디지털 인증서도 모두 다른 정보를 갖고 있으며 세계적인 단일 표준은 없는 상황입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아직 단일 표준은 없지만 많은 인증서들이 X.509라는 표준화된 서식을 따라 만들어지고 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래가 X.509를 이루는 필드들이며, 각 디지털 인증서들이 모든 필드를 갖진 않습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;필드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;버전&lt;/td&gt;
      &lt;td&gt;이 인증서가 따라는 X.509 인증서 버전의 번호. 요즘은 보통 v3버전&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;일련번호&lt;/td&gt;
      &lt;td&gt;인증기관에 의해 생성된 고유한 정수. CA(Certificate Authority)로부터의 각 인증서는 반드시 고유한 일련 번호를 가져야함.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;서명 알고리즘 ID&lt;/td&gt;
      &lt;td&gt;서명을 위해 사용된 암호 알고리즘.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;인증서 발급자&lt;/td&gt;
      &lt;td&gt;인증서를 발급하고 서명한 기관의 이름. X.500 포맷으로 기록되어 있음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;유효 기간&lt;/td&gt;
      &lt;td&gt;시작일과 종료일로 정의됨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;대상의 이름&lt;/td&gt;
      &lt;td&gt;인증서에 기술된 사람이나 조직과 같은 엔터티. X.500 포맷으로 기록되어 있음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;대상의 공개키 정보&lt;/td&gt;
      &lt;td&gt;인증 대상의 공개키, 공개키에 사용된 알고리즘, 추가 매개변수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;발급자의 고유 ID (선택적)&lt;/td&gt;
      &lt;td&gt;발급자의 이름이 겹치는 경우를 대비한, 인증서 발급자에 대한 선택적인 고유한 식별자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;대상의 고유 ID (선택적)&lt;/td&gt;
      &lt;td&gt;대상의 이름이 겹치는 경우를 대비한, 인증 대상에 대한 선택적인 고유한 식별자&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;확장&lt;/td&gt;
      &lt;td&gt;선택적인 확장 필드. v3이상에서 지원. 각 확장 필드는 중요한 것인지 아닌지가 표시되어야 하고 만약 사용자가 중요한 확장 필드를 이해하지 못한다면 해당 인증서는 거절해야 함.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;인증기관 서명&lt;/td&gt;
      &lt;td&gt;위의 모든 필드에 대한 인증 기관의 디지털 서명.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;X.509 기반 인증서엔 웹 서버 인증서, 클라이언트 이메일 인증서, 소프트웨어 코드사인 인증서 등이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1463-서버-인증을-위해-인증서-사용하기&quot;&gt;14.6.3. 서버 인증을 위해 인증서 사용하기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 웹 브라우저를 이용해 HTTPS로 웹 사이트에 접근할 때 브라우저는 웹 서버에서 디지털 인증서를 가져 옵니다. 디지털 인증서가 없다면 보안 커넥션은 실패합니다.&lt;/li&gt;
  &lt;li&gt;인증서를 받았다면 서명 기관을 검사합니다. 브라우저들은 여러 기관의 인증서가 설치된 채로 배포되기 때문에 서명 기관을 검사할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;서명 기관이 모르는 곳이라면 브라우저는 보통 해당 기관을 신뢰할 수 있는지 사용자에게 물어봅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;147-https의-세부사항&quot;&gt;14.7. HTTPS의 세부사항&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS는 가장 널리 사용되는 HTTP의 보안 버전입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1471-https-개요&quot;&gt;14.7.1. HTTPS 개요&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS는 일반 HTTP 메세지가 TCP 계층으로 가기 전에 암호화 하는 보안 계층입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/https_layer.png&quot; alt=&quot;https_layer.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS는 SSL과 SSL의 상위호환인 TLS로 이루어져 있으나 SSL과 TLS를 모두 이를땐 관행적으로 ‘SSL’이라고 부릅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1472-https-스킴&quot;&gt;14.7.2. HTTPS 스킴&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;웹 서버에게 HTTPS를 사용한다고 말해주기 위해선 URL에 http 스킴이 아닌 https를 사용하면 됩니다.
    &lt;ul&gt;
      &lt;li&gt;http://www.naver.com -&amp;gt; http&lt;strong&gt;s&lt;/strong&gt;://www.naver.com&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;URL이 http 스킴을 갖고 있으면 기본 포트로는 80 포트를 쓰며, https 스킴을 갖고 있다면 443번 포트를 기본값으로 사용합니다.&lt;/li&gt;
  &lt;li&gt;HTTPS에서 보안을 위해 사용하는 SSL 트래픽은 바이너리 트래픽이기 때문에 HTTP와는 완전히 다릅니다.
    &lt;ul&gt;
      &lt;li&gt;SSL 트래픽과 HTTP 트래픽이 모두 80번 포트로 도착하면 대부분의 브라우저는 SSL트래픽을 잘못된 HTTP로 해석하고 커넥션을 닫을 것입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1473-보안-전송-셋업&quot;&gt;14.7.3. 보안 전송 셋업&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS가 동작하는 과정은 다음과 같습니다.
    &lt;ol&gt;
      &lt;li&gt;클라이언트가 서버의 443 포트로 연결합니다.(TCP 커넥션 연결)&lt;/li&gt;
      &lt;li&gt;암호 매개변수와 교환키를 협상하며 SSL 계층을 초기화 합니다.(SSL 핸드셰이크)&lt;/li&gt;
      &lt;li&gt;요청을 보낼 때 TCP로 전송되기전 암호화됩니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1474-ssl-핸드셰이크&quot;&gt;14.7.4. SSL 핸드셰이크&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;HTTPS가 동작하는 과정중 하나인 SSL 핸드셰이크에선 아래와 같은 일이 일어납니다.
    &lt;ul&gt;
      &lt;li&gt;프로토콜 버전 번호 교환&lt;/li&gt;
      &lt;li&gt;양쪽이 알고있는 암호 선택&lt;/li&gt;
      &lt;li&gt;양쪽의 신원을 입증&lt;/li&gt;
      &lt;li&gt;채널을 암호화 하기 위한 임시 세션 키 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SSL 핸드셰이크를 위해선 상당한 양의 데이터를 주고 받아야 하며 꽤나 복잡한 과정이지만 단순화 하면 아래와 같습니다.
    &lt;ol&gt;
      &lt;li&gt;클라이언트가 서버에게 암호 후보들을 보내고 인증서를 요구합니다.&lt;/li&gt;
      &lt;li&gt;서버는 선택된 암호와 인증서를 돌려줍니다.&lt;/li&gt;
      &lt;li&gt;클라이언트가 비밀정보를 보냅니다.&lt;/li&gt;
      &lt;li&gt;클라이언트와 서버는 키를 만듭니다.&lt;/li&gt;
      &lt;li&gt;서로에게 암호화를 시작한다고 말해줍니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1475-서버-인증서&quot;&gt;14.7.5. 서버 인증서&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;SSL은 상호 인증을 지원하지만 클라이언트 인증서는 인트라넷을 제외하면 거의 쓰이지 않습니다.&lt;/li&gt;
  &lt;li&gt;반면 HTTPS는 항상 서버 인증서를 요구합니다.&lt;/li&gt;
  &lt;li&gt;서버 인증서를 받은 클라이언트 소프트웨어는 이 인증서를 검사합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1476-사이트-인증서-검사&quot;&gt;14.7.6. 사이트 인증서 검사&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;많은 웹 브라우저들이 넷스케이프가 제안한 서버 인증서 검사 알고리즘을 기초로해 서버 인증서를 검사합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;과정은 다음과 같습니다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;날짜 검사
        &lt;ul&gt;
          &lt;li&gt;인증서가 유효함을 검사하기 위해 시작 및 종료일을 검사합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서명자 신뢰도 검사
        &lt;ul&gt;
          &lt;li&gt;모든 인증서는 해당 서버를 보증하는 인증 기관에 의해 서명되어 있습니다. 브라우저는 사이트 인증서의 서명자가 신뢰할만한지 검사합니다.&lt;/li&gt;
          &lt;li&gt;브라우저는 배포시에 신뢰할만한 인증 기관의 리스트를 갖고 있습니다. 모르는 서명기관이라면 경고를 띄워줍니다.&lt;/li&gt;
          &lt;li&gt;브라우저는 A가 B를 인증하고, B가 C를 인증했다면 A가 신뢰할 기관일 경우 C도 신뢰할 수 있다고 생각합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서명 검사
        &lt;ul&gt;
          &lt;li&gt;서명 기관이 신뢰할만 하다면 브라우저는 서명 기관의 공개키를 서명에 적용해 인증서의 무결성을 검사합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;사이트 신원 검사
        &lt;ul&gt;
          &lt;li&gt;다른 이의 인증서를 복사하거나 트래픽을 가로채는걸 방지하기 위해 브라우저는 인증서의 도메인 이름과 대화중인 서버의 도메인 이름이 맞는지 검사합니다.&lt;/li&gt;
          &lt;li&gt;서버 인증서엔 보통 단일 도메인 이름이 들어 있지만 종종 서버의 목록이나 와일드카드를 이용한 표현이 들어있는 경우도 있습니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1477-가상-호스팅과-인증서&quot;&gt;14.7.7. 가상 호스팅과 인증서&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;가상 호스팅은 한 서버에 여러 도메인 이름을 쓰는 것입니다.&lt;/li&gt;
  &lt;li&gt;하지만 위에서 봤듯이 서버 인증서는 도메인 이름을 검사하기도 합니다.&lt;/li&gt;
  &lt;li&gt;몇몇 웹 서버 프로그램은 서버당 하나의 인증서만 지원하는데 이런 경우 문제가 발생할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;이렇게 가상 호스팅으로 도메인A, 도메인B를 운영하는데 인증서엔 도메인A만 있는 경우 도메인B로 들어오는 보안 트랜잭션을 도메인A로 리다이렉트 시키는 방법이 있습니다.&lt;/li&gt;
  &lt;li&gt;이 문제 외에도 가상 호스팅 사이트에서 인증서 관리는 까다로울 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;148-진짜-https-클라이언트&quot;&gt;14.8. 진짜 HTTPS 클라이언트&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;SSL은 복잡한 프로토콜입니다. 하지만 SSL을 쉽게 사용할 수 있도록 해주는 오픈 소스 라이브러리들이 존재합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1481-openssl&quot;&gt;14.8.1. OpenSSL&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;OpenSSL은 SSL의 가장 인기있는 오픈 소스 라이브러리입니다.&lt;/li&gt;
  &lt;li&gt;OpenSSL은 SSLeay라는 라이브러리를 계승하였습니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openssl.org/&quot;&gt;https://www.openssl.org/&lt;/a&gt; 에서 받을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1482-간단한-https-클라이언트&quot;&gt;14.8.2. 간단한 HTTPS 클라이언트&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;아래는 OpenSSL을 이용한 간단한 HTTPS 클라이언트 프로그램입니다.&lt;/li&gt;
  &lt;li&gt;서버와 SSL 커넥션을 맺고, 서버의 정보를 출력하고, GET 요청을 보낸뒤 응답을 받아 출력할 것입니다.&lt;/li&gt;
  &lt;li&gt;예외 및 에러 처리가 안되었기 때문에 학습용으로만 사용합시다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;책에 있는 소스를 그대로 가져왔지만 아직 직접 테스트해보진 못했습니다.(c언어, 유닉스 둘 다 익숙지 않아서 입니다. :cry:)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * https_client.c --- very simple HTTPS client with no error checking
 * usage: https_client servername
 */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;memory.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;netinet/in.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
#include &amp;lt;netdb.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;openssl/crypto.h&amp;gt;
#include &amp;lt;openssl/x509.h&amp;gt;
#include &amp;lt;openssl/pem.h&amp;gt;
#include &amp;lt;openssl/ssl.h&amp;gt;
#include &amp;lt;openssl/err.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSL_CTX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSL_METHOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;X509&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_addr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/*========================================*/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (1) SSL 라이브러리 초기화 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*========================================*/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;SSLeay_add_ssl_algorithms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;client_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSLv2_client_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSL_load_error_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_CTX_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 로컬 SSL 컨텍스트 생성&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(1) SSL context initialized&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/*=============================================*/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (2) 서버의 호스트명을 IP 주소로 변환 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*=============================================*/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;host_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gethostbyname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 유닉스 gethostbyname 함수. 호스트명을 IP로 변환&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;bcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(2) '%s' has IP address '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/*=================================================*/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (3) 서버의 443 포트로 TCP 커넥션 연결 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*=================================================*/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 소켓 생성&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;can't connect to server port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(3) TCP connection open to host '%s', port %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_socket_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/*========================================================*/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (4) TCP 커넥션을 통해 SSL 핸드셰이크 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*========================================================*/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* SSL 스택 종점 생성 */&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSL_set_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* SSL 스택을 소켓에 붙임 */&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* SSL 핸드셰이크 시작 */&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(4) SSL endpoint created &amp;amp; handshake completed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/*============================================*/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (5) 협상을 통해 선택된 암호(받아온 암호) 출력 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*============================================*/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(5) SSL connected with cipher: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_get_cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/*========================================*/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (6) 서버 인증서 출력 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*========================================*/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;server_cert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_get_peer_certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(6) server's certificate was received:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X509_NAME_oneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X509_get_subject_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; subject: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X509_NAME_oneline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X509_get_issuer_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; issuer: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/* certificate verification would happen here */&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;X509_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
        
 &lt;span class=&quot;cm&quot;&gt;/*********************************************************/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (7) 핸드셰이크 완료 -&amp;gt; SSL을 통해 HTTP 요청을 보냄 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*********************************************************/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Host: %s:443&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET / HTTP/1.0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;strcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;strcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connection: close&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;strcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;shutdown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* send EOF to server */&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(7) sent HTTP request over encrypted channel:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/**************************************************/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (8) SSL스택에서 HTTP 응답을 읽어옴. */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/**************************************************/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSL_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;inbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(8) got back %d bytes of HTTP response:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;cm&quot;&gt;/************************************************/&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* (9) 커넥션 닫고 정리 */&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/************************************************/&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;SSL_shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSL_free&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;SSL_CTX_free&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(9) all done, cleaned up and closed connection&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;         
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1483-우리의-단순한-openssl-클라이언트-실행하기&quot;&gt;14.8.3. 우리의 단순한 OpenSSL 클라이언트 실행하기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;추후 c와 유닉스에 친해진 뒤 테스트해보고 추가하겠습니다. :sweat_smile:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;149-프록시를-통한-보안-트래픽-터널링&quot;&gt;14.9. 프록시를 통한 보안 트래픽 터널링&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트의 요청은 많은 프록시를 거칩니다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 데이터를 암호화 하기 시작했다면 프록시는 HTTP 헤더들을 읽을 수 없고 다음 홉을 찾을 수 없게 됩니다.&lt;/li&gt;
  &lt;li&gt;이를 위해 사용하는 방법이 HTTPS SSL 터널링입니다.&lt;/li&gt;
  &lt;li&gt;8장에서 살펴본 터널과 내용은 동일합니다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트는 CONNECT 메서드로 프록시에게 터널연결을 요청합니다.&lt;/li&gt;
      &lt;li&gt;프록시가 클라이언트를 검사한 뒤 터널을 수락합니다.&lt;/li&gt;
      &lt;li&gt;클라이언트의 데이터는 목적지 서버로 바로 전송됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;앞선 모든 장들이 그랬지만 이번 장도 한 절 하나하나마다 한 권의 책이 나올 수 있을 내용이었지만 전체적인 개요와 흐름만 알아본 것 같습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>다이제스트 인증</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C13/"/>
   <updated>2020-03-21T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드13</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;다이제스트 인증은 이전 12장에서 살펴본 기본 인증과 호환되는 기본 인증의 대체재입니다.&lt;/p&gt;

&lt;p&gt;기본 인증에서 사용한 base-64 인코딩은 쉽게 디코딩 되는 단점이 있었습니다. 다이제스트 인증은 비밀번호를 인코딩 하는 과정이 비가역적입니다. 다시 디코딩 할 수 없죠.&lt;/p&gt;

&lt;p&gt;그리고 기본 인증에선 인코딩된 비밀번호 자체를 중간에 가로채 악용할 수 있었는데, 다이제스트 인증에선 nonce라는 기술을 사용해 이런 상황을 방지합니다.&lt;/p&gt;

&lt;p&gt;하지만 다이제스트 인증 역시 현재는 거의 쓰이지 않습니다. 다이제스트 인증의 한계 역시 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;131-다이제스트-인증의-개선점&quot;&gt;13.1. 다이제스트 인증의 개선점&lt;/h3&gt;

&lt;p&gt;기본인증에 비해 발전된 다이제스트 인증의 특징은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;비밀번호를 평문으로 전송하지 않습니다.&lt;/li&gt;
  &lt;li&gt;메세지를 중간에 가로채 재현하려는 악의적인 공격을 차단합니다.&lt;/li&gt;
  &lt;li&gt;구현 방법에 따라 메세지 내용 위,변조를 막을 수 있습니다.&lt;/li&gt;
  &lt;li&gt;그 외 몇몇 잘 알려진 형태의 공격을 막습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1311-비밀번호를-안전하게-지키기-위해-요약digest-사용하기&quot;&gt;13.1.1. 비밀번호를 안전하게 지키기 위해 요약(digest) 사용하기&lt;/h4&gt;

&lt;p&gt;다이제스트 인증은 비밀번호를 평문으로 보내지 않고 비밀번호에 대한 지문(fingerprint) 혹은 요약(digest)를 보냅니다. 이 요약(digest)는 비가역적으로 생성되기 때문에 base-64와 같이 디코드 할 수 없습니다.&lt;/p&gt;

&lt;p&gt;다이제스트 인증의 기본적인 동작 과정은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 보호된 리소스를 요청합니다.&lt;/li&gt;
  &lt;li&gt;서버는 401 Unauthorized와 함께 이름과 비밀번호를 요구합니다.&lt;/li&gt;
  &lt;li&gt;사용자가 이름과 비밀번호를 입력하면 클라이언트 프로그램은 비밀번호에 대한 요약을 만들어 서버에게 보냅니다.&lt;/li&gt;
  &lt;li&gt;서버는 요청 받은 요약과 서버가 가지고 있는 비밀번호로 만든 요약을 비교합니다.(서버는 평문 비밀번호가 아닌 다이제스트만 가지고 있을 수도 있습니다.)&lt;/li&gt;
  &lt;li&gt;요약이 맞다면 요청받은 리소스를 제공해줍니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1312-단방향-요약&quot;&gt;13.1.2. 단방향 요약&lt;/h4&gt;

&lt;p&gt;다이제스트 인증에서 사용하는 요약(digest)방법은 비가역적인 단방향 함수이고 어느 길이의 입력이든 일정한 길이의 압축으로 변환합니다.(무한한 경우의 수를 일정 길이로 요약하기 때문에 다른 입력같이 같은 요약을 나타내는 충돌이 발생할 수도 있지만, 이런 충돌이 일어날 확률은 무시할 수 있을 정도로 작습니다.)&lt;/p&gt;

&lt;p&gt;많이 사용되는 요약함수인 MD5 (Message Digest #5)는 임의의 바이트 배열을 128비트로 요약합니다. 128비트는 약 2^128=1,000,000,000,000,000,000,000,000,000,000,000,000,000 가지의 요약을 만들 수 있기 때문에 충돌의 확률은 무시할수 있습니다.&lt;/p&gt;

&lt;p&gt;MD5 출력은 4비트씩 끊어 32자의 16진수 문자로 표현되기도 합니다. 다음은 MD5의 예시입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;입력&lt;/th&gt;
      &lt;th&gt;MD5 요약&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;“Hi”&lt;/td&gt;
      &lt;td&gt;C1A5298F939E87E8F962A5EDFC206918&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“bri:Ow!”&lt;/td&gt;
      &lt;td&gt;BEAAA0E34EBDB072F8627C038AB211F8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“3.1415926535897”&lt;/td&gt;
      &lt;td&gt;475B977E19ECEE70835BC6DF46F4F6DE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“http://www.http-guide.com/index.htm”&lt;/td&gt;
      &lt;td&gt;C617C0C7D1D05F66F595E22A4B0EAAA5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“WE hold these Truths to be self-evident, that all Men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the Pursuit of Happiness—That to secure these Rights, Governments are instituted among Men, deriving their just Powers from the Consent of the Governed, that whenever any Form of Government becomes destructive of these Ends, it is the Right of the People to alter or to abolish it, and to institute new Government, laying its Foundation on such Principles, and organizing its Powers in such Form, as to them shall seem most likely to effect their Safety and Happiness.”&lt;/td&gt;
      &lt;td&gt;66C4EF58DA7CB956BD04233FBB64E0A4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;요약 함수는 보통 ‘암호 체크섬(cryptographic checksums)’ 이라고 불리며, 단방향 해시함수 이거나 지문 함수(fingerprint function) 입니다.&lt;/p&gt;

&lt;h4 id=&quot;1313-재전송-방지를-위한-난스nonce-사용&quot;&gt;13.1.3. 재전송 방지를 위한 난스(nonce) 사용&lt;/h4&gt;

&lt;p&gt;하지만 요약만 가지고는 기본 인증에서 나타난 취약점을 해결하지 못합니다. 중간에 요약을 가로챈다면 그 요약으로 서버에게 요청을 보낼 수 있기 때문입니다. 이런 종류의 공격을 ‘재전송 공격’이라고 합니다.&lt;/p&gt;

&lt;p&gt;재전송 공격을 방지하기 위해 사용되는게 난스(nonce) 입니다. 서버는 클라이언트에게 매 요청마다 바뀌는 값인 난스를 WWW-Authenticate 헤더에 담아 보냅니다.(클라이언트 쪽에서 요약을 만들때 사용한 난스를 보내기도 합니다.)&lt;/p&gt;

&lt;p&gt;난스는 요약이 만들어지기 전 비밀번호에 섞이게 됩니다. 난스를 섞은 비밀번호를 요약으로 만들면 재전송 공격을 방지할 수 있습니다.&lt;/p&gt;

&lt;p&gt;난스를 사용하지 않은 다이제스트 인증은 기본 인증 만큼 보안에 취약합니다.&lt;/p&gt;

&lt;h4 id=&quot;1314-다이제스트-인증-핸드셰이크&quot;&gt;13.1.4. 다이제스트 인증 핸드셰이크&lt;/h4&gt;

&lt;p&gt;다음은 다이제스트 인증과정의 예시입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/digest.png&quot; alt=&quot;digest.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;132-요약-계산&quot;&gt;13.2. 요약 계산&lt;/h3&gt;

&lt;p&gt;다이제스트 인증의 핵심은 공개 정보, 비밀 정보, 난스 값을 조합해 비가역적인 요약(digest)를 만드는 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;1321-요약-알고리즘-입력-데이터&quot;&gt;13.2.1. 요약 알고리즘 입력 데이터&lt;/h4&gt;

&lt;p&gt;요약 알고리즘엔 아래의 요소들이 필요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해시 함수 H(d) : d는 데이터입니다.&lt;/li&gt;
  &lt;li&gt;요약 함수 KD(s, d) : s는 비밀(secret), d는 데이터입니다.&lt;/li&gt;
  &lt;li&gt;보안 정보를 담고 있는 데이터 : 앞으로 A1이라 부릅니다.&lt;/li&gt;
  &lt;li&gt;요청 메세지의 보안 정보가 아닌 데이터 : A2라 부릅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;H와 KD를 사용해 A1과 A2의 요약을 만들어 냅니다.&lt;/p&gt;

&lt;h4 id=&quot;1322-hd와-kdsd-알고리즘&quot;&gt;13.2.2. H(d)와 KD(s,d) 알고리즘&lt;/h4&gt;

&lt;p&gt;해시 함수에 사용되는 알고리즘은 여러가지가 있지만 RFC2617에선 MD5와 MD5-sess(‘sess’=세션)를 사용하며 알고리즘을 명시하지 않았다면 MD5가 기본으로 사용됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;H(d) = MD5(d)&lt;/li&gt;
  &lt;li&gt;KD(s, d) = H(‘s:d’) = MD(‘s:d’)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;요약 함수 KD는 입력받은 비밀정보와 데이터를 콜론으로 연결해 해시 함수 H로 보냅니다. 해시함수 H는 해시 값을 만들기 위해 설정된 알고리즘으로 데이터를 보냅니다.&lt;/p&gt;

&lt;h4 id=&quot;1323-보안-관련-데이터a1&quot;&gt;13.2.3. 보안 관련 데이터(A1)&lt;/h4&gt;

&lt;p&gt;A1이라 불리는 데이터 덩어리는 사용자 이름, 비밀번호, 보호 영역, 난스와 같은 비밀 정보로 이루어져 있습니다. A1을 계산하는 방법 중엔 다음과 같은 방법이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MD5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;모든 요청마다 단방향 해시를 실행함. 사용자이름, 영역, 비밀번호를 콜론으로 연결한 것.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MD5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용자이름, 영역, 비밀번호에 대한 해시를 계산한 뒤에 서버로 부터 받은 난스와 클라이언트 난스(c난스)를 콜론으로 붙인 것입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;알고리즘&lt;/th&gt;
      &lt;th&gt;A1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;MD5&lt;/td&gt;
      &lt;td&gt;A1 = &lt;사용자이름&gt;:&lt;영역&gt;:&lt;비밀번호&gt;&lt;/비밀번호&gt;&lt;/영역&gt;&lt;/사용자이름&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MD5-sess&lt;/td&gt;
      &lt;td&gt;A1 = MD5(&lt;사용자이름&gt;:&lt;영역&gt;:&lt;비밀번호&gt;):&lt;난스&gt;:&lt;c난스&gt;&lt;/c난스&gt;&lt;/난스&gt;&lt;/비밀번호&gt;&lt;/영역&gt;&lt;/사용자이름&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1324-메세지-관련-데이터a2&quot;&gt;13.2.4. 메세지 관련 데이터(A2)&lt;/h4&gt;

&lt;p&gt;A2데이터는 URL, 요청 메서드, 엔터티 본문 같은 보안 관련 정보가 아닌 정보들입니다. A2 역시 요약을 만들어 내기 위해 사용됩니다. RFC2617에선 보호 수준(quality of protection, qop)에 따라 A2의 사용법을 정의하고 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;qop&lt;/th&gt;
      &lt;th&gt;A2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;정의되지 않음&lt;/td&gt;
      &lt;td&gt;&lt;요청 메서드=&quot;&quot;&gt;:&lt;uri 지시자=&quot;&quot; 값=&quot;&quot;&gt;&lt;/uri&gt;&lt;/요청&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;auth&lt;/td&gt;
      &lt;td&gt;&lt;요청 메서드=&quot;&quot;&gt;:&lt;uri 지시자=&quot;&quot; 값=&quot;&quot;&gt;&lt;/uri&gt;&lt;/요청&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;auth-int&lt;/td&gt;
      &lt;td&gt;&lt;요청 메서드=&quot;&quot;&gt;:&lt;uri 지시자=&quot;&quot; 값=&quot;&quot;&gt;:H(&lt;요청 엔터티=&quot;&quot; 본문=&quot;&quot;&gt;)&lt;/요청&gt;&lt;/uri&gt;&lt;/요청&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;uri 지시자 값은 요청줄에서 가져온 요청 URI 입니다.&lt;/p&gt;

&lt;h4 id=&quot;1325-요약-알고리즘-전반&quot;&gt;13.2.5. 요약 알고리즘 전반&lt;/h4&gt;

&lt;p&gt;RFC 2617에선 qop에 따라 두가지 요약 계산 알고리즘을 제시하고 있습니다.&lt;/p&gt;

&lt;p&gt;앞선 13.2.1.~13.2.4. 의 종합이라고 볼 수 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;qop&lt;/th&gt;
      &lt;th&gt;요약 알고리즘&lt;/th&gt;
      &lt;th&gt;비고&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;정의되지 않음&lt;/td&gt;
      &lt;td&gt;KD( H(A1) , &lt;난스&gt;:H(A2) )&lt;/난스&gt;&lt;/td&gt;
      &lt;td&gt;deprecated. RFC2069와의 호환을 위해 남김&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;auth 혹은 auth-int&lt;/td&gt;
      &lt;td&gt;KD( H(A1) , &lt;난스&gt;:&lt;nc&gt;:&lt;c난스&gt;:&lt;poq&gt;:H(A2) )&lt;/poq&gt;&lt;/c난스&gt;&lt;/nc&gt;&lt;/난스&gt;&lt;/td&gt;
      &lt;td&gt;(책이 쓰여질 당시) 선호되는 방법&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1326-다이제스트-인증-세션&quot;&gt;13.2.6. 다이제스트 인증 세션&lt;/h4&gt;

&lt;p&gt;인증 세션이란 말 그대로 한 번의 인증이 유효한 단위입니다.&lt;/p&gt;

&lt;p&gt;서버가 WWW-Authenticate를 인증요구를 하고 클라이언트가 이에 응답을 했다면 인증 세션이 시작됩니다.&lt;/p&gt;

&lt;p&gt;인증 세션은 다른 WWW-Authenticate 인증요구를 받을 때까지 지속됩니다. 클라이언트는 그동안 이름, 비밀번호, 난스, 난스횟수 등 현재 인증 세션에 대한 값들을 기억해야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;1327-사전preemptive-인가&quot;&gt;13.2.7. 사전(preemptive) 인가&lt;/h4&gt;

&lt;p&gt;일반적인 인증은 [요청 -&amp;gt; 인증요청(난스 포함 전송) -&amp;gt; 인증요청에 대한 응답 -&amp;gt; 인증 성공 및 원 요청에 대한 응답] 와 같은 사이클이 반복됩니다.&lt;/p&gt;

&lt;p&gt;사전 인가는 이와 같은 사이클이 반복 될 것임을 예상하고 요청에 대한 응답을 보낼때 다음 요청에 쓰일 난스를 같이 전송 합니다.&lt;/p&gt;

&lt;p&gt;아래의 그림을 보는게 훨씬 도움이 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/preemptive_authorization.png&quot; alt=&quot;preemptive_authorization.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 사전 인가는 HTTP의 기본인증에선 매우 당연한 것입니다. 서버에게 받을 난스가 없기 때문이죠. 하지만 다이제스트 인증에선 난스를 주고받아야 합니다.&lt;/p&gt;

&lt;p&gt;이를 위해 서버는 다음 난스를 아래와 같은 방법으로 다룰 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다음 난스 미리 생성
    &lt;ul&gt;
      &lt;li&gt;Authentication-Info : nextnonce=”&lt;난스값&gt;&quot; 와 같이 다음 난스를 미리 생성해 전해줍니다. 다만 이 방법은 앞장에서 본 회전 지연(latency)을 방지하기 위한 기술은 파이프라이닝과 상충하기 때문에 단점이 더 큽니다.&lt;/난스값&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제한된 난스 재사용
    &lt;ul&gt;
      &lt;li&gt;한 난스를 정해진 횟수, 혹은 짧은 시간 동안 재사용하도록 허락합니다. 이 경우 파이프라이닝과 함께 사용할 수 있습니다. 횟수를 다쓰거나, 시간이 지나면 다시 난스를 받아와야 합니다.&lt;/li&gt;
      &lt;li&gt;다만 이 방법에서 횟수나 시간이 길어진다면 성능은 올라가지만 재사용하고 있는 난스를 중간에 탈취해 사용하는 재전송 공격에 취약해집니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동기화된 난스 생성
    &lt;ul&gt;
      &lt;li&gt;클라이언트와 서버가 공유하고 있는 비밀키를 이용해 클라이언트와 서버가 순차적으로 각자 같은 난스를 생성하도록 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1328-난스-선택&quot;&gt;13.2.8. 난스 선택&lt;/h4&gt;

&lt;p&gt;RFC 2617에선 다음과 같은 가상의 나스 공식을 제안했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BASE64(타임스탬프 H(타임스탬프 : Etag : 개인키))&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;타임 스탬프는 서버에서 생성된 시간 혹은 반복 불가능한 임의의 값이면 됩니다. Etag는 엔터티 태그이며 개인키는 서버만 알고 있는 값입니다.&lt;/p&gt;

&lt;h4 id=&quot;1329-상호-인증&quot;&gt;13.2.9. 상호 인증&lt;/h4&gt;

&lt;p&gt;웹이 발전하며 요청은 여러 프록시를 거치게 되고 그 중 악의적인 프록시의 공격이 있을 수도 있기 때문에 클라이언트가 서버를 인증할 수 있는 방법도 고안되었습니다. 이 방법은 상호 인증이라 부르며 RFC 2617에 포함되었습니다.&lt;/p&gt;

&lt;p&gt;상호 인증은 서버가 클라이언트에게 클라이언트 난스(c난스)를 전송하므로 이루어집니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;133-보호-수준quality-of-protection-향상&quot;&gt;13.3. 보호 수준(Quality of Protection) 향상&lt;/h3&gt;

&lt;h4 id=&quot;1331-메세지-무결성-보호&quot;&gt;13.3.1. 메세지 무결성 보호&lt;/h4&gt;

&lt;h4 id=&quot;1332-다이제스트-인증-헤더&quot;&gt;13.3.2. 다이제스트 인증 헤더&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;134-실제-상황에-대한-고려&quot;&gt;13.4. 실제 상황에 대한 고려&lt;/h3&gt;

&lt;h4 id=&quot;1341-다중-인증요구&quot;&gt;13.4.1. 다중 인증요구&lt;/h4&gt;

&lt;h4 id=&quot;1342-오류-처리&quot;&gt;13.4.2. 오류 처리&lt;/h4&gt;

&lt;h4 id=&quot;1343-보호-공간protection-space&quot;&gt;13.4.3. 보호 공간(Protection Space)&lt;/h4&gt;

&lt;h4 id=&quot;1344-uri-다시-쓰기&quot;&gt;13.4.4. URI 다시 쓰기&lt;/h4&gt;

&lt;h4 id=&quot;1345-캐시&quot;&gt;13.4.5. 캐시&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;135-보안에-대한-고려사항&quot;&gt;13.5. 보안에 대한 고려사항&lt;/h3&gt;

&lt;h4 id=&quot;1351-헤더-부당-변경&quot;&gt;13.5.1. 헤더 부당 변경&lt;/h4&gt;

&lt;h4 id=&quot;1352-재전송-공격&quot;&gt;13.5.2. 재전송 공격&lt;/h4&gt;

&lt;h4 id=&quot;1353-다중-인증-메커니즘&quot;&gt;13.5.3. 다중 인증 메커니즘&lt;/h4&gt;

&lt;h4 id=&quot;1354-사전dictionary-공격&quot;&gt;13.5.4. 사전(dictionary) 공격&lt;/h4&gt;

&lt;h4 id=&quot;1355-악의적인-프록시와-중간자-공격man-in-the-middle-attack&quot;&gt;13.5.5. 악의적인 프록시와 중간자 공격(Man-in-the-Middle Attack)&lt;/h4&gt;

&lt;h4 id=&quot;1356-선택-평문-공격&quot;&gt;13.5.6. 선택 평문 공격&lt;/h4&gt;

&lt;h4 id=&quot;1357-비밀번호-저장&quot;&gt;13.5.7. 비밀번호 저장&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>기본 인증</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C12/"/>
   <updated>2020-03-21T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드12</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;웹 상의 개인정보 보호를 위해 서버는 각 사용자를 식별하고 그 사용자만 볼 수 있거나, 그 사용자에게 허가된 콘텐츠만 보여줍니다.&lt;/p&gt;

&lt;p&gt;이와 같은 일을 하기위해 필요한건 사용자들을 식별하는 일이고 이를 인증이라고 부릅니다. HTTP에선 기본적인 인증 방법을 제공합니다. 이 포스팅이 쓰여지고 있는 요즘엔 HTTP ‘기본 인증’은 거의 안쓰이지만 간단하게 알아보고 가겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;121-인증&quot;&gt;12.1 인증&lt;/h3&gt;

&lt;h4 id=&quot;1211-http의-인증요구응답-프레임워크&quot;&gt;12.1.1. HTTP의 인증요구/응답 프레임워크&lt;/h4&gt;

&lt;p&gt;HTTP는 인증에 필요한 인증요구/응답 프레임워크를 제공합니다. 프레임워크의 동작 과정은 단순합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 인증이 필요한 리소스를 요청&lt;/li&gt;
  &lt;li&gt;서버가 개인 정보를 요구하는 ‘인증요구’로 응답&lt;/li&gt;
  &lt;li&gt;클라이언트 프로그램이 사용자에게 이름, 비밀번호를 물어봄
&lt;img src=&quot;/public/image/Http The Definitive Guide/authentication2.png&quot; alt=&quot;authentication2.png&quot; /&gt;
(크롬에선 이런 식으로 물어봅니다.)&lt;/li&gt;
  &lt;li&gt;사용자가 이름, 비밀번호를 입력하면 서버에게 인증 정보를 담아 다시 요청&lt;/li&gt;
  &lt;li&gt;이름, 비밀번호가 맞다면 서버가 리소스를 전해줌&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1212-인증-프로토콜과-헤더&quot;&gt;12.1.2. 인증 프로토콜과 헤더&lt;/h4&gt;

&lt;p&gt;위 과정에서 쓰이는 헤더들을 알아보겠습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;단계&lt;/th&gt;
      &lt;th&gt;헤더&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;메서드/상태&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;첫 번째 요청에는 인증 정보가 없다.&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;인증요구&lt;/td&gt;
      &lt;td&gt;WWW-Authenticate&lt;/td&gt;
      &lt;td&gt;401 상태코드와 같이 사용되어 인증 정보를 요구함. WWW-Authenticate 헤더에는 접근하고 있는 보안 영역에 대해 설명함.&lt;/td&gt;
      &lt;td&gt;401 Unauthorized&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;인증&lt;/td&gt;
      &lt;td&gt;Authorization&lt;/td&gt;
      &lt;td&gt;이름, 비밀번호를 기술해 다시 요청을 보냄&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;성공&lt;/td&gt;
      &lt;td&gt;Authentication-Info&lt;/td&gt;
      &lt;td&gt;인증 정보가 맞다면 요청한 리소스와 함께 응답. Authentication-Info는 선택적인 헤더인데 여기에 인증 세션에 관한 정보를 넣어 보내는 서버도 있음.&lt;/td&gt;
      &lt;td&gt;200 OK&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/authentication.png&quot; alt=&quot;authentication.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1213-보안-영역&quot;&gt;12.1.3. 보안 영역&lt;/h4&gt;

&lt;p&gt;위에서 WWW-Authenticate헤더는 접근하고 있는 ‘보안 영역’에 대해 설명한다고 했습니다. 웹 서버는 보안이 필요한 문서들을 보안 영역(realm)별로 나눕니다. 회사 내부에서 재무팀이 있고 기술팀이 있다면 해당 리소스들은 해당 팀원들에게만 공개되야 하므로 ‘finance’ realm과 ‘tech’ realm이 있을 수 있습니다. realm에 ‘executive-commitee@company.com’ 처럼 호스트 명을 넣어 사용하기도 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/security_realm.png&quot; alt=&quot;security_realm.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;122-기본-인증&quot;&gt;12.2. 기본 인증&lt;/h3&gt;

&lt;p&gt;HTTP에서 지원하는 인증엔 ‘기본 인증’과 ‘다이제스트 인증’이 있습니다. 그중 기본 인증은 매우 간편합니다.&lt;/p&gt;

&lt;h4 id=&quot;1221-기본-인증의-예&quot;&gt;12.2.1. 기본 인증의 예&lt;/h4&gt;

&lt;p&gt;기본 인증의 과정을 예시와 함께 다시 짚어봅니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 가족 사진인 /family/jeff.jpg를 요청&lt;/li&gt;
  &lt;li&gt;서버가 이름과 비밀번호를 요구하는 401 Authorization Required 응답을 WWW-Authenticate: Basic realm=’family’와 함께 보냄&lt;/li&gt;
  &lt;li&gt;401 응답을 받은 브라우저는 사용자 이름, 비밀번호를 요구하는 대화상자를 띄우고 입력받음
&lt;img src=&quot;/public/image/Http The Definitive Guide/authentication2.png&quot; alt=&quot;authentication2.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;브라우저는 받은 이름과 비밀번호를 ‘:’ 으로 이어 붙이고 base-64 방식으로 인코딩해 Authorization 헤더에 담아 다시 요청 보냄&lt;/li&gt;
  &lt;li&gt;다시 요청 받은 서버는 이를 디코딩해 이름과 비밀번호가 맞는지 확인함. 문제 없다면 200 OK와 함께 요청 받은 문서를 돌려줌&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;기본 인증에선 위에서 살펴본 헤더중 ‘Authentication-Info’ 헤더는 사용되지 않습니다.&lt;/p&gt;

&lt;h4 id=&quot;1222-base-64-사용자-이름비밀번호-인코딩&quot;&gt;12.2.2. Base-64 사용자 이름/비밀번호 인코딩&lt;/h4&gt;

&lt;p&gt;사용자가 이름, 비밀번호를 입력하면 브라우저는 ‘이름:비밀번호’ 를 base-64방식으로 인코딩해 보냅니다. base-64 인코딩은 8비트 이진데이터를 그에 해당하는 64진법 수로 바꾸는 인코딩입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/base64.png&quot; alt=&quot;base64.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0010 1100 -&amp;gt; 44 -&amp;gt; s&lt;/code&gt; 처럼 작동합니다. 이 base64인코딩을 사용하면 이진 데이터, 텍스트, Unicode 문자 등의 데이터를 전송가능한 알파벳 및 숫자로 변환 할 수 있습니다. HTTP 헤더에 사용할 수 없는 특수문자들도 사용할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;1223-프록시-인증&quot;&gt;12.2.3. 프록시 인증&lt;/h4&gt;

&lt;p&gt;이 같은 인증과정을 프록시에서 수행할 수도 있습니다. 프록시에서의 인증은 상태코드와 헤더명만 다르고 절차는 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;웹 서버&lt;/th&gt;
      &lt;th&gt;프록시 서버&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;비인증 상태 코드 : 401&lt;/td&gt;
      &lt;td&gt;비인증 상태 코드 : 407&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WWW-Authenticate&lt;/td&gt;
      &lt;td&gt;Proxy-Authenticate&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Authorization&lt;/td&gt;
      &lt;td&gt;Proxy-Authorization&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Authentication-Info&lt;/td&gt;
      &lt;td&gt;Proxy-Authentication-Info&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;123-기본-인증의-보안-결함&quot;&gt;12.3. 기본 인증의 보안 결함&lt;/h3&gt;

&lt;p&gt;기본 인증은 사용하기 쉽지만 보안상 문제가 많습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;base-64만으로 인코딩 하는건 너무 취약합니다. base-64 인코딩은 애초에 보안 자체가 목적이 아니기 때문에 누구나 쉽게 디코딩 할 수 있습니다.(&lt;a href=&quot;https://www.base64decode.org/&quot;&gt;https://www.base64decode.org/&lt;/a&gt;) 디코딩 해주는 웹 사이트도 많고 시간만 있다면 종이와 펜으로도 디코딩 할 수 있습니다. base-64인코딩은 그저 읽기 힘들게 만들어줄 뿐입니다.&lt;/li&gt;
  &lt;li&gt;base-64가 디코딩 되기도 쉽지만 디코딩을 안하고 인코딩 된 그대로를 가져와 악의적으로 사용할 수도 있습니다. 인코딩된 상태로 가져와 그 문자로 서버에 접속을 시도할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;매 사이트마다 이름과 비밀번호를 다르게 쓰고 기억하는건 매우 번거롭기 때문에 대부분의 사람은 같은 이름, 비밀번호를 많은 사이트에서 같게 사용합니다. 온라인 쇼핑몰에서 탈취한 이름, 비밀번호로 은행 사이트에 접속 시도할 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;프록시가 개입하는 경우 정상적으로 작동하지 않을 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;가짜 위장 서버에 취약합니다. 가짜 서버에서 이름과 비밀번호를 요구하고 탈취해갈 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;기본 인증 방법을 실제 웹사이트에서 사용 못해본 사람들도 많을 것입니다.(제가 그렇습니다.) 기본 인증 방법 자체만으론 문제가 많기 때문에 HTTP에서도 다음장에서 살펴볼 ‘다이제스트 인증’을 만들었고, 14장에서 살펴볼 보안 암호화 기술도 등장하였습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;매우 간단한 장이었습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>클라이언트 식별과 쿠키</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C11/"/>
   <updated>2020-03-20T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드11</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;이번 장에선 사용자를 식별하여 콘텐츠를 개인화하는 기술들을 알아볼 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;111-개별-접촉&quot;&gt;11.1. 개별 접촉&lt;/h3&gt;

&lt;p&gt;HTTP는 익명으로 사용하며 Stateless합니다.(Stateless : 연결 자체에 대한 정보를 가지지 않고, 매 요청은 일회성이고 독립적임) 하지만 웹 서버는 사용자를 식별하고 싶기 때문에 관련 기술들이 개발되었습니다.&lt;/p&gt;

&lt;p&gt;우리가 사용하는 거의 모든 웹 사이트는 사용자를 식별해 사용자에게 맞는 정보를 제공합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개별 인사&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;온라인 쇼핑몰 등이 각 사용자들을 위해 특화된 페이지를 만듭니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;사용자 맞춤 추천&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;온라인 쇼핑몰은 고객이 방문한 페이지, 구매 내역들을 추적해 고객이 원할 것이라 예상되는 상품을 추천해줍니다. 생일과 같이 특별한 날엔 그에 맞는 상품을 제시합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;저장된 사용자 정보&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;인터넷으로 상품을 주문시에 매번 주소와 신용카드 정보를 입력하는건 매우 귀찮은 일입니다. 이런 정보를 각 개인별로 저장해 더 편리하게 이용할 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;세션 추적&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP트랜잭션은 기본적으로 Stateless 합니다. 따라서 사용자를 식별하고 추적하기 위해선 다른 방법이 필요합니다. 뒤로는 그 아래와 같은 사용자를 식별하기 위한 방법들을 알아보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 식별 관련 정보를 전달하는 HTTP 헤더&lt;/li&gt;
  &lt;li&gt;클라이언트 IP 주소 추적&lt;/li&gt;
  &lt;li&gt;사용자 로그인 인증&lt;/li&gt;
  &lt;li&gt;URL에 식별자를 포함하는 fat URL&lt;/li&gt;
  &lt;li&gt;식별 정보를 지속해서 유지하는 쿠키&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;112-http-헤더&quot;&gt;11.2. HTTP 헤더&lt;/h3&gt;

&lt;p&gt;아래 7가지 HTTP 헤더는 사용자에 대한 ‘정보’를 전달하는 헤더들입니다. 각 헤더들은 사용자에 대한 ‘정보’를 전달할 뿐 각 헤더 하나만 가지고 사용자를 식별할 순 없습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;헤더이름&lt;/th&gt;
      &lt;th&gt;헤더타입&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;From&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt;사용자의 이메일 주소&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User-Agent&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt;사용자의 브라우저&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Referer&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt;사용자가 현재 링크를타고 온 근원 페이지&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Authorization&lt;/td&gt;
      &lt;td&gt;요청&lt;/td&gt;
      &lt;td&gt;사용자의 이름과 비밀번호&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Client-ip&lt;/td&gt;
      &lt;td&gt;확장(요청)&lt;/td&gt;
      &lt;td&gt;클라이언트의 IP주소&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X-Forwarded-For&lt;/td&gt;
      &lt;td&gt;확장(요청)&lt;/td&gt;
      &lt;td&gt;클라이언트의 IP주소&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cookie&lt;/td&gt;
      &lt;td&gt;확장(요청)&lt;/td&gt;
      &lt;td&gt;서버가 생성한 ID 라벨&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이번 절에선 위 3개를 알아보고 밑에 4개는 뒤의 각 절에서 알아볼 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From 헤더&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용자의 이메일 주소를 나타냅니다. 이메일로는 각 개인 혹은 단체를 식별해낼 수 있지만 서버가 이를 모아 스팸 메일 등 악의적인 목적으로 사용할 수 있기 때문에 자주 사용되진 않습니다. 웹 로봇같은 경우 로봇이 서버에 문제를 일으킬 경우 메일을 보내라는 뜻에서 From 헤더에 문의메일 주소를 남기기도 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User-Agent&lt;/strong&gt; 헤더&lt;/p&gt;

&lt;p&gt;사용자가 쓰고 있는 브라우저의 이름과 버전정보, 간혹 운영체제에 대한 정보까지 보내줍니다. 사용자를 식별할 순 없지만 사용자가 사용하는 환경에 대한 정보를 받아 그 환경에 맞는 최적의 콘텐츠를 제공할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referer&lt;/strong&gt; 헤더&lt;/p&gt;

&lt;p&gt;현재 페이지로 유입하게한 URL을 가리킵니다. 이 역시 이 헤더 자체로는 사용자를 식별할 수 없지만 사용자의 행동에 대한 정보를 알려줍니다. Referer 헤더의 정보로 통계를 내어 본인 사이트에 사람들이 어떤 경로로 많이 들어오는지, 어떤 주제의 사이트에서 유입이 되는지 등을 파악할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;113-클라이언-트-ip-주소&quot;&gt;11.3. 클라이언 트 IP 주소&lt;/h3&gt;

&lt;p&gt;웹이 막 시작할 시절엔 사용자들이 각자 바뀌지 않는 IP 주소를 가지고 있었습니다. 그래서 초기엔 이런 IP를 이용해 사용자를 식별하려고 했습니다. 기본적으로 HTTP 메세지 자체엔 IP 주소가 없습니다.(IP주소를 담는 Client-ip 같은 헤더는 HTTP 표준이 아닙니다.) 하지만 연결된 TCP 커넥션을 찾아보면 반대쪽의 IP를 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 이렇게 IP로 식별하는 방법은 다음과 같은 약점을 갖고 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IP주소는 사용자가 아니라 컴퓨터를 가리킵니다. 가정에서도 여러명이 같은 PC를 사용하며, 공용 PC는 여러 사람이 사용하게 됩니다.&lt;/li&gt;
  &lt;li&gt;현대의 많은 ISP(Internet Service Provider)에선 동적으로 IP주소를 할당합니다. 로그인한 시간에 따라 사용자는 매번 다른 IP를 받습니다.&lt;/li&gt;
  &lt;li&gt;보안 강화를 위해 NAT(Network Address Translation) 방화벽을 사용하는 경우가 많습니다. 이 경우 서버가 TCP 커넥션을 살펴 알아낸 IP는 사용자의 IP가 아니라 방화벽의 IP입니다.&lt;/li&gt;
  &lt;li&gt;현대의 웹에선 클라이언트의 요청이 바로 서버로 가는 경우는 거의 없습니다. 많은 프록시와 게이트웨이를 통과합니다. 이 경우에도 서버는 프록시와 게이트웨이의 IP만 볼 수 있습니다. (이를 해결하려 Client-ip나 X-Forwarded-For HTTP 같은 헤더에 클라이언트의 ip를 담는 프록시도 있으나 표준도 아니고 모든 프록시들이 그렇지도 않습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 이유로 IP는 사용자를 식별하기위해 쓰이지 못합니다. 인트라넷 같은 경우엔 보안 기능을 위해 특정 IP에서 오는 사용자에게만 문서를 전달하기도 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;114-사용자-로그인&quot;&gt;11.4. 사용자 로그인&lt;/h3&gt;

&lt;p&gt;사용자에게 로그인을 요구하는 건 더 직접적이고 명확한 식별 방법입니다. HTTP는 로그인을 위해 ‘WWW-Authenticate’헤더와 ‘Authorization’ 헤더를 가지고 있습니다. 한번 로그인 해두면 브라우저는 같은 호스트에게 하는 모든 요청은 이 헤더를 함께 보낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용자가 로그인이 필요한 리소스를 요청한다면, 서버는 401 Login Required 응답 코드를 브라우저에게 보낼 수 있습니다. 브라우저는 이 응답을 받으면 로그인 대화상자를 띄워 로그인 정보를 받고 다음 요청부터 Authorization 헤더에 그 정보를 담아 보냅니다.&lt;/p&gt;

&lt;p&gt;하지만 매 사이트들 옮겨 다닐 때마다 아이디와 비밀번호를 기억해 로그인하는건 귀찮은 일입니다. 사용자가 주로 사용하는 아이디를 선점 당할 수도 있습니다. 다음 절?장?에서 이에 대한 대안을 제시합니다.(로그인 유지 말하는건가?)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;115-뚱뚱한-url&quot;&gt;11.5. 뚱뚱한 URL&lt;/h3&gt;

&lt;p&gt;사용자의 URL마다 사용자를 식별할 수 있는 정보를 부여해 계속 추적할 수 있습니다. 이를 fat URL이라고 부릅니다. 보통 식별 정보로는 HTTP 트랜잭션이 쓰입니다. 하나의 HTTP 트랜잭션을 ‘세션’, ‘방문’으로 보고 해당 트랜잭션에 대한 id를 부여합니다.&lt;/p&gt;

&lt;p&gt;그리고 응답을 줄때 사이트 내에 걸려있는 모든 링크들의 마지막에 그 id를 붙여 추적합니다. 예를들어 한 트랜잭션의 정보로 &lt;strong&gt;‘002-1145265-898332’&lt;/strong&gt;라는 id를 만들었다면 응답을 줄때 걸리는 모든 링크 뒤에 &lt;strong&gt;‘http://www….com/…/002-1145265-898332’&lt;/strong&gt;와 같이 id를 붙여 사용자를 계속 추적합니다.&lt;/p&gt;

&lt;p&gt;하지만 fat URL엔 다음과 같은 단점이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;못생긴 URL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;긴 id가 생성되어 URL에 붙으므로 사용자에게 혼란을 줄 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;공유하지 못하는 URL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;fat URL엔 사용자의 세션과 같은 개인정보가 들어 있어 해당 URL을 다른사람에게 공유한다면 자신의 개인정보를 유출하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;캐시를 사용할 수 없음&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용자마다, 같은 사용자도 브라우저를 닫고 다시 켤때마다 URL이 달라지므로 캐싱할 수 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버 부하 가중&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버는 fat url에 해당하는 HTML을 계속 다시 그려야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이탈&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용자 의도치 않게 다른 사이트로 이동하거나 닫아버리면 지속되고 있던 fat URL이 끊기게 됩니다. 쇼핑몰에서 이런 상황이 일어날 경우 담아 놓은 장바구니가 모두 비워질 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;세션 간 지속성의 부재&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;fat URL을 북마킹 하지 않는 이상 로그아웃하면 모든 정보를 잃게 됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;116-쿠키&quot;&gt;11.6. 쿠키&lt;/h3&gt;

&lt;p&gt;쿠키는 사용자를 식별하고 세션을 유지하는데 가장 널리 사용되는 방식입니다. 넷스케이프에서 최초로 제작했으며 현재는 모든 브라우저에서 지원합니다.&lt;/p&gt;

&lt;p&gt;쿠키는 캐시와 충돌할 수 있기때문에 대부분의 캐시나 브라우저에선 쿠키에 있는 내용을 캐싱하지 않습니다.&lt;/p&gt;

&lt;h4 id=&quot;1161-쿠키의-타입&quot;&gt;11.6.1. 쿠키의 타입&lt;/h4&gt;

&lt;p&gt;쿠키는 세션 쿠키와 지속 쿠키로 나뉩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;세션 쿠키(session cookie)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사이트 관련 설정과 선호사항을 저장하는 임시 쿠키입니다. 브라우저를 닫으면 삭제됩니다. 쿠키의 파키에 대한 파라미터들 중 Discard가 설정되어 있거나, Expires 혹은 Max-Age 파라미터가 없으면 세션쿠키입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;지속 쿠키(persistent cookie)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;브라우저를 닫아도 삭제되지 않습니다. 하드 디스크에 직접 저장되어 다음에 브라우저를 켤때에도 사용됩니다. 주기적으로 방문 하는 사이트의 설정 정보나 로그인 정보가 들어 있습니다. 파기되기까지의 시간을 가리키는 Expires, Max-Age 파라미터가 설정될 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;1162-쿠키는-어떻게-동작하는가&quot;&gt;11.6.2. 쿠키는 어떻게 동작하는가&lt;/h4&gt;

&lt;p&gt;사용자가 어느 웹 사이트에 처음 방문하면 웹 서버는 사용자를 식별하기 위한 id를 쿠키에 할당합니다. 쿠키는 {이름=값, 이름=값, … , 이름=값} 와 같이 표현되며 응답헤더인 Set-Cookie에 담겨 전송됩니다. Set-Cookie를 받은 브라우저는 쿠키를 저장합니다.&lt;/p&gt;

&lt;p&gt;쿠키는 사용자가 정의한 ‘이름=값’의 리스트이기 때문에 id뿐 아니라 어떤 정보든 포함할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;1163-쿠키-상자--클라이언트-측-상태&quot;&gt;11.6.3. 쿠키 상자 : 클라이언트 측 상태&lt;/h4&gt;

&lt;p&gt;쿠키는 서버 관련 정보를 클라이언트에 저장되고, 사용자가 해당 서버에 접근할때 마다 그 정보를 같이 전송됩니다. 브라우저는 이런 쿠키 정보를 저장하고 관리할 책임이 있습니다. 이를 ‘클라이언트 측 상태(State)’ 라고 합니다. HTTP명세에서의 공식 명칭은 HTTP State Management Mechanism입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;구글 크롬 쿠키&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;구글의 크롬 브라우저는 ‘Cookies’ 라는 이름의 SQLite 파일에 쿠키를 저장합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Users\{Username}\AppData\Local\Google\Chrome\User Data\Default\Cookies&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;따로 설정하지 않았다면 위의 위치에서 파일을 찾을 수 있고, 크롬 브라우저에선 F12를 눌러 나오는 개발자 도구에서 직접 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/cookies.png&quot; alt=&quot;cookies.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저의 https://www.github.com/에 대한 쿠키입니다. 전체가 한 쿠키인 것이 아니라 각 행 1개씩이 쿠키 1개입니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Expires/Max-Age&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;HttpOnly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Secure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SameSite&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 형식을 갖는 1개의 쿠키가 12개가 있는 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;1164-사이트마다-각기-다른-쿠키들&quot;&gt;11.6.4. 사이트마다 각기 다른 쿠키들&lt;/h4&gt;

&lt;p&gt;브라우저는 수백, 수천개의 쿠키를 가지고 있지만 이걸 각 사이트마다 모두 보내진 않습니다. 당연히 각 사이트에 필요한 쿠키만 보내게 됩니다. 그럼 어떻게 쿠키들이 다른 사이트를 구분하게 될까요&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;쿠키 Domain 속성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위 쿠키 사진을 보시면 ‘Domain’ 컬럼에 ‘github.com’이 보이실 겁니다. 서버에서 쿠키를 생성할때 Set-Cookie 헤더에 Domain 속성을 기술합니다. 위 사진에선 깃허브 서버에서 쿠키를 만들때 ‘github.com’을 넣어 생성한 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;쿠키 Path 속성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 사이트가 크거나 크지 않더라도 성능을 중요시 하는 웹 사이트라면 쿠키에 path를 설정해 사이트의 일부에만 쿠키가 전달되게 할 수 있습니다. 브라우저는 Domain과 path를 조합해 맞는 URL에만 쿠키를 보내게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;1165-쿠키-구성요소&quot;&gt;11.6.5. 쿠키 구성요소&lt;/h4&gt;

&lt;h4 id=&quot;1166-version-0-넷스케이프-쿠키&quot;&gt;11.6.6. Version 0 (넷스케이프) 쿠키&lt;/h4&gt;

&lt;h4 id=&quot;1167-version-1-rfc-2965-쿠키&quot;&gt;11.6.7. Version 1 (RFC 2965) 쿠키&lt;/h4&gt;

&lt;p&gt;쿠키의 변천은 ‘Version 0(넷스케이프 쿠키)’ -&amp;gt; ‘RFC2109 쿠키’ -&amp;gt; ‘Version 1(RFC 2965) 쿠키’ -&amp;gt; ‘RFC 6265 쿠키’ 와 같이 진행됐습니다. 위의 세 절에선 이 변천중 Version 0와 Version 1을 다루고 있는데 Version 1에 지면을 많이 할애했습니다.&lt;/p&gt;

&lt;p&gt;하지만 RFC 6265 쿠키가 나오며 RFC 2109 쿠키와 RFC 2965 쿠키는 폐기되었습니다. 변천 내용이 쿠키의 이해에 중요한 부분이면 따로 포스팅해 남기겠지만 작동 방식자체가 바뀌었다기 보단 문법과 속성들이 바뀐것 뿐이라 따라 남기지 않겠습니다.&lt;/p&gt;

&lt;p&gt;대신 버전들에 대해 구글링하다가 쿠키에 대해 심도있고 깔끔하게 정리된 글을 찾았습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://meetup.toast.com/posts/172&quot;&gt;https://meetup.toast.com/posts/172&lt;/a&gt;  이곳을 찾고하면 좋을 것 같습니다.(저도 언젠간 저런 수준의 포스팅을 할 수 있겠죠..?)&lt;/p&gt;

&lt;p&gt;위 포스팅 자체를 정리해 이 포스팅에 포함시킬가도 했으나 이 포스팅에서 포함하기엔 배보다 배꼽이 더 큰 상황인것 같습니다.&lt;/p&gt;

&lt;h4 id=&quot;1168-쿠키와-세션-추적&quot;&gt;11.6.8. 쿠키와 세션 추적&lt;/h4&gt;

&lt;p&gt;쿠키를 이용해 세션을 추적하는 과정을 예시를 들어 설명하고 있지만 앞에서 이미 많이 서술되었으므로 생략합니다.&lt;/p&gt;

&lt;h4 id=&quot;1169-쿠키와-캐싱&quot;&gt;11.6.9. 쿠키와 캐싱&lt;/h4&gt;

&lt;p&gt;이번장에서 배운 쿠키의 내용을 캐싱에 그대로 적용하게되면 심각한 문제를 발생할 수 있습니다. 쿠키는 개인정보를 다루는데 이를 캐싱해 다른 사람에게도 그 개인정보를 줄 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;캐시되지 말아야 할 문서가 있다면 표시하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;해당 문서를 캐시해도 될 지 말 지는 문서의 생산자, 소유자가 가장잘 압니다. 만약 응답할 문서에서 ‘Set-Cookie’헤더만 제외하면 캐싱해도 되는 문서라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control : no-cache=&quot;Set-Cookie&quot;&lt;/code&gt;헤더를 포함시키면 됩니다. 쿠키와 상관 없이 그냥 캐싱해도 된다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control : public&lt;/code&gt;헤더를 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set-Cookie 헤더를 캐시 하는 것에 유의하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;캐시는 Set-Cookie헤더를 가진 응답을 캐싱할땐 조심해야 합니다. 응답헤더인 Set-Cookie 헤더는 보내는 정보를 쿠키에 저장하라는 것을 뜻하는데 Set-Cookie헤더를 캐싱해버리면 다른 사람들의 PC에 타인의 개인정보가 저장되기 때문입니다. 또한, Set-Cookie에 있는 사용자를 식별할 id를 여러 사람이 가져가면 서버 입장에서도 사람들을 식별할 수 없게 됩니다.&lt;/p&gt;

&lt;p&gt;반대로, 어떤 캐시는 Set-Cookie 헤더를 모두 지우고 저장하기도 합니다. 개인정보를 보호할 수 있을 것 같지만, Set-Cookie를 받아야할 사용자 조차 못받게 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;이런 문제에선 캐시가 요청을 받고 서버에 재검사를 보내 Set-Cookie를 받아오는 방법으로 개선할 수 있습니다. 서버가 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control : must-revalidate, max-age=0&lt;/code&gt;를 썼다는건 캐시에서 보내기 전에 서버를 다시 다녀오라는 뜻입니다.&lt;/p&gt;

&lt;p&gt;또 어떤 보수적인 캐시는 서버측에서 캐시해도 된다고 헤더에 기술해도 Set-Cookie가 있으면 캐시하지 않을 수도 있습니다.&lt;/p&gt;

&lt;p&gt;어떤 캐시는 Set-Cookie가 있는 이미지는 캐시하지만 텍스트는 캐시하지 않기도 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cookie 헤더를 가지고 있는 요청을 주의하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cookie 헤더를 가진 요청에 대한 응답은 개인정보를 포함하고 있을수도 있습니다. 따라서 캐시는 Cookie헤더를 가진 요청에 대한 응답을 캐싱할땐 조심해야 합니다.&lt;/p&gt;

&lt;p&gt;보수적인 캐시는 마찬가지로 Cookie 헤더를 가진 요청에 대한 응답은 모두 캐시하지 않을 수도 있습니다. 앞서 말한것 처럼 이미지는 캐시하고, 텍스트는 캐시하지 않을 수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;11610-쿠키-보안-그리고-개인정보&quot;&gt;11.6.10. 쿠키, 보안 그리고 개인정보&lt;/h4&gt;

&lt;p&gt;쿠키가 보안에 취약하다는 얘기도 있으나 과장된 말이라고 생각합니다. 개인정보는 DB에 저장해두고 쿠키로는 DB에 있는 개인정보를 특정할 수 있는 키값만 보내면 중요한 개인정보를 숨길 수 있습니다.&lt;/p&gt;

&lt;p&gt;다만 요 근래 사용자의 활동 정보를 무단으로 수집하려는 마케팅 회사등이 더 문제라고 생각합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;예전에 이론적으로 배운 쿠키나 실제 개발할때 사용해본 쿠키를 떠올려봤을때 이번 장은 가볍게 넘어갈 수 있을 것이라 생각했습니다. 하지만 캐시와 함께 엮이니 꽤나 머리가 아프기 시작했습니다. 그리고 앞서 소개해드린 &lt;a href=&quot;https://meetup.toast.com/posts/172&quot;&gt;https://meetup.toast.com/posts/172&lt;/a&gt; 이 포스팅을 읽고나니 이정도의 수준으로 알아야 안다고 할 수 있겠구나라고 생각했습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HTTP/2.0</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C10/"/>
   <updated>2020-03-20T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드10</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;HTTP는 계속 발전합니다. HTTP/1.1의 성능 문제를 개선하기 위해 HTTP/2.0이 만들어졌습니다. HTTP/1.1은 1997년 공식적으로 등장했습니다. HTTP/2는 2014년 12월 표준으로 제안되어 2015년 2월 17일 IESG에서 승인됐습니다. 그리고 &lt;strong&gt;2015년 5월 RFC 7540으로 공식적으로 공개&lt;/strong&gt;됐습니다.&lt;/p&gt;

&lt;p&gt;하지만 이 &lt;strong&gt;책이 서술하는 시점은 2013년 11월으로 HTTP/2.0의 8번째 초안에 대한 내용&lt;/strong&gt;입니다.(이전 장에서 책이 처음 서술된건 2002년이라고 했는데, HTTP/2부분은 개정하면서 수정된 것 같습니다.) 따라서 책의 내용과 현재가 다를 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;101-http20의-등장배경&quot;&gt;10.1. HTTP/2.0의 등장배경&lt;/h3&gt;

&lt;p&gt;HTTP의 역사에 대해 알아봤을때 HTTP/1.1은 급하게 기능을 추가한 HTTP/1.0을 정리하는 역할이 컸다고 했습니다. 이렇게 HTTP/1.1은 구현의 단순성과 접근성에 주안점을 두었기 때문에 성능을 희생시킬 수 밖에 없었습니다.&lt;/p&gt;

&lt;p&gt;HTTP/1.1에선 요청을 보냈을때 그에 대한 응답을 받아야만 그 다음 요청을 보낼 수 있기 때문에 회전 지연(latency)를 피할 수 없었습니다. 이를 해결하기 위해 병렬 커넥션이나 파이프라인 커넥션을 사용했지만 이는 미봉책이었을 뿐, 근본적인 해답은 되지 못했습니다.&lt;/p&gt;

&lt;p&gt;이런 HTTP/1.1의 근본적인 한계를 알고있었는지, HTTP 작업 그룹은 HTTP/1.1이 발표되기도 전인 1997년 7월부터 이미 HTTP/1.1의 이후 버전을 위한 HTTP-NG 프로젝트를 시작했습니다. 그리고 HTTP/1.1의 개발자 중 하나인 로이 필딩(Roy Fielding)은 WAKA라는 프로토콜을 개발했습니다. 또, 마이크로소프트는 S+M(Speed+Mobility)라는 프로토콜을 개발하기 시작했습니다.&lt;/p&gt;

&lt;p&gt;구글도 빠질 수 없겠죠. 구글은 2009년에 SPDY(speedy) 프로토콜을 개발해 발표했습니다. HTTP 속도를 개선하기 위해 헤더를 압축해 대역폭을 절약하고, 한 TCP 커넥션에서 응답을 받기 전에 여러 요청을 동시에 보내기도 하고, 요청이 없어도 서버쪽에서 능동적으로 리소스를 푸시할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;구글의 SPDY는 회전 지연(latency)를 줄이는데 효과적이었고, 2012년 10월 3일, HTTP 작업 그룹은 SPDY를 기반으로 HTTP/2.0을 공식적으로 설계하기 시작했습니다. HTTP작업 그룹은 SPDY 초안을 그대로 가져와 HTTP/2.0작업에 착수하기 시작했습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;102-개요&quot;&gt;10.2. 개요&lt;/h3&gt;

&lt;p&gt;HTTP/2.0 요청과 응답은 길이가 정의된(최대 16383 Byte) 한 개 이상의 프레임에 담깁니다.&lt;/p&gt;

&lt;p&gt;프레임에 담긴 요청과 응답은 스트림을 통해 보내지는데, 한 개의 스트림은 한 쌍의 요청과 응답을 처리합니다. 그리고 하나의 TCP 커넥션 위에 여러개의 스트림이 동시에 만들어질 수 있습니다. 즉, 여러 스트림을 사용하면 요청과 응답을 동시에 처리할 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;또한 HTTP/2.0은 이 스트림들에 대한 흐름제어, 우선순위 부여가 가능합니다.&lt;/p&gt;

&lt;p&gt;HTTP/2.0엔 기존의 요청-응답이 아닌 ‘서버 푸시’라는 새로운 모델이 등장합니다. 하나의 요청이 있었다면 다음 요청이 없더라도 서버가 추가적으로 리소스를 푸시할 수 있습니다.&lt;/p&gt;

&lt;p&gt;물론 HTTP/2.0은 HTTP/1.1과 호환이 될 수 있도록 노력하고 있습니다. 다만, 헤더들의 표현 문법이 조금 달라졌습니다. (ex - Content-Length -&amp;gt; :content-length)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;103-http11과의-차이점&quot;&gt;10.3. HTTP/1.1과의 차이점&lt;/h3&gt;

&lt;h4 id=&quot;1031-프레임&quot;&gt;10.3.1. 프레임&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/http2_frame.png&quot; alt=&quot;http2_frame.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;https://queue.acm.org/detail.cfm?id=2555617&lt;/p&gt;

&lt;p&gt;HTTP/2.0에서 모든 메세지는 위와 같은 프레임에 담겨 전송됩니다. 8바이트 크기의 헤더로 시작해 뒤에 최대 16838 바이트 크기의 페이로드가 옵니다. 프레임 헤더의 각 필드는 다음과 같습니다.(&lt;strong&gt;이 부분이 책과 조금 다른데, 이미지를 찾다 보니 책보다 이후에 업데이트 된 내용인것 같아 위 출처에서 구글링한 내용으로 대체합니다.&lt;/strong&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;길이 : 페이로드를 나타내는 16비트 unsigned integer. 이 길이에 프레임 헤더는 포함되지 않습니다.&lt;/li&gt;
  &lt;li&gt;종류 : 길이 다음 오는 8비트로 표현된 프레임의 종류입니다.&lt;/li&gt;
  &lt;li&gt;플래그 : 프레임의 종류에 따랑 의미가 달라지는 8비트의 플래그입니다.&lt;/li&gt;
  &lt;li&gt;R : 예약된 1비트이며 의미가 정의되어있지 않습니다. 항상 0이어야 합니다.&lt;/li&gt;
  &lt;li&gt;스트림 식별자 : 31비트의 스트림 식별자입니다. 0일 경우 커넥션 전체와 연관된 프레임임을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP/2.0은 DATA, HEADERS, PRIORITY, RST_STREAM, SETTINGS, PUSH_PROMISE, PING, GOAWAY, WINDOW_UPDATE, CONTINUATION의 10가지 프레임을 정의하고 있습니다. 각 페이로드 형식이나 내용은 프레임에 따라 다릅니다.&lt;/p&gt;

&lt;h4 id=&quot;1032-스트림과-멀티플렉싱&quot;&gt;10.3.2. 스트림과 멀티플렉싱&lt;/h4&gt;

&lt;p&gt;스트림이란 HTTP/2.0 커넥션을 통해 클라이언트와 서버 사이에 교환되는 프레임들의 양방향 흐름입니다.&lt;/p&gt;

&lt;p&gt;한 쌍의 HTTP 요청과 응답은 하나의 스트림을 통해 이루어집니다. 요청시 새 스트림을 만들어 HTTP 요청을 보내며, 서버는 같은 스트림으로 응답을 보냅니다. 이후 해당 스트림은 닫히게 됩니다.&lt;/p&gt;

&lt;p&gt;HTTP/1.1에선 기본적으로 한 TCP커넥션에선 요청을 보낸 후 응답을 받아야 다음 요청을 보낼 수 있었습니다. 한 웹 페이지를 띄우는데 요청이 많이 필요하지 않았던 과거엔 괜찮았습니다. 하지만 현대의 웹 페이지는 한 페이지를 띄우는 데만 해도 적게는 수십, 많게는 수백번의 요청을 주고받아야 합니다. 이는 심각한 회전  지연을 만듭니다.&lt;/p&gt;

&lt;p&gt;HTTP/2.0에선 하나의 커넥션에 여러개의 스트림이 동시에 열릴 수 있습니다. 한 페이지를 띄우는데 필요한 여러개의 요청을 응답을 기다릴 필요 없이 동시에 여러 스트림을 열어 보낼 수 있는 것입니니다.&lt;/p&gt;

&lt;p&gt;스트림은 우선순위를 가질 수 있습니다. 프레임의 전송이 느릴때, 웹 브라우저는 중요한 리소스를 요청하는 스트림에 우선순위를 부여해 요청할 수 있습니다. (물론, 이 우선순위대로 응답이 올거란 보장은 없습니다.)&lt;/p&gt;

&lt;p&gt;모든 스트림은 위에서 몬것과 같이 31비트 고유한 식별자를 갖습니다. 클라이언트에 의해 초기화된 스트림은 이 식별자가 홀수여야 하며, 서버가 초기화한 스트림은 짝수여야 합니다. 그리고 새로 만들어진 스트림의 식별자는 해당 커넥션 안에서 이전에 만들어졌거나 예약된 스트림의 식별자보다 커야 합니다. 이 규칙을 어기는 식별자를 받았다면 PROTOCOL_ERROR 를 돌려줘야 합니다.&lt;/p&gt;

&lt;p&gt;서버, 클라이언트 모두 이 스트림은 상대방의 동의 없이 일방적으로 만들 수 있습니다. TCP 커넥션을 여러개 만들때 연결 신호를 주고받느라 소비했던 지연들을 없앨 수 있습니다.&lt;/p&gt;

&lt;p&gt;HTTP/2.0 커넥션에서 한 번 사용한 스트림 식별자는 다시 사용할 수 없습니다. 커넥션을 오래 유지하면 스트림의 31비트의 식별자를 모두 사용할 수 있는데, 이땐 커넥션을 다시 맺습니다.&lt;/p&gt;

&lt;p&gt;여러개의 스트림을 사용시 스트림이 블록될 우려가 있는데, HTTP/2.0에선 WINDOW_UPDATE 프레임을 이요한 흐름 제어를 통해 스트림들이 서로 간섭해 망가지는 것을 막아줍니다.&lt;/p&gt;

&lt;h4 id=&quot;1033-헤더-압축&quot;&gt;10.3.3. 헤더 압축&lt;/h4&gt;

&lt;p&gt;HTTP/1.1은 헤더를 압축 없이 그냥 보냅니다. 따라서 실제 본문보다 헤더의 크기가 더 큰 경우도 허다합니다.&lt;/p&gt;

&lt;p&gt;이를 개선하기 위해 HTTP/2.0에선 HTTP 헤더를 압축해 전송합니다. 헤더는 HPACK 명세에 정의된 방법으로 압축된 뒤, ‘헤더 블록 조각’으로 쪼개져 전송됩니다. 받는 쪽은 이 조각들을 이어 압축을 풉니다.&lt;/p&gt;

&lt;p&gt;HPACK은 헤더를 압축하고 해제할 때 ‘압축 콘텍스트(compression context)’를 사용합니다. 그런데 이 압축 콘텐스트는 하나의 압축을 풀면 이에 영향을 받아 바뀝니다. 송신측은 메세지를 보낸뒤, 수신측이 이 메세지를 받고 압축을 풀어 압축 콘텍스트가 변경되었을 것이라 추측합니다. 따라서 원활한 통신을 위해선 받은 헤더를 쓰지 않더라도 반드시 합축을 풀어 상호간의 압축 콘텍스트를 유지해야 합니다. 그럴 수 없는 경우라면 COMPREESION_ERROR와 함께 커넥션을 끊어야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;1034-서버-푸시&quot;&gt;10.3.4. 서버 푸시&lt;/h4&gt;

&lt;p&gt;HTTP/2.0에선 하나의 요청에 대한 응답으로 여러개의 리소스를 보낼 수 있습니다.(추가 요청이 없어도 일방적으로 응답을 보낼 수 있습니다.) 요청과 응답이 1:1로 대응해야 했던 HTTP/1.1과 달라진 점입니다.&lt;/p&gt;

&lt;p&gt;이 방법은 클라이언트에서 어떤 리소스를 추가 요구할 것인지 예측할 수 있는 상황에서 요구합니다. HTTP/1.1에선 하나의 웹페이지를 띄울때 클라이언트가 응답받은 HTML에서 이미지, 파일들의 URL를 얻어내 다시 요청합니다. 하지만 HTTP/2.0에선 서버쪽에서 HTML을 보내기 전에 미리 추가로 필요한 리소스들을 파악해 같이 전송할 수 있습니다.&lt;/p&gt;

&lt;p&gt;리소스를 푸시하려는 서버는 클라이언트에게 자원을 푸시할 것임을 PUSH_PROMISE 프레임을 보내 미리 알려주어야 합니다. 클라이언트가 PUSH_PROMISE 프레임을 받게 되면 해당 프레임의 스트림은 클라이언트 입장에선 ‘예약됨(원격)’ 상태가 됩니다. 만약 클라이언트가 거절하고 싶다면 RST_STREAM 프레임을 보내면 됩니다.&lt;/p&gt;

&lt;p&gt;이 PUSH_PROMISE 프레임을 먼저 주는 이유는 서버가 줄 리소스를 클라이언트가 모르고 요청하는 일을 막기 위해서 입니다.&lt;/p&gt;

&lt;p&gt;서버 푸시를 사용할때 주의할 점은 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;중간의 프록시가 추가 리소스를 전달하지 않을 수도 있습니다.(서버 푸시가 구현 안됐거나, 정책적으로 막거나) 그리고 프록시 자체적으로도 클라이언트에게 서버 푸시를 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;서버는 안전하고, 캐시가능하고, 본문을 포함하지 않는 요청에 대해서만 푸시할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;푸시할 리소스는 클라이언트의 본 요청과 연관되어야 합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 서버가 푸시한 리소스를 ‘동일 출처 정책’에 따라 검사해야 합니다.&lt;/li&gt;
  &lt;li&gt;서버 푸시를 끄고 싶다면 SETTINGS_ENABLE_PUSH를 0으로 설정하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;104-알려진-보안-이슈&quot;&gt;10.4. 알려진 보안 이슈&lt;/h3&gt;

&lt;h4 id=&quot;1041-중개자-캡슐화-공격intermediary-encapsulation-attacks&quot;&gt;10.4.1. 중개자 캡슐화 공격(Intermediary Encapsulation Attacks)&lt;/h4&gt;

&lt;p&gt;HTTP/2.0 메세지를 프록시가 HTTP/1.1로 변환할때 메세지의 의미가 바뀔 수 있습니다. HTTP/2.0에선 헤더필드의 이름과 값을 바이너리로 인코딩하기 때문에 헤더 필드에 어떤 문자열도 사용할 수 있습니다. 때문에 번역하는 프록시가 의도적으로 헤더를 바꿀 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;1042-긴-커넥션-유지로-인한-개인정보-누출-우려&quot;&gt;10.4.2. 긴 커넥션 유지로 인한 개인정보 누출 우려&lt;/h4&gt;

&lt;p&gt;HTTP/2.0에선 기본적으로 클라이언트와 서버의 커넥션이 오래 유지될 것이라고 가정합니다. 이 경우에 개인정보 유출의 위험이 있습니다. 예를들어, 사용자가 브라우저를 사용할때 이전 사용자가 무엇을 주고 받았는지 알아낼 수도 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;추가저으로 좋은 링크 (https://developers.google.com/web/fundamentals/performance/http2)[https://developers.google.com/web/fundamentals/performance/http2]&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>웹 로봇</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C9/"/>
   <updated>2020-03-19T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드9</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;크롤러는 프로그래밍을 직업으로 하지 않더라도 사회 과학 및 통계를 공부하다 보면 만나게 되는 주제입니다. 많은 학부생 졸업논문의 재료가 되기도 합니다.&lt;/p&gt;

&lt;p&gt;크롤러, 스파이더, 웜, 봇 등 다양한 이름으로 불리는 이런 것들을 통칭해 ‘웹 로봇’이라고 부릅니다.&lt;/p&gt;

&lt;p&gt;웹 로봇은 사람과 상호작용 없이 연속된 웹 트랜잭션들을 자동으로 수행하는 프로그램들을 말합니다. 이번 장에선 이 웹 로봇에 대해 알아봅니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;91-크롤러와-크롤링&quot;&gt;9.1. 크롤러와 크롤링&lt;/h3&gt;

&lt;p&gt;대표적인 웹 로봇인 웹 크롤러는 웹 페이지 하나를 가져오고, 그 페이지에서 가리키는 모든 웹 페이지를 가져오고, 다시 재귀적으로 반복해서 가져오며 웹을 순회하는 로봇입니다.&lt;/p&gt;

&lt;p&gt;다양한 웹 크롤러가 있지만 검색 엔진의 DB에 저장하기 위해 웹을 돌아다니는 검색 엔진 스파이더들이 가장 복잡한 웹 로봇중 하나입니다.&lt;/p&gt;

&lt;p&gt;크롤러들이 어떻게 동작하는지 알아보겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;911-어디에서-시작하는가-루트-집합&quot;&gt;9.1.1. 어디에서 시작하는가: ‘루트 집합’&lt;/h4&gt;

&lt;p&gt;크롤러를 풀어 놓기위해선 출발지점을 주어야 합니다. 크롤러가 방문을 시작하는 출발지점의 URL들을 모아놓은 집합을 루트 집합(root set)이라고 부릅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/root_set.png&quot; alt=&quot;root_set.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 root set을 설정하는 것은 매우 중요합니다. 웹에 있는 모든 문서를 탐색가능하게 하는 하나의 문서는 없기 때문이죠.&lt;/p&gt;

&lt;p&gt;위 사진의 예를 보겠습니다. A에서 시작한 크롤러는 G, H, I, L, N, S, T, U엔 도달하지 못합니다. 그리고 S, T, U 문서 집합은 왼편의 문서들과 연결점이 없어 고립되어 있습니다. 이런 상황에서 root set을 적절히 설정하지 못하면 놓치는 문서가 발생할 수 있습니다. 위 상황에선 A, G, S이 모든 문서를 탐색 가능하게 하는 최소의 root set 입니다.&lt;/p&gt;

&lt;p&gt;좋은 root set은 아래와 같이 이루어져 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;크고 인기있는 웹 사이트&lt;/li&gt;
  &lt;li&gt;새로 생성된 페이지들의 목록&lt;/li&gt;
  &lt;li&gt;자주 링크되지 않는 잘 알려지지 않은 페이지들의 목록&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 root set은 고정되어 있지 않고 항상 갱신되며 새로운 크롤링과 크롤러를 위한 시드 목록이 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;912-링크-추출과-상대-링크-정상화&quot;&gt;9.1.2. 링크 추출과 상대 링크 정상화&lt;/h4&gt;

&lt;p&gt;크롤러가 다음 문서로 넘어가기 위해선 현재 문서에 있는 URL 링크들을 알아와야 합니다. 이때 2장에서 알아본 것 처럼 절대 URL과 상대 URL이 있는데, 크롤러는 HTML문서 파싱시 상대 URL을 절대 URL로 변환해야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;913-순환-피하기&quot;&gt;9.1.3. 순환 피하기&lt;/h4&gt;

&lt;p&gt;크롤러를 사용할때 주의해야 할 점은 크롤러가 순환에 빠지지 않도록 하는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/crawler_loop.png&quot; alt=&quot;crawler_loop.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 상황에선 크롤러가 &lt;code class=&quot;highlighter-rouge&quot;&gt;A - B - C - A - B ...&lt;/code&gt; 순환에 빠져버렸습니다.&lt;/p&gt;

&lt;p&gt;이를 피하기 위해선 크롤러들이 어디를 방문 했는지 알아야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;914-루프와-중복&quot;&gt;9.1.4. 루프와 중복&lt;/h4&gt;

&lt;p&gt;크롤러가 순환에 빠지는 상황은 다음과 같은 문제를 야기합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;크롤러가 루프에 빠져 꼼짝 못하게 됩니다.&lt;/li&gt;
  &lt;li&gt;루프에 빠진 크롤러가 빠르다면 크롤러가 요청을 보낸 서버는 같은 사용자로부터 같은 요청을 반복적으로 받게됩니다. 이는 요청을 보낸 서버에 부담이 될 수 있고, 크롤러가 아닌 실제 사용자가 사용하지 못하는 상황이 발생할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;많은 수의 중복 페이지가 크롤러 서버에 저장됩니다. 잘못 만들어진 크롤러를 사용하면, 검색엔진에서 수백개의 같은 페이지를 보여줄 수도 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;915-빵-부스러기의-흔적&quot;&gt;9.1.5. 빵 부스러기의 흔적&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/number_of_websites.png&quot; alt=&quot;number_of_websites.png&quot; /&gt;[https://news.netcraft.com/archives/2018/08/24/august-2018-web-server-survey.html]&lt;/p&gt;

&lt;p&gt;위는 netcraft에서 조사한 전 세계 hostname 갯수입니다. 본 책에서 인터넷엔 수십억 개의 서로 다른 &lt;strong&gt;웹 페이지&lt;/strong&gt;가 존재한다고 했는데 2002년 기준이기 때문에 얼마나 늘었을가 궁금해 찾아봤습니다.&lt;/p&gt;

&lt;p&gt;2002년엔 hostname이 4000만개 정도 됐는데 이때 서로다른 웹 페이지가 수십억개 였다면, 그래프의 마지막인 2018년 8워엔 hostname만 16억개 입니다. 서로다른 웹페이지수는… 수백억이 되지 않을까 합니다.&lt;/p&gt;

&lt;p&gt;이렇게 많은 각기다른 웹 페이지를 크롤링하고, 중복된 크롤링을 피하기 위해선 어느 URL을 크롤링 했는지 기억해야 합니다. 이를 위해 검색 트리나 해시 테이블과 같은 자료구조를 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;트리와 해시 테이블&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;URL들을 효과적으로 관리하기 위해 검색 트리나 해시 테이블을 사용하는 방법을 사용할수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;느슨한 존재 비트맵(presence bit array)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;공간 사용을 최소화 하기 위해 몇몇 대규모 크롤러들은 presence bit array 와 같은 느슨한 자료구조를 사용합니다.&lt;/p&gt;

&lt;p&gt;URL을 해시함수로 고정된 크기의 숫자로 변환합니다. 그리고 해당 숫자 번째에 presence bit가 있는지 확인합니다. presence bit가 존재하면 해당 URL은 이미 크롤링 했다고 판별 합니다. 이 방법의 경우 URL은 무한하기 때문에 서로 다른 URL이 해시함수를 거쳤을때 같은 수로 변환 될 수도 있습니다. 이땐 페이지 하나를 놓치게 됩니다.&lt;/p&gt;

&lt;p&gt;예전에 해시 테이블을 구현하는 공부를 했었는데 같은 원리 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;체크 포인트&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;크롤러가 갑작스럽게 중단될 경우를 대비해 방문한 URL의 목록이 하드디스크에 저장되었는지 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파티셔닝&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹이 커지며 한 대의 컴퓨터에서 하나의 크롤러로 모든 웹을 크롤링 하는건 불가능해졌습니다. 대규모 웹 로봇은 하나의 큰 farm에 여러 컴퓨터에서 여러 크롤러들이 각자 부분을 할당받아 작업합니다.&lt;/p&gt;

&lt;h4 id=&quot;916-별칭alias과-로봇-순환&quot;&gt;9.1.6. 별칭(Alias)과 로봇 순환&lt;/h4&gt;

&lt;p&gt;URL은 별칭을 가질 수 있기 때문에 보여지는 URL은 다르지만 실질적으로 같은 웹 페이지를 가리키는 것들이 있습니다. 다음과 같은 사례들입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;첫 번째 URL&lt;/th&gt;
      &lt;th&gt;두 번째 URL&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/bar.html&lt;/td&gt;
      &lt;td&gt;http://www.foo.com:80/bar.html&lt;/td&gt;
      &lt;td&gt;기본 포트가 80번일때&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/~fred&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/%7Fred&lt;/td&gt;
      &lt;td&gt;이스케이프 문자의 사용/미사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/x.html#early&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/x.htm#middle&lt;/td&gt;
      &lt;td&gt;태그가 다를때&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/readme.htm&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/README.HTM&lt;/td&gt;
      &lt;td&gt;서버가 대소문자를 구분하지 않을때&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/index.html&lt;/td&gt;
      &lt;td&gt;기본 페이지가 index.html일때&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;http://www.foo.com/index.html&lt;/td&gt;
      &lt;td&gt;http://209.231.87.45/index.html&lt;/td&gt;
      &lt;td&gt;아이피 주소&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;917-url-정규화하기&quot;&gt;9.1.7. URL 정규화하기&lt;/h4&gt;

&lt;p&gt;위와 같은 문제를 해결하기 위해 대부분의 웹 크롤러들은 URL을 표준 형식으로 정규화합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;포트번호가 명시되지 않았다면 호스트명에 :80을 추가합니다&lt;/li&gt;
  &lt;li&gt;PercentEncoding으로 이스케이핑된 문자들을 원래 문자로 바꿉니다(ex - %7 -&amp;gt; ~)&lt;/li&gt;
  &lt;li&gt;’#’ 태그를 제거합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 방법으로 9.1.6.의 a, b, c는 해결 할 수 있습니다. 하지만 d, e, f의 경우 각 서버마다 아래와 같이 정책이 다르기 때문에 완벽하게 정규화 할 순 없습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;웹 서버가 대소문자를 구분 할 수도 있고 안할수도 있습니다.&lt;/li&gt;
  &lt;li&gt;기본 페이지를 설정 할 수도 있고 안할수도 있습니다.&lt;/li&gt;
  &lt;li&gt;가상 호스팅된 서버라면 여러 도메인네임이 같은 IP를 가리키게 됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;918-파일-시스템-링크-순환&quot;&gt;9.1.8. 파일 시스템 링크 순환&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;심볼릭 링크(Symbolic link)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다른 파일이나 디렉터리에 대한 참조를 가지고 있는 파일입니다. 윈도우의 바로가기를 생각하면 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;이 심볼릭 링크가 URL상에 올라가게 되면 순환을 만들어 낼 수도 있습니다. 대부분 심볼릭 링크로 인한 순환은 개발자의 실수로 일어납니다. 아래와 같은 상황을 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/symbolic_link.png&quot; alt=&quot;symbolic_link.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나중에 추가&lt;/p&gt;

&lt;h4 id=&quot;919-동적-가상-웹-공간&quot;&gt;9.1.9. 동적 가상 웹 공간&lt;/h4&gt;

&lt;p&gt;웹 서버는 URL을 받아들일때 동적으로 새로운 리소스를 만들어 돌려줄 수 있습니다. 때문에 몇몇 악의적인 개발자들은 일부러 크롤러를 함정에 빠뜨리기 위해 가상의 URL을 받으면 다른 가상의 URL을 갖는 가상의 HTML문서를 만들어 돌려줄 수 있습니다.&lt;/p&gt;

&lt;p&gt;웹 크롤러가 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.trap.com/trap&lt;/code&gt; 으로 요청을 보냈을때, 악의적인 서버는 해당 URL에 따라 다음과 같은 리소스를 동적으로 만들어 돌려줄 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;HTML&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.trap.com/trap2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;trap2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 응답을 받은 크롤러는 응답받은 웹 페이지가 가지고 있는 링크인 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.trap.com/trap2&lt;/code&gt;로 요청을 보내게 되고 이 악의적인 사이트는 이번엔&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;HTML&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.trap.com/trap3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;trap3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 응답을 보내주게 될 것입니다. 이 상황이 안좋은건 크롤러가 요청하는 URL은 계속 바뀌기 때문에 크롤러가 스스로 함정에 걸린지 알아채기 어렵다는 것입니다.&lt;/p&gt;

&lt;p&gt;이런 상황은 &lt;strong&gt;악의적인 함정이 아니고서도 URL에 따라 동적인 링크를 생성하는 곳이면 발생할 수 있습니다.&lt;/strong&gt; 예를들어 어느 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.canlendar.com/2020/03&lt;/code&gt; 과 같이 &lt;strong&gt;년, 월 정보를 갖는 URL을 보내면 이전달과 이후달의 링크가 걸린 달력 웹페이지를 보여주는 웹 페이지&lt;/strong&gt;가 있다고 가정한다면, 해당 웹 페이지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.canlendar.com/2020/02&lt;/code&gt; 링크와 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.canlendar.com/2020/04&lt;/code&gt;  링크를 갖는 응답을 돌려주고 크롤러는 과거와 미래의 끝을 보려 끊임없이 달려갈 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;9110-루프와-중복-피하기&quot;&gt;9.1.10. 루프와 중복 피하기&lt;/h4&gt;

&lt;p&gt;모든 순환을 피하는 완벽한 방법은 없지만 다음과 같은 방법을 사용해 순환을 줄일 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URL 정규화&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;앞서 살펴본 URL 정규화 입니다. 같은 리소스를 가리키는 다른 URL을 제거할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;너비 우선 크롤링&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;알고리즘 공부를 해봤다면 DFS/BFS를 아실겁니다. 크롤링도 일종의 그래프 탐색이기 때문에 DFS방식으로 할지 BFS 방식으로 할지 결정할 수 있습니다. 
 크롤러가 BFS 방식으로 작동하게 한다면 순환 함정이 있어도 다른 웹사이트들을 모두 들른 다음 함정에 빠지고, 다시 다른 웹사이트를 모두 들른 다음 함정에 빠지게 됩니다. 함정에 빠지면서도 다른 웹 페이지를 탐색할 수 있습니다.
 또한, BFS로 설계된 크롤러는 요청하는 서버들에 부담을 줄여줄 수 있습니다. DFS 방식은 한 호스트를 먼저 다 탐색하기 때문에 해당 호스트엔 많은 요청이 가게됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스로틀링(Throttling)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;크롤러가 한 호스트에 대해 일정 시간동안 가져올 수 있는 페이지의 숫자를 제한할 수 있습니다. 순환에 빠지더라도 미리 설정해둔 페이지수 제한에 걸리면 빠져나올 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URL 크기 제한&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일정 길이 이상의 URL을 제한하면 앞서 살펴본 심볼릭 링크로 인한 순환을 막을 수 있습니다. 하지만 이 방법을 사용하면 의도치 않게 놓치게 되는 콘텐츠들이 생기게 됩니다. 특히 근래엔 URL 자체에 여러 정보를 포함하여 길어지는 경우가 많기 때문에 주의해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URL/사이트 블랙리스트&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;순환을 만들어내거나 악의적인 함정이 있는 것으로 알려진 사이트와 URL 목록을 만들어 해당 목록들을 피할 수 있습니다. 그리고 문제를 일으키는 URL을 발견하면 이 블랙리스트에 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;패턴 발견&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;앞서 설명한 심벌릭 링크때문에 발생하는것 같은 순환은 일정 패턴을 따르게 됩니다. URL 안에서 일정 패턴이 발견되면 이를 거부하는 방법을 사용할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;콘텐츠 지문(fingerprint)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;콘텐츠 지문은 콘텐츠의 중복을 감지하는 더 직접적인 기술입니다. 앞선 방법들이 URL만 검사를 했다면 콘텐츠 지문은 페이지의 콘텐츠중 일부를 얻어 checksum을 계산합니다. 이 checksum은 페이지 내용에 대한 간략한 표현인데 이는 지문처럼 각 콘텐츠를 식별하는 역할을 합니다.
 이 checksum을 구하는 방법엔 여러가지가 있습니다. MD5와 같은 메세지 요약함수가 checksum을 구하는 방법입니다.
 하지만 이 방법 역시 한계가 있습니다. 해시 함수 처럼 두 페이지가 달라도 checksum이 같을 수도 있습니다. 그리고 같은 컨텐츠에 동적으로 조금씩만 바뀌지만 그 부분이 checksum 함수에 들어가 다른 콘텐츠로 인식할 수도 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;92-로봇의-http&quot;&gt;9.2. 로봇의 HTTP&lt;/h3&gt;

&lt;p&gt;웹 로봇들 역시 기본적으론 HTTP 클라이언트 프로그램입니다. 따라서 HTTP명세를 준수해야 합니다. 하지만 많은 웹 로봇들은 HTTP를 최소한으로만 구현합니다. HTTP/1.1이 있지만 요구사항이 적은 HTTP/1.0을 사용하기도 합니다.(2002년 기준입니다.)&lt;/p&gt;

&lt;h4 id=&quot;921-요청-헤더-식별하기&quot;&gt;9.2.1. 요청 헤더 식별하기&lt;/h4&gt;

&lt;p&gt;최소한으로 구현하는 HTTP 중엔 신원 식별 헤더가 있습니다. 로봇의 능력, 신원, 출신 등을 알려주는 기본적인 헤더들입니다. 기본적인 정보를 알려주면 서버는 크롤러가 식별할 수 있는 형식의 콘텐츠를 돌려줄 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음과 같은 식별헤더가 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User-Agent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버에게 요청을 만든 로봇의 이름을 말해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;로봇의 사용자/관리자의 이메일 주소를 제공합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accept&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버에게 어떤 미디어 타입을 원하는지 말해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;현재 요청 URL을 포함한 문서의 URL을 제공합니다.&lt;/p&gt;

&lt;h4 id=&quot;922-가상-호스팅&quot;&gt;9.2.2. 가상 호스팅&lt;/h4&gt;

&lt;p&gt;요즘엔 가상 호스팅 환경이 많기 때문에 웹 로봇들은 Host 헤더를 지원할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;A서버에서 www.joes-hardware.com과 www.foo.com 두 사이트를 가상호스팅 환경하에서 운영한다고 가정해봅시다. 이때 두 사이트의 실제 IP주소는 같게 됩니다.&lt;/p&gt;

&lt;p&gt;만약, 웹 로봇이 www.foo.com에서 크롤링을 하던 도중 아래와 같이 상대 URL을 사용해 Host헤더 없이 요청을 보냈다고 가정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /index.html HTTP/1.0
User-agent : ShopBot 1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 요청을 받은 A서버는 이 요청이 www.joes-hardware.com에게 온건지, www.foo.com 에게 온건지 확인할 수 없습니다. 따라서 A서버는 기본값으로 설정된 사이트의 /index.html을 찾아 돌려줄 것입니다.&lt;/p&gt;

&lt;p&gt;다른 예시로, 어떤 인터넷 뉴스 회사가 정치적으로 진보, 보수인 뉴스를 가르기 위해 두 개의 다른 도메인을 운영중이라고 가정합니다.&lt;/p&gt;

&lt;p&gt;이때, 진보 성향의 블로그를 운영하는 사람이 진보에 관한 뉴스를 크롤링해 당 지지자들에게 메일로 발송하려 합니다. 이때 위와 같은 상황이 발생하면 보수관련 뉴스 한 가득을 보낼 수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;923-조건부-요청&quot;&gt;9.2.3. 조건부 요청&lt;/h4&gt;

&lt;p&gt;캐시에 대해 배울때 조건부 요청을 알아본적이 있습니다. 특정 일 이후로 변경되었다면, 혹은 특정 버전이 아니라면 등 조건을 붙여 요청을 받아올 수도 있었습니다.&lt;/p&gt;

&lt;p&gt;웹 로봇에서도 이런 조건부 요청을 구현한 웹 로봇들이 있습니다. 인터넷 검색엔진용 크롤러의 경우 콘텐츠가 변경되었을때만 새로 받아오도록 할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;924-응답-다루기&quot;&gt;9.2.4. 응답 다루기&lt;/h4&gt;

&lt;p&gt;대부분의 웹 로봇의 관심사는 GET 메서드로 요청을 받아오는 것이기 때문에 응답을 자세히 다루는 로봇은 드뭅니다. 그러나 조건부 요청 등 서버와 긴밀한 상호작용이 필요한 로봇들은 HTTP의 응답역시 다뤄야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;상태코드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;모든 로봇은 200 OK나 404 Not Found는 이해해야합니다. 로봇이 이해할 수 없는 코드라면, 그 코드의 분류에 맞춰 다뤄야 합니다. 
 또한 모든 서버가 에러 코드를 적절히 반환하진 않습니다. 에러를 기술하는 메세지를 200 OK로 답장 하는 서버도 있으니 이런 점은 항상 염두해 두어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;엔터티&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;응답을 적절히 다루기 위해 웹 로봇들은 html head 부분에 임베딘됭 정보를 찾기도 합니다. head부분의 meta 태그는 리소스에 대해 서버가 아닌 콘텐츠 저자가 포함시긴 정보입니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;HTML&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;HEAD&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Refresh&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1; URL=index.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/HEAD&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 태그는 1초후 index.html로 리다이렉트 하라는 태그입니다. 어떤 서버는 응답을 보내기 전에 html을 파싱해 html안의 meta태그를 http 헤더에 포함시키기도 하지만 어떤 서버는 그렇지 않기 때문에 웹 로봇은 이 엔터디 자체의 정보를 찾아볼수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;925-user-agent-타겟팅&quot;&gt;9.2.5. User-Agent 타겟팅&lt;/h4&gt;

&lt;p&gt;웹 서버 개발자라면 실제 사용자뿐 아니라 많은 웹 로봇들이 자신의 사이트에 방문할 것을 예상해야 합니다. 많은 웹 서버들은 콘텐츠를 온전히 보여주기 위해 요청의 브라우저 종류를 감지해 콘텐츠를 최적화해 보내줍니다.&lt;/p&gt;

&lt;p&gt;그런데 웹 로봇에 대한 대처가 잘 안되어 있다면, 브라우저를 사용안하는 웹 로봇에게 “your browser does not support frames” 같은 에러를 돌려줄 수도 있습니다.&lt;/p&gt;

&lt;p&gt;웹 서버 개발자라면 일반 사용자뿐 아니라 웹 로봇들도 서버를 이용 가능하도록 잘 대처해야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;93-부적절하게-동작하는-로봇들&quot;&gt;9.3. 부적절하게 동작하는 로봇들&lt;/h3&gt;

&lt;p&gt;웹 로봇들은 예상과 다르게 행동할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;폭주하는 로봇&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 로봇은 사람과 비교할수 없을 정도로 엄청나게 빠른 속도로 요청을 만들어 냅니다. 이런 로봇이 순환에 빠진채로 한 서버에 계속 요청을 하게 되면 서버에 과부하를 유발해 다른 사람들 역시 사용하지 못하게 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오래된 URL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;몇몇 로봇은 이미 가지고있는 URL의 목록들을 방문합니다. 이때 URL 목록이 오래되어 로봇들이 존재하지 않는 URL에 계속 요청을 보낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;길고 잘못된 URL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;순환 및 개발상 오류로 로봇이 웹사이트에게 크고 의미없는 URL을 요청할 수 있습니다. URL이 많이 길어지면 상대 서버의 처리능력에 영향을 주고 로그를 어지럽힙니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;호기심이 지나친 로봇&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떤 로봇들은 사적인 데이터혹은 밖으로 드러나길 원하지 않는 컨텐츠에 대한 URL을 얻어 접근을 시도합니다. 이런 일은 개발자의 실수로 공개되면 안될 URL이 링크로 노출될때 발생합니다. 또, 직접적으로 URL을 노출하지 않더라도 디렉토리 URL로 접근시 index.html같은 기본 페이지를 내놓지 않고 해당 디렉토리 아래있는 콘텐츠들을 보여주는 경우에 발생할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/directory_url.png&quot; alt=&quot;directory_url.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;포스트를 작성하고 있는 jekyll 서버는 디렉토리 url을 요청시 index.html 파일이 없으면 위와 같은 디렉토리 구조를 노출합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/directory_url2.png&quot; alt=&quot;directory_url2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Github page에선 index.html이 없는 디렉토리 url을 요청시 404  Not Found 페이지를 돌려줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;동적 게이트웨이 접근&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;앞 장에서 서버내 프로그램과 연결해주는 게이트웨이를 소개시켜드린바 있습니다. 웹 로봇은 이런 게이트웨이 어플리케이션이 갖는 콘텐츠에 대한 URL요청도 할 수 있습니다. 그런데 대게 이런 콘텐츠들은 특수 목적을 위한 것이어서 처리 비용이 많이드는 편입니다. 서버 개발자들은 이런 로봇들을 좋아하지 않습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;94-로봇-차단하기&quot;&gt;9.4. 로봇 차단하기&lt;/h3&gt;

&lt;h4 id=&quot;941-로봇-차단-표준&quot;&gt;9.4.1. 로봇 차단 표준&lt;/h4&gt;

&lt;h4 id=&quot;942-웹-사이트와-robotstxt-파일들&quot;&gt;9.4.2. 웹 사이트와 robots.txt 파일들&lt;/h4&gt;

&lt;h4 id=&quot;943-robotstxt-파일-포뱃&quot;&gt;9.4.3. robots.txt 파일 포뱃&lt;/h4&gt;

&lt;h4 id=&quot;944-그-외에-알아둘-점&quot;&gt;9.4.4. 그 외에 알아둘 점&lt;/h4&gt;

&lt;h4 id=&quot;945-robotstxt의-캐싱과-만료&quot;&gt;9.4.5. robots.txt의 캐싱과 만료&lt;/h4&gt;

&lt;h4 id=&quot;946-로봇-차단-펄-코드&quot;&gt;9.4.6. 로봇 차단 펄 코드&lt;/h4&gt;

&lt;h4 id=&quot;947-html-로봇-제어-meta-태그&quot;&gt;9.4.7. HTML 로봇 제어 META 태그&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;95-로봇-에티켓&quot;&gt;9.5. 로봇 에티켓&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;96-검색엔진&quot;&gt;9.6. 검색엔진&lt;/h3&gt;

&lt;h4 id=&quot;961-넓게-생각하라&quot;&gt;9.6.1. 넓게 생각하라&lt;/h4&gt;

&lt;h4 id=&quot;962-현대적인-검색엔진의-아키텍처&quot;&gt;9.6.2. 현대적인 검색엔진의 아키텍처&lt;/h4&gt;

&lt;h4 id=&quot;963-풀-텍스트-색인&quot;&gt;9.6.3. 풀 텍스트 색인&lt;/h4&gt;

&lt;h4 id=&quot;964-질의-보내기&quot;&gt;9.6.4. 질의 보내기&lt;/h4&gt;

&lt;h4 id=&quot;965-검색-결과를-정렬하고-보여주기&quot;&gt;9.6.5. 검색 결과를 정렬하고 보여주기&lt;/h4&gt;

&lt;h4 id=&quot;966-스푸핑&quot;&gt;9.6.6. 스푸핑&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>통합점 - 게이트웨이, 터널, 릴레이</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C8/"/>
   <updated>2020-03-18T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드8</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;이번 장에선 HTTP 프로토콜이 다른 프로토콜과 만나는 다음 4개의 지점들에 대해 알아볼 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;게이트웨이 : 서로 다른 프로토콜과 애플리케이션간의 HTTP인터페이스. 다른 프로토콜이 HTTP로, HTTP가 다른 프로토콜로 변환되는 지점&lt;/li&gt;
  &lt;li&gt;애플리케이션 인터페이스 : 서로 다른 형식의 웹 애플리케이션이 통신하는데 사용&lt;/li&gt;
  &lt;li&gt;터널 : HTTP 커넥션을 통해 다른 프로토콜의 트래픽을 전송&lt;/li&gt;
  &lt;li&gt;릴레이 : 단순한 HTTP 프록시로, 한 번에 한 개의 홉에 데이터를 전달.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;81-게이트웨이&quot;&gt;8.1. 게이트웨이&lt;/h3&gt;

&lt;p&gt;웹은 다양하고 많은 리소스를 가지고 있어, 한개의 서버만으론 모든 리소스를 관리하기 힘들어졌습니다. 이에 따라 인터프리터와 같이 리소스를 받기위한 경로를 안내하는 역할의 게이트웨이들이 등장하기 시작했습니다.&lt;/p&gt;

&lt;p&gt;게이트웨이의 역할은 리소스와 애플리케이션을 연결하는 것입니다. 게이트웨이는 리소스를 가져올 수 있는 적합한 프로토콜을 사용해 리소스를 가져와 애플리케이션이 원하는 프로토콜로 보내줍니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/FTP 게이트웨이 : 클라이언트의 HTTP요청이 FTP서버에 있는 파일을 가리킬때 요청은 게이트웨이를 통과해 FTP 서버에서 파일을 가져와 HTTP로 돌려줍니다.&lt;/li&gt;
  &lt;li&gt;HTTP/HTTPS 게이트웨이 : 게이트웨이가 SSL요청을 받고 해독해 HTTP 요청으로 바꿔 원 서버에게 전달합니다. 이런 보안 가속기 게이트웨이는 보통 웹 서버의 바로 앞단에 위치합니다.&lt;/li&gt;
  &lt;li&gt;HTTP/CGI 게이트웨이 : HTTP 요청을 받은 뒤 CGI를 통해 서버 안의 애플리케이션으로 보내고, 받아온 리소스를 다시 HTTP로 돌려줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;811-클라이언트-측-게이트웨이와-서버-측-게이트웨이&quot;&gt;8.1.1. 클라이언트 측 게이트웨이와 서버 측 게이트웨이&lt;/h4&gt;

&lt;p&gt;앞의 예에서 HTTP/FTP, HTTP/HTTPS, HTTP/CGI와 같이 표현했습니다. 이와 같이 게이트웨이가 변환하는 프로토콜은&lt;/p&gt;

&lt;blockquote&gt;
  &lt;클라이언트 프로토콜=&quot;&quot;&gt;/&lt;서버 프로토콜=&quot;&quot;&gt;
&lt;/서버&gt;&lt;/클라이언트&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같이 표현합니다.&lt;/p&gt;

&lt;p&gt;그리고 앞으로 ‘서버 측 게이트웨이’와 ‘클라이언트 측 게이트웨이’라는 용어가 등장할 것입니다. 이는 게이트웨이가 어느쪽 역할을 하고 있는지 말해줍니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서버 측 게이트웨이 : &lt;HTTP&gt;/&lt;기타 프로토콜=&quot;&quot;&gt;&lt;/기타&gt;&lt;/HTTP&gt;&lt;/li&gt;
  &lt;li&gt;클라이언트 측 게이트웨이 : &lt;기타 프로토콜=&quot;&quot;&gt;/&lt;HTTP&gt;&lt;/HTTP&gt;&lt;/기타&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;82-프로토콜-게이트웨이&quot;&gt;8.2. 프로토콜 게이트웨이&lt;/h3&gt;

&lt;p&gt;이번 절에선 네트워크상 클라이언트와 서버를 연결해 주는 게이트웨이를 알아볼 것입니다.(다음 절에선 서버 내에서 서버와 다른 리소스 서버를 연결하는 게이트웨이를 알아 봅니다.)&lt;/p&gt;

&lt;h4 id=&quot;821-http-서버-측-웹-게이트웨이&quot;&gt;8.2.1. HTTP/*: 서버 측 웹 게이트웨이&lt;/h4&gt;

&lt;p&gt;서버 측 웹 게이트웨이는 클라이언트의 HTTP 요청을 받아 HTTP가 아닌 다른 프로토콜을 사용하는 서버와 연결해줍니다. HTTP/FTP 게이트웨이나 HTTP/HTTPS 같은 게이트웨이 입니다.&lt;/p&gt;

&lt;p&gt;책엔 HTTP/FTP 게이트웨이에 관한 예시가 나와 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/http_ftp_gateway.png&quot; alt=&quot;http_ftp_gateway&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;822-httphttps-서버-측-보안-게이트웨이&quot;&gt;8.2.2. HTTP/HTTPS: 서버 측 보안 게이트웨이&lt;/h4&gt;

&lt;p&gt;기업 내부로 들어오는 모든 HTTP 요청을 암호화 하여 고객들의 개인정보를 보호하고 보안을 제공해주는 게이트웨이 입니다.&lt;/p&gt;

&lt;p&gt;클라이언트는 일반적인 HTTP URL을 사용하지만 게이트웨이에서 자동으로 사용자의 모든 세션을 암호화 합니다.&lt;/p&gt;

&lt;h4 id=&quot;823-httpshttp-클라이언트-측-보안-가속-게이트웨이&quot;&gt;8.2.3. HTTPS/HTTP: 클라이언트 측 보안 가속 게이트웨이&lt;/h4&gt;

&lt;p&gt;요즘은 브라우저에서 기본적으로 http:// 가 아닌 https://를 많이 사용한다는 것은 알 것입니다. 이를 HTTP 서버와 통신시키기 위해선 HTTPS/HTTP 게이트웨이가 필요합니다. 이런 게이트웨이를 ‘보안 가속기’라고 부릅니다.&lt;/p&gt;

&lt;p&gt;클라이언트의 암호화된 요청인 HTTPS 요청을 받아들여 이를 해독하고 웹 서버엔 일반 HTTP 요청을 보냅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/https_http_gateway.png&quot; alt=&quot;https_http_gateway&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 옮긴이에 따르면 요즘엔 대부분 SSL 암/복호화 모듈을 서버에 내장한다고 합니다. 로드 밸런서 중에도 SSL 모듈을 내장해 보안 가속기 게이트웨이의 역할을 해준다고 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;83-리소스-게이트웨이&quot;&gt;8.3. 리소스 게이트웨이&lt;/h3&gt;

&lt;p&gt;전 절에서 소개한 게이트웨이는 클라이언트와 서버 사이를 이어주는 게이트웨이였습니다. 한편, 가장 일반적인 형태의 게이트웨이인 애플리케이션 서버는 목적지 서버와 게이트웨이를 한 개의 서버로 결합해주는 역할을 합니다.  클라이언트와 HTTP로 통신하고, 서버 내에 있는 애플리케이션 프로그램들과도 연결됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/application_server_gateway.png&quot; alt=&quot;application_server_gateway&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림에서 하나의 서버에 두 클라이언트가 각기 다른 요청을 보내고 있습니다. 애플리케이션 서버는 게이트웨이의 API를 이용해 서버 내에 동작하고 있는 프로그램과 연결됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트 A의 요청을 받은 애플리케이션 서버는 API를 이용해 서버내 카메라 관련 프로그램과 통신했습니다. 프로그램이 돌려준 결과물을 클라이언트에게 HTTP로 돌려줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트 B의 요청을 받은 애플리케이션 서버는 서버 내 전자상거래 어플리케이션과 통신합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;애플리케이션 서버가 사용하는 API중 최초로 널리쓰이게된 API는 CGI(Common Gateway Interface)입니다. 전 포스팅이나 앞에서도 계속 언급됐던 기술이죠.&lt;/p&gt;

&lt;p&gt;CGI는 말 그대로 인터페이스입니다. 애플리케이션 서버와 서버내 프로그램이 서로 통신할때 필요한 행동들(프로그램 실행, 프로그램 출력 수집, HTTP응답 회신 등…)을 모아놓은 것이죠.&lt;/p&gt;

&lt;p&gt;애플리케이션 서버에 요청이 들어오면 서버는 헬퍼 애플리케이션을 생성합니다. 이때 헬퍼 애플리케이션이 CGI를 구현한 프로그램입니다. CGI 프로그램인 헬퍼 어플리케이션이 필요한 데이터를 받고 서버 내 프로그램과 통신해 결과를 받아 서버에 반환합니다.&lt;/p&gt;

&lt;h4 id=&quot;831-공용-게이트웨이-인터페이스cgi&quot;&gt;8.3.1. 공용 게이트웨이 인터페이스(CGI)&lt;/h4&gt;

&lt;p&gt;CGI가 하는 역할을 때문에 CGI를 ‘서버 확장’이라고도 합니다. CGI는 최초로 널리쓰인 서버 확장이고 아직까지도  사용됩니다.(물론 책이 쓰여진 2002년 기준이고, 2020년 현재엔 초기 CGI는 찾아보기 힘듭니다.)&lt;/p&gt;

&lt;p&gt;CGI 애플리케이션은 Perl, C, Python 등 다양한 언어로 구현할 수 있습니다. 그리고 CGI자체가 단순하여 거의 모든 HTTP 서버가 지원합니다.&lt;/p&gt;

&lt;p&gt;CGI 애플리케이션이 어떻게 요청을 처리하는지는 사용자에게 보여지지 않습니다. 진행되는 처리 단계를 감추고, 잘못된 요청 및 데이터로부터 서버를 보호해줍니다.&lt;/p&gt;

&lt;p&gt;하지만 역시 단점도 있습니다. 기본적으론 각 요청마다 CGI 프로그램의 프로세스가 하나씩 생깁니다. 요청이 많아지면 이에 따른 부하 역시 커집니다. 이를 해결하고자 새로운 CGI인 Fast CGI등이 개발됐습니다. FastCGI는 데몬(Daemon, 사용자가 직접 제어하지 않고, 백그라운드에서 돌며 여러 작업을 하는 프로그램)으로 실행되어 매 요청마다 프로세스를 생성하지 않습니다.&lt;/p&gt;

&lt;p&gt;책이 쓰여진 시점이 아닌 2020년 현재엔 요청마다 CGI 프로세스를 만드는 방식은 거의 안쓰인다고 보면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;832-서버-확장-api&quot;&gt;8.3.2. 서버 확장 API&lt;/h4&gt;

&lt;p&gt;CGI 프로토콜은 구동 중인 서버에 외부 인터프리터가 접속하는 것을 도와줍니다. 하지만 서버 자체의 동작을 바꾸거나, 서버의 처리능력을 더 끌어올리기 위해선 외부에서 서버로 직접 연결할수 있어야 합니다. 이를 위해 만들어진 것이 서버 확장 API입니다.&lt;/p&gt;

&lt;p&gt;확장 API는 개발자가 외부에서 자신이 작성한 코드를 서버에 연결하거나, 서버의 컴포넌트를 자신이 만든 것으로 교체할 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;아파치, 마이크로소프트, 넷스케이프와 같은 대중적인 서버의 대부분은 확장 API를 한개 이상 제공합니다. 서버 확장의 한 가지 예는 마이크로소프트의 프론트페이지 서버 확장(FPSE, FrontPage Server Extension)입니다. FPSE는 클라이언트에서 전송되는 원격 프로시져 호출(RPC, Remote Procedure Call)명령을 인식할 수 있습니다. 클라이언트 쪽에서 서버에 직접 명령을 내릴 수 있는 것이죠. 이 명령이 HTTP에 편승해 옵니다. 19장에서 더 자세히 볼 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;84-애플리케이션-인터페이스와-웹-서비스&quot;&gt;8.4. 애플리케이션 인터페이스와 웹 서비스&lt;/h3&gt;

&lt;p&gt;앞서 살펴본 것 처럼 HTTP는 애플리케이션을 연결하는 도구로 사용됩니다. 이때 항상 생기는 이슈는 두 애플리케이션 사이에서 프로토콜의 인터페이스를 조율하는 일입니다.&lt;/p&gt;

&lt;p&gt;HTTP 헤더만으로 표현하기 힘든 정보를 교환해야 할때 HTTP를 확장하기도하고 HTTP위에 프로토콜을 덧씌우기도 합니다. 이는 19장에서 자세히 알아볼것입니다.&lt;/p&gt;

&lt;p&gt;인터넷 커뮤니티들에선 웹 어플리케이션들이 서로 통신하는데 사용할 표준과 프로토콜 집합을 계속 개발해오고 있습니다. 이런 기술들은 모두 HTTP같은 웹 표준 기술 위에서 개발됩니다. 이런 기술을 ‘웹 서비스’라고도 합니다.(원래 웹 서비스는 독립적인 웹 어플리케이션 자체를 뜻하지만 이런 기술 역시 웹 서비스라고 불리게 되었습니다.)&lt;/p&gt;

&lt;p&gt;대표적인 웹 서비스 기술로는 SOAP(Simple Object Access Protocol)을 통한 XML(eXtensible Markup Language)교환입니다. 애플리케이션끼리 SOAP 프로토콜을 사용해 XML 형식의 데이터를 주고받습니다. 이 방식은 근래(2020년)엔 REST(Representational State Transfer) 방식을 이용한 JSON(JavaScript Object Notation) 교환으로 많이 바뀌었습니다. 개발을 시작한지 얼마 되지 않은 저에겐 SOAP, XML보다 REST, JSON이 더 익숙합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;85-터널&quot;&gt;8.5. 터널&lt;/h3&gt;

&lt;p&gt;지금까지 게이트웨이, 웹 서비스에 대해 알아봤습니다. 지금부터 볼 웹 터널은 HTTP프로토콜과 다른 프로토콜을 연결하는 다른 방법입니다.&lt;/p&gt;

&lt;p&gt;웹 터널은 쉽게 말해 HTTP 커넥션을 통해 HTTP가 아닌 트래픽을 전송할수 있고, 다른 프로토콜을 HTTP 위에 올릴 수 있는 기술입니다. 주된 사용 이유는 HTTP가 아닌 트래픽을 전송하기 위해서입니다. 만약 HTTP 트래픽만 허용하는 방화벽이 있다면, 일반적인 방법으론 다른 트래픽이 이 방화벽을 넘을 수 없지만 터널을 사용하면 다른 트래픽도 HTTP 처럼 넘길 수 있게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;851-connect로-http-터널-커넥션-맺기&quot;&gt;8.5.1. CONNECT로 HTTP 터널 커넥션 맺기&lt;/h4&gt;

&lt;p&gt;HTTP 커넥션을 통해 다른 트래픽을 넘기기 위해서 우선 HTTP 커넥션을 맺어야 합니다. 커넥션을 맺는데는 CONNECT 메서드가 사용됩니다.&lt;/p&gt;

&lt;p&gt;CONNECT 메서드 요청을 받은 게이트웨이는 목적지 서버와 TCP 커넥션을 맺습니다. 그리고 클라이언트와 목적지 서버가 주고받는 데이터들을 무조건 전달합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/tunnel.png&quot; alt=&quot;tunnel.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예시 그림은 SSL 트래픽이 터널을 통해 전송되는 SSL 터널을 묘사한 것입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트는 게이트웨이에 터널을 연결하기 위해 CONNECT 요청을 보냅니다. 요청 URL은 목적지 서버입니다.&lt;/li&gt;
  &lt;li&gt;CONNECT요청을 받은 게이트웨이가 목적지 서버와 TCP 커넥션을 맺습니다.&lt;/li&gt;
  &lt;li&gt;게이트웨이와 목적지 서버의 TCP 커넥션이 맺어지면 클라이언트에게 준비가 됐다고 메세지를 보냅니다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 메세지를 받았다면 이 시점부터 터널이 연결된 것입니다. 이 HTTP 터널을 통해 전송된 데이터는 위 그림과 같이 TCP 커넥션을 통해 바로 목적지 서버에게 전달되고, 목적지 서버가 응답한 데이터도 바로 클라이언트에게 돌아옵니다.(이때, HTTP 메세지 형식으로 돌아오는게 아니라 보낸 데이터 그대로 돌아온다는걸 주의합시다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;CONNECT 요청&lt;/strong&gt;
 CONNECT 요청의 문법은 시작줄을 제외하곤 다른 HTTP 메서드와 같습니다. 요청 URI는 목적지 서버의 URI입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONNECT 응답&lt;/strong&gt;
 보낸 CONNECT 요청에 대해 200 응답이 오면 터널이 맺어집니다. 이때 200 코드에 대한 사유구절은 보통 ‘Connection Established’를 많이 사용합니다. 
 일반적인 HTTP 응답과 달리 Content-Type 헤더를 포함할 필요는 없습니다. 터널이 맺어지면 HTTP 메세지를 전송하는게 아니라 바이트를 그대로 전달하기 때문입니다.&lt;/p&gt;

&lt;h4 id=&quot;852-데이터-터널링-시간-커넥션-관리&quot;&gt;8.5.2. 데이터 터널링, 시간, 커넥션 관리&lt;/h4&gt;

&lt;p&gt;터널이 맺어진뒤 터널을 통해 전달되는 데이터는 터널을 맺게 도와준 게이트웨이에선 볼 수 없습니다. 게이트웨이는 패킷의 순서나 흐름을 건드릴 수 없습니다.&lt;/p&gt;

&lt;p&gt;터널의 성능을 높이기 위해 클라이언트는 CONNECT 요청을 보내고 이에 대한 응답을 받기 전에 미리 터널 데이터를 전송하기도 합니다. 이 방법은 성공한다면 더 빠른 응답을 얻을 수 있지만, 게이트웨이도 이와 같은 방식에 대응할 수 있도록 준비가 되어 있어야 사용할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;853-ssl-터널링&quot;&gt;8.5.3. SSL 터널링&lt;/h4&gt;

&lt;p&gt;웹 터널의 본래 등장 목적은 SSL트래픽을 방화벽 너머로 전달하기 위함입니다. 많은 회사에서 보안을 이유로 모든 트래픽이 패킷들을 필터링하는 라우터 및 프록시를 지나게 해두었습니다. 그런데 SSL 프로토콜은 낡은 방식의 프록시에선 처리되지 않습니다.(요즘엔 내장되어 있습니다.) 따라서 SSL 트래픽을 낡은 방화벽 프록시 뒤로 넘기기 위해 터널이 사용되기 시작했습니다.&lt;/p&gt;

&lt;p&gt;하지만 이후 이런 터널은 만들지 않고도 SSL트래픽이 방화벽을 넘을 수 있도록 HTTP에 ‘터널링’기능이 추가 됐습니다. 터널링 기능은 HTTP 메세지에 암호화된 SSL raw 데이터를 담아 전송하는 것입니다. 아래 그림을 보시겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/tunneling.png&quot; alt=&quot;tunneling.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(a)는 SSL 트래픽이 보안 웹 서버의 443 포트로 바로 들어가는 상황이고 (b)는 SSL 데이터가 HTTP 메세지에 담겨 80 포트로 들어간 다음 SSL 트래픽이 보안 웹 서버로 이어지는 상황입니다.&lt;/p&gt;

&lt;p&gt;이런 터널링은 방화벽을 뚫는데 유용하게 사용되지만, 악의적인 트래픽이 방화벽 안으로 유입되는 통로가 되기도 합니다.&lt;/p&gt;

&lt;h4 id=&quot;854-ssl-터널링-vs-httphttps-게이트웨이&quot;&gt;8.5.4. SSL 터널링 vs HTTP/HTTPS 게이트웨이&lt;/h4&gt;

&lt;p&gt;앞서 웹 서버에 보안이 필요한 경우 HTTP/HTTPS 게이트웨이를 사용하는 방법을 알아보았습니다. 클라이언트는 일반 요청을 보내고 중간의 게이트웨이가 SSL 인증을 담당하는 방법이었죠. 이 방법엔  다음과 같은 단점이 존재합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트-게이트웨이 사이엔 보안이 적용되지 않은 일반 HTTP 커넥션이 맺어져 있습니다.&lt;/li&gt;
  &lt;li&gt;프록시(게이트웨이)가 인증을 담당하고 있기 때문에, 클라이언트는 원격 서버에 직접 SSL 인증을 할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;게이트웨이가 SSL을 완벽하게 지원해야 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;방금 알아본 SSL 터널링은 위와 같은 단점을 해결해줍니다. 클라이언트와 서버가 직접 커넥션을 맺기 때문에 중간에 보안이 취약한 지점이 없어집니다. 중간의 프록시는 암호화된 데이터를 그대로 넘길 뿐입니다.&lt;/p&gt;

&lt;h4 id=&quot;855-터널-인증&quot;&gt;8.5.5. 터널 인증&lt;/h4&gt;

&lt;p&gt;하지만 이런 터널을 모든 클라이언트에게 자유롭게 허용한다면 오히려 악의적인 트래픽이 서버로 들어오는 것을 허용하게 됩니다. 게이트웨이에서 클라이언트가 터널을 사용할 수 있는 권한을 갖고 있는지 검사할 수 있습니다.&lt;/p&gt;

&lt;p&gt;클라이언트가 적절한 인증 수단 없이 아래와 같은 요청을 보냈다면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser 4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;게이트웨이는 다음과 같은 연결 실패 및 인증 요구 메세지를 보내게 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.0 407 Proxy authentication required
Proxy-authenticate: Basic realm=&quot;wormhole&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클라이언트가 아래와 같이 Proxy-authorization 헤더에 적절한 인증 수단을 담아 요청한다면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser 4.2
Proxy-authorization: Basic Tnkmwlq31rWERg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;게이트웨이는 보안 서버와 커넥션을 맺은 뒤 클라이언트에게 터널 연결 성공 메세지를 보내게 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.0 200 Connection established
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;856-터널-보안에-대한-고려사항들&quot;&gt;8.5.6. 터널 보안에 대한 고려사항들&lt;/h4&gt;

&lt;p&gt;터널의 한계 역시 존재합니다. 터널 연결에 성공하면 터널 게이트웨이에선 클라이언트가 이 터널을 올바른 용도로 사용하는지 확인할 방법이 없습니다. 예를들어, 사내 방화벽에 터널을 생성해 게임 트래픽을 사내로 유입할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;이런 터널의 오용을 최소화 하기 위해 게이트웨이는 HTTPS 전용포트인 443과 같은 특정 포트만을 터널링에 허용해야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;86-릴레이&quot;&gt;8.6. 릴레이&lt;/h3&gt;

&lt;p&gt;릴레이는 HTTP 프록시중 하나입니다. 릴레이는 HTTP명세를 준수하지 않고 만들어져 받은 바이트를 거의 맹목적으로 전달합니다.&lt;/p&gt;

&lt;p&gt;HTTP메세지는 복잡하기 때문에 메서드관련 로직과 헤더를 처리하는 건 간단한 일은 아닙니다. 릴레이는 이런 상황에서 &lt;strong&gt;단순 필터링이나 진단, 콘텐츠 변환 등의 간단한 작업&lt;/strong&gt;만을 수행하고 넘깁니다.&lt;/p&gt;

&lt;p&gt;하지만 이런 단순함은 역시 문제를 만들 수 있습니다. 대표적인 문제중 하나가 Connection 헤더를 처리하지 못해 생기는 문제입니다. 이는 이전 장에서 Connection 헤더를 이해하지 못하는 Dumb Proxy문제와 일치합니다. (릴레이도 프록시이기 때문에 정확히 같은 문제입니다.)&lt;/p&gt;

&lt;p&gt;복습할겸 Dumb Proxy의 문제의 과정을 다시 한번 짚어보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 Connetion : Keep-Alive 헤더를 포함한 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;릴레이는 Connection 헤더를 이해하지 못하기 때문에 요청을 그대로 서버에 넘깁니다. 하지만, Connection 헤더는 hop by hop 에서만 사용되는 헤더입니다. 다음으로 넘어가기 전에 삭제되어야 하는 헤더입니다. 여기서 문제가 발생합니다.&lt;/li&gt;
  &lt;li&gt;릴레이가 넘긴 Connection : Keep-Alive 헤더는 서버에게 전달됩니다. 서버는 요청을 한 상대방이 지속 커넥션을 원한다고 생각하고 Connection : Keep-Alive 헤더를 담은 응답 메세지를 보내  지속 커넥션을 맺습니다.&lt;/li&gt;
  &lt;li&gt;릴레이는 이 서버의 응답 역시 그대로 클라이언트에게 전달합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트 역시 이 응답을 받고 지속 커넥션이 제대로 이루어졌다고 생각합니다. 그리고 그 커넥션으로 다음 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;하지만 릴레이는 Connection에 대해 모르기 때문에 서버쪽으론 커넥션을 닫겠다는 응답을 기다리고 있습니다. 그리고 클라이언트쪽에선 다시 같은 커넥션으로 요청이 올거라 생각하지 않기 때문에 클라이언트쪽을 listen 하고 있지 않습니다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 보낸 요청은 릴레이를 통과하지 못하고 걸려있게 됩니다. 이렇게 시간이 흐르고 커넥션의 유효기간이 끝나면 커넥션이 종료됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이런 위험을 방지하기 위해 조금 더 똑똑한 릴레이를 만들기도 합니다. 하지만 가장 좋은건 HTTP명세를 준수하는 프록시를 사용하는 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;이번 장은 개념 하나하나 마다 그 개념에 대한 포스팅을 해야되나 싶을 정도로 낯선 개념이 많았던 장이었습니다. 앞까지의 내용들은 어깨너머로 배운 지식들로 잘 조합하고 끼워 맞출 수 있었는데 이제 슬슬 밑천이 드러나는 것 같습니다. :sweat_smile:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>웹 캐시</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C7/"/>
   <updated>2020-03-17T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드7</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;웹 캐시는 자주 쓰이는 문서들의 사본을 자동으로 보관 및 관리하는 HTTP 장치입니다. 요청이 캐시에 왔을때 원하는 리소스의 사본이 존재하면 원 서버까지 요청이 가지 않고 캐시에서 제공됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;불필요한 데이터 전송을 줄일 수있다 -&amp;gt; 네트워크 비용 감소&lt;/li&gt;
  &lt;li&gt;네트워크 병목을 줄여준다 -&amp;gt; 대역폭을 늘리지 않더라도 응답시간 줄일 수 있다.&lt;/li&gt;
  &lt;li&gt;원 서버까지 가는 요청을 줄여준다 -&amp;gt; 원 서버의 부하를 감소시킬 수 있다.&lt;/li&gt;
  &lt;li&gt;지역별로 캐시를 둬 거리로 인한 지연을 줄여준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 혜택을 얻을 수 있는 캐시의 동작 원리 및 특징을 알아보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;71-불필요한-데이터-전송&quot;&gt;7.1. 불필요한 데이터 전송&lt;/h3&gt;

&lt;p&gt;대부분의 서버는 다수의 클라이언트를 상대합니다. 다수의 클라이언트로부터 같은 요청이 온다면 서버는 같은 데이터를 반복적으로 전송하게 됩니다.&lt;/p&gt;

&lt;p&gt;이런 불필요한 데이터 전송은 네트워크 대역폭을 잡아먹고, 전송을 느리게 만들며 서버에 부하를 줍니다.&lt;/p&gt;

&lt;p&gt;캐시를 사용하면 서버에서 나온 응답이 캐시에 보관됩니다. 요청은 캐시로 들어가 같은 요청에 대한 응답 사본이 있다면 캐시에서 응답의 사본을 돌려줍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;72-대역폭-병목&quot;&gt;7.2. 대역폭 병목&lt;/h3&gt;

&lt;p&gt;캐시는 네트워크 병목을 줄여줍니다. 대부분의 네트워크가 &lt;a href=&quot;test&quot; title=&quot;툴팁되나&quot;&gt;WAN&lt;/a&gt;보다 LAN에서 훨씬 더 넓은 대역폭을 제공합니다.
 캐시를 LAN망 안에 두게 된다면 좁은 WAN을 통과하지 않아 네트워크 병목을 줄여 지연을 감소시킬 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;73-갑작스런-요청-쇄도flash-crowds&quot;&gt;7.3. 갑작스런 요청 쇄도(Flash Crowds)&lt;/h3&gt;

&lt;p&gt;사회적 사건 혹은 기업의 이벤트 때문에 갑작스럽게 요청이 급증하는 경우가 있습니다. 이렇게 많은 사람들의 요청이 급증할 때에 캐싱을 사용한다면 서버의 부하를 많이 줄여줄 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;74-거리로-인한-지연&quot;&gt;7.4. 거리로 인한 지연&lt;/h3&gt;

&lt;p&gt;우리가 사용하는 인터넷은 물리적인 망을 가지고 있습니다. 복잡한 페이지를 로드하기 위해 지구 반대편의 원 서버로 수십개의 요청을 보낸다면 아무리 요청이 빛의 속도로 이동한다고 해도 유의미한 지연이 발생할 수 밖에 없습니다.&lt;/p&gt;

&lt;p&gt;각 지역별로 캐시를 두는 일은 대역폭을 확보하는 것 뿐 아니라 실제 물리적인 거리에 따른 지연도 줄일 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;75-적중과-부적중&quot;&gt;7.5. 적중과 부적중&lt;/h3&gt;

&lt;p&gt;캐시는 원 서버의 모든 리소스 사본을 저장하진 않습니다. 그리고 저장 한다고 하더라도, 어떤 리소스들은 자주 수정될 수 있습니다.&lt;/p&gt;

&lt;p&gt;캐시에 요청이 도착했을때 요청에 대해 캐시에서 사본을 찾아 응답을 줄 수 있다면 ‘적중(cache hit)’, 캐시에 사본이 없어 원 서버로 요청이 가야 한다면 ‘부적중(cache miss)’이라고 합니다.&lt;/p&gt;

&lt;h4 id=&quot;751-재검사revalidation&quot;&gt;7.5.1. 재검사(Revalidation)&lt;/h4&gt;

&lt;p&gt;원 서버의 리소스는 언제든지 변경될 수 있습니다. 그렇기 때문에 캐시는 때때로 가지고 있는 사본이 최신의 사본인지 검사해야 합니다. 언제 점검할지는 캐시의 정책에 따라 달라집니다. 이런 신선도 검사를 HTTP 재검사라고 부릅니다.&lt;/p&gt;

&lt;p&gt;재검사 결과 리소스가 변경되지 않았다면 캐시는 사본이 아직 신선하다고 표시한뒤 클라이언트에게 사본을 돌려줍니다. 이를 ‘재검사 적중’ 혹은 ‘느린 적중’ 이라고 부릅니다. 이는 당연히 순수 캐시 적중보단 느립니다. 하지만 서버로부터 객체를 받아올 필요가 없기 때문에 캐시 부적중 보단 바릅니다.&lt;/p&gt;

&lt;p&gt;캐시의 정책상 재검사가 필요할 때, 원 서버에 작은 재검사 요청을 보냅니다. 작은 재검사 요청을 보내기 위해 쓰이는 몇 가지 방법이 있는데 가장 널리 쓰이는 방법은 ‘If-Modified-Since’헤더를 보내는 것입니다. 이때 서버의 반응은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;재검사 적중&lt;/strong&gt;
 서버가 검사를 해본뒤 리소스가 변경되지 않았다면 클라이언트에게 작은 304 Not Modified 응답을 보냅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;재검사 부적중&lt;/strong&gt;
 만약 요청 받은 리소스가 변경 됐다면 서버는 변경된 리소스 전체와 함께 평범한 HTTP 200 OK응답을 보냅니다. 캐시는 응답을 받아 사본을 갱신하고 클라이언트에게 전송합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;객체 삭제&lt;/strong&gt;
 만약 요청 받은 리소스가 서버에 없다면, 서버는 404 Not Found 응답을 돌려보내고, 이를 받은 캐시는 사본을 삭제한 뒤 클라이언트에게 404 Not Found 응답을 돌려줍니다.&lt;/p&gt;

&lt;h4 id=&quot;752-적중률&quot;&gt;7.5.2. 적중률&lt;/h4&gt;

&lt;p&gt;캐시가 요청을 처리하는 비율을 캐시 적중률 or 캐시 적중비 라고 부릅니다. 대게 여기서 말하는 ‘적중’은 ‘재검사 적중’을 제외한 순수 ‘적중’을 말하지만 때에 따라 재검사 적중을 포함해 적중률을 계산하는 곳도 있으니 염두해 두면 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;캐시 적중률은 예측하기 어려운 것으로 악명 높습니다. 캐시 적중률은 높으면 높을수록 좋지만 적중률 40%정도면 웹 캐시로서 괜찮은 편입니다.(책이 처음 쓰여진 때가 2002년임을 감안해 수치를 너무 맹신하지 않는게 좋을 것 같습니다.)&lt;/p&gt;

&lt;p&gt;엄청나게 큰 캐시가 아닌 적당한 크기의 캐시도 자주 쓰이는 문서들을 저장하기엔 충분하고 유의미하게 트래픽을 줄이고 서버 성능을 개선할 수 있는 것으로 알려져 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;753-바이트-적중률&quot;&gt;7.5.3. 바이트 적중률&lt;/h4&gt;

&lt;p&gt;방금 살펴본 캐시 적중률은 요청의 갯수별 적중률 입니다. 하지만 이런 의문을 제기할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘작은 콘텐츠와 큰 콘텐츠가 트래픽을 차지하는 비중이 다른데 둘을 같게 봐도 되나?’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그래서 필요한 적중률이 바이트 적중률입니다. 바이트 적중률은 캐시에서 나간 바이트중 캐시에서 바로 제공된 바이트의 비율을 뜻합니다. 실제 트래픽 절감을 측정할 수 있으며, 주로 바이트별 요금을 산정해야 되는 곳에서 사용됩니다.&lt;/p&gt;

&lt;p&gt;바이트 적중률 100%는 모든 요청이 서버를 거치지 않고 바로 캐시에서 나갔음을 뜻합니다.&lt;/p&gt;

&lt;h4 id=&quot;754-적중과-부적중의-구별&quot;&gt;7.5.4. 적중과 부적중의 구별&lt;/h4&gt;

&lt;p&gt;이런 상황에서 클라이언트는 자신이 받은 응답이 캐시에서 나온 사본인지, 원 서버에서 온 원본인지 궁금할 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 HTTP에선 이를 말해주는 엄격한 방법은 제공해주지 않습니다. 대신 아래와 같은 임시 대안들이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 상용 프록시 캐시들은 캐시에서 무슨 일이 일어났는지 설명하기 위해 Via 헤더에 추가정보를 줍니다.&lt;/li&gt;
  &lt;li&gt;응답의 Date헤더를 확인해봤을때, 응답의 생성일이 요청일보다 오래되었다면 이전에 만들어진 사본임을 알 수 있습니다.&lt;/li&gt;
  &lt;li&gt;비슷한 방법으로 응답이 얼마나 오래되었는지를 말해주는 Age 헤더를 살펴볼 수도 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;76-캐시-토폴로지&quot;&gt;7.6. 캐시 토폴로지&lt;/h3&gt;

&lt;p&gt;캐시는 각 사용자마다 할당될 수도 있고 수천 명의 사용자가 공유할 수도 있습니다. 사용자마다 할당된 캐시를 개인 전용 캐시(private cache), 공유된 캐시는 공용 캐시(public cache)라고 합니다.&lt;/p&gt;

&lt;h4 id=&quot;761-개인-전용-캐시&quot;&gt;7.6.1. 개인 전용 캐시&lt;/h4&gt;

&lt;p&gt;가장 대표적인 개인 전용 캐시는 각 웹 브라우저들이 가지고 있는 웹 캐시입니다. 사용자의 PC에 자주 쓰이는 문서를 저장해둡니다. 사용자는 브라우저의 설정을 통해 브라우저의 캐시 크기를 설정할 수 있고 캐시가 저장될 위치도 설정할 수 있습니다. 이런 캐시된 문서들을 ‘임시 파일’이라고도 부릅니다.&lt;/p&gt;

&lt;p&gt;크롬의 경우 기본 캐시 경로는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\{Username}\AppData\Local\Google\Chrome\User Data\Default\Cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;762-공용-프록시-캐시&quot;&gt;7.6.2. 공용 프록시 캐시&lt;/h4&gt;

&lt;p&gt;공용 캐시는 캐시 프록시 서버, 프록시 캐시라고도 불립니다. 여러 사용자가 공통적으로 자주 찾는 문서들을 저장해둡니다.&lt;/p&gt;

&lt;p&gt;이런 프록시 캐시들은 결국 프록시이기 때문에 6장에서 알아본 프록시의 규칙들을 따라야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;763-프록시-캐시-계층들&quot;&gt;7.6.3. 프록시 캐시 계층들&lt;/h4&gt;

&lt;p&gt;프록시를 여러 개 거칠 수 있었듯이 캐시 역시 여러 계층으로 이루어질 수 있습니다.&lt;/p&gt;

&lt;p&gt;당장 우리가 사용하는 웹 브라우저들은 모두 각자의 캐시를 가지고 있습니다. 웹 브라우저를 통해 프록시 캐시를 운영하는 웹 사이트에 접속하려 한다면 이미 [웹 브라우저 캐시 -&amp;gt; 프록시 캐시]와 같이 두 단계의 캐시를 거칠게 됩니다.&lt;/p&gt;

&lt;p&gt;큰 규모의 업체들은 지역별로 작은 프록시 캐시를 두고, 원 서버 근처에 큰 프록시 캐시를 둬서 작은 프록시 캐시에서 처리하지 못한 요청들을 큰 프록시 캐시에서 처리하게 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;캐시 계층이 깊어진다면 요청은 캐시의 긴 연쇄를 따라가게 됩니다. 프록시 연쇄가 길어질 수록 각 중간 프록시에서 성능저하가 발생할 수 있어 오히려 프록시 연쇄를 안 두는 것보다 느려질 수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;764-캐시망-콘텐츠-라우팅-피어링&quot;&gt;7.6.4. 캐시망, 콘텐츠 라우팅, 피어링&lt;/h4&gt;

&lt;p&gt;복잡한 캐시망을 사용하는 곳도 있습니다. 자식 캐시가 처리하지 못한 요청을 어느 부모 캐시에게 전해줄지 동적으로 결정하는 캐시망도 있고 다른 조직의 프록시 캐시끼리 서로 찾아볼 수 있게 하는 캐시망도 있습니다.(피어링)&lt;/p&gt;

&lt;p&gt;캐시망 안에서 콘텐츠 라우팅을 할땐 다음과 같은 방식으로 어느 곳에 라우팅 할지 결정할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL에 근거해 부모 캐시와 원 서버 중 하나를 동적으로 선택합니다.&lt;/li&gt;
  &lt;li&gt;URL에 근거해 특정 부모 캐시를 동적으로 선택합니다.&lt;/li&gt;
  &lt;li&gt;부모 캐시에게 가기 전에, 캐시된 사본을 로컬에서 찾습니다.&lt;/li&gt;
  &lt;li&gt;다른 프록시 캐시들이 자신이 가진 컨텐츠를 부분적으로 접근할 수 있게 허용하되, 그들의 캐시를 통한 인터넷 트랜짓(Internet Transit)은 허용하지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;특히, 서로 다른 조직들이 상호의 이득의 위해 캐시를 연결해 서로 찾아볼 수 있게해주는 피어링을 지원하는 캐시를 ‘형제 캐시’라고 부릅니다. HTTP에선 형제 캐시를 지원하지 않기 때문에 형제 캐시를 사용하는 곳은 인터넷 캐시 프로토콜(ICP, Internet Cache Protocol)이나 하이퍼텍스트 캐시 프로토콜(HTCP, HyperText Cache Protocol)을   이용해 HTTP를 확장 했습니다. 이는 20장에서 더 자세히 살펴볼 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;77-캐시-처리-단계&quot;&gt;7.7. 캐시 처리 단계&lt;/h3&gt;

&lt;p&gt;캐시가 고도화됨에 따라 세부적인 기능은 매우 복잡하지만 기본적으로 아래와 같은 절차를 거칩니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;요청 받기 : 네트워크로부터 도착한 요청 메세지를 읽습니다.&lt;/li&gt;
  &lt;li&gt;파싱 : 메세지를 파싱해 URL, 헤더들을 추출합니다.&lt;/li&gt;
  &lt;li&gt;검색 : 로컬 복사본이 있는지 검사하고, 없다면 원 서버에서 사본을 받아옵니다.(로컬에 저장합니다.)&lt;/li&gt;
  &lt;li&gt;신선도 검사 : 애초에 로컬 복사본이 있었다면, 그 사본이 충분히 신선한지 검사합니다. 신선하지 않다면 서버에게 변경 사항이 있는지 물어보고 변경 사항이 있다면 사본을 받아옵니다.&lt;/li&gt;
  &lt;li&gt;응답 생성 : 새로운 헤더와 캐시된 본문으로 응답 메세지를 만듭니다.&lt;/li&gt;
  &lt;li&gt;발송 : 네트워크를 통해 응답을 클라이언트에게 돌려줍니다.&lt;/li&gt;
  &lt;li&gt;로깅 : 선택적으로, 캐시는 로그파일에 트랜잭션에 대해 서술한 로그 하나를 남깁니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래와 같은 차트로 흐른다고 보면 됩니다.&lt;/p&gt;

&lt;p&gt;그림요망&lt;/p&gt;

&lt;h4 id=&quot;771-단계1--요청-받기&quot;&gt;7.7.1. 단계1 : 요청 받기&lt;/h4&gt;

&lt;p&gt;커넥션의 활동을 감지해 들어오는 데이터를 받아들입니다. 고성능 캐시는 여러 개의 커넥션으로 부터 동시에 데이터를 받고 전체 메세지가 도착하기 전에 트랜잭션 처리를 시작합니다.&lt;/p&gt;

&lt;h4 id=&quot;772-단계2--파싱&quot;&gt;7.7.2. 단계2 : 파싱&lt;/h4&gt;

&lt;p&gt;요청 메세지를 파싱해 URL과 헤더를 추출합니다. 이 과정에서 파서는 헤더 부분의 대소문자, 날짜 형식 같이 사소한 차이점이 무시되도록 파싱해야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;773-단계3--검색&quot;&gt;7.7.3. 단계3 : 검색&lt;/h4&gt;

&lt;p&gt;알아낸 URL을 토대로 캐시된 로컬 사본이 있는지 검사합니다. 메모리에 있을 수도 있고 디스크에 있을 수도 있습니다. 혹은 캐시 본인의 디스크가 아닌 근처의 다른 디스크에 있을 수도 있습니다.&lt;/p&gt;

&lt;p&gt;캐시된 사본을 찾을 수 없다면 원 서버 혹은 다음 홉에 있는 부모 프록시 캐시에서 가져오거나 실패를 반환합니다.&lt;/p&gt;

&lt;h4 id=&quot;774-단계4--신선도-검사&quot;&gt;7.7.4. 단계4 : 신선도 검사&lt;/h4&gt;

&lt;p&gt;캐시된 사본을 찾았다고 해서 바로 클라이언트에게 보내선 안됩니다. 가지고 있는 사본이 신선한지 검사해야 합니다. 이 신선도를 검사하는 알고리즘은 매우 복잡합니다. 이 장의 다음 절들은 대부분 신선도 검사와 관계된 내용입니다.&lt;/p&gt;

&lt;p&gt;신선한 것으로 판단되면 그 로컬 사본으로 응답을 준비합니다. 신선하지 않다면 서버에 변경사항이 있는지 확인하는 재검사를 실시하게 됩니다.&lt;/p&gt;

&lt;p&gt;재검사 결과 변경사항이 없으면 로컬 사본으로 응답을 준비하고, 변경사항이 있다면 서버에서 다시 사본을 가져와 캐시에 사본을 갱신합니다.&lt;/p&gt;

&lt;h4 id=&quot;775-단계5--응답-생성&quot;&gt;7.7.5. 단계5 : 응답 생성&lt;/h4&gt;

&lt;p&gt;캐시된 응답을 원 서버에서 온것처럼 보이게 하는 것이 좋습니다. 때문에 캐시된 서버 응답 헤더를 토대로 캐시의 응답 헤더를 구성합니다.&lt;/p&gt;

&lt;p&gt;캐시는 클라이언트에 맞게 헤더를 조정해야 합니다. 클라이언트가 HTTP/1.1을 바라는데 서버에서의 응답이 HTTP/1.0이라면 캐시는 헤더를 적절히 번역해줘야 합니다.&lt;/p&gt;

&lt;p&gt;캐시는 원 서버의 응답 헤더에 없는 헤더들도 추가할 수 있습니다. 캐시 신선도 정보(Cache-Control, Age, Expires.. )를 삽입할 수 있습니다. 또, 요청이 프록시 캐시를 거쳤다는 걸 알려주기 위해 Via헤더를 삽입할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 Date헤더는 조정해선 안됩니다. Date헤더는 원 서버에서 만들어진 일시를 표현하는 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;776-단계6--전송&quot;&gt;7.7.6. 단계6 : 전송&lt;/h4&gt;

&lt;p&gt;응답 헤더가 준비되면 캐시는 응답을 돌려줍니다.&lt;/p&gt;

&lt;p&gt;어떤 고성능 캐시들은 로컬 저장장치와 네트워크 I/O 버퍼 사이에서 문서의 콘텐츠 복사를 피해 데이터를 효과적으로 전송하기 위해 노력합니다.&lt;/p&gt;

&lt;h4 id=&quot;777-단계7--로깅&quot;&gt;7.7.7. 단계7 : 로깅&lt;/h4&gt;

&lt;p&gt;대부분의 캐시는 로그 파일과 캐시 사용에 대한 통계를 유지합니다. 트랜잭션 완료 후 캐시 적중, 부적중률에 대한 통계를 갱신하고 로그파일에 어떤 요청이 왔고 어떻게 응답했는지 등을 기록합니다.&lt;/p&gt;

&lt;p&gt;가장 많이 사용되는 캐시 로그 포맷은 스퀴드 로그 포맷(Squid Log Format), 넷스케이프 확장 공용 로그 포맷(Netscape Extended Common Log Format)이지만 커스텀 로그 포맷을 사용해도 상관 없습니다. 로그 파일 포맷에 대해선 21장에서 자세히 다룹니다.&lt;/p&gt;

&lt;h4 id=&quot;778-캐시-처리-플로-차트&quot;&gt;7.7.8. 캐시 처리 플로 차트&lt;/h4&gt;

&lt;p&gt;앞에 먼저 소개해드렸습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;78-사본을-신선하게-유지하기&quot;&gt;7.8. 사본을 신선하게 유지하기&lt;/h3&gt;

&lt;p&gt;캐시된 데이터와 서버의 데이터가 일치하도록 관리하는 방법을 알아보겠습니다. HTTP에선 ‘문서 만료’와 ‘서버 재검사’라는 단순한 메커니즘으로 캐시된 사본과 서버의 원본이 일치하도록 관리할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;781-문서-만료&quot;&gt;7.8.1. 문서 만료&lt;/h4&gt;

&lt;p&gt;Cache-Control와 Expires라는 헤더들을 이용해 각 문서들에 유효기간을 붙일 수 있습니다. 유효기간이 끝나기 전엔 문서가 ‘신선한’것으로 판단해 서버와의 접촉 없이 사본을 제공할 수 있습니다.&lt;/p&gt;

&lt;p&gt;유효기간이 만료된다면, 반드시 문서에 변경사항이 있는지 다시 검사하고 변경 사항이 있다면 신선한 사본을 얻어와야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;782-유효기간과-나이&quot;&gt;7.8.2. 유효기간과 나이&lt;/h4&gt;

&lt;p&gt;유효기간을 표시하는데엔 Cache-Control과 Expires 헤더가 있습니다. 둘의 차이는 쉽게말해 Cache-Control은 문서가 최초로 생성된 이후로 몇초간 유효한가를 나타내고, Expires헤더는 만료되는 절대적인 날짜를 명시합니다.&lt;/p&gt;

&lt;p&gt;Cache-Control:max-age
 max-age값은 최대 나이를 정의합니다. 최대 나이는 문서가 처음 생성된 이후부터, 제공하기에 더 이상 신선하지 않다고 간주될 때까지 경과한 초단위 시간입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cahce-Control : max-age=484200&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Expires
 절대 유효기간을 명시합니다. 이 유효기간이 넘어갔다면 그 문서는 더 이상 신선하지 않습니다. 이 Expires헤더가 제대로 작오하기 위해선 컴퓨터의 시계가 올바르게 작동하고 있어야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Expires : Fri, 05 Jul 2002, 05:00:00 GMT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 시각이 2020년 3월 17일 화요일 20:00:00 GMT 일때, 지금 시각으로부터 딱 5일(==432,000 초)간만 진행되는 이벤트를 위한 안내 페이지를 만들고 싶다면 그 페이지엔 아래의 헤더중 하나를 선택해 사용하면 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cache-Control : max-age=432000
Expires : Sun, 22 Mar 2020, 20:00:00 GMT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;783-서버-재검사&quot;&gt;7.8.3. 서버 재검사&lt;/h4&gt;

&lt;p&gt;하지만 캐시된 사본의 유효기간이 만료되었다고 해서 그 사본이 서버의 원본과 다르다는 걸 의미하진 않습니다. 이제 다시 검사할 시간이 되었다는 것을 뜻합니다. 이렇게 문서 변경 여부를 다시 검사하는걸 ‘서버 재검사’라고 합니다.&lt;/p&gt;

&lt;p&gt;서버 재검사 결과 문서가 변경되었다면, 변경된 문서의 새로운 사본을 가져와 캐시된 문서를 바꿔 저장한뒤, 클라이언트에게 보내줍니다.
 서버 재검사 결과 문서가 변경되지 않았다면, 캐시는 새 만료일을 포함한 새 헤더들만 가져와 캐시된 문서의 헤더를 갱신합니다.&lt;/p&gt;

&lt;p&gt;HTTP는 캐시가 다음중 하나는 응답하기를 요구합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;충분히 신선한 캐시된 사본&lt;/li&gt;
  &lt;li&gt;재검사 결과 신선하다고 할 수 있는 캐시된 사본&lt;/li&gt;
  &lt;li&gt;에러 메세지(재검사에 실패한 경우)&lt;/li&gt;
  &lt;li&gt;경고 메세지가 부착된 캐시된 사본(부정확하다면)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;784-조건부-메서드와의-재검사&quot;&gt;7.8.4. 조건부 메서드와의 재검사&lt;/h4&gt;

&lt;p&gt;그렇다면, 재검사 요청을 받는 서버의 입장에선 캐시에서 온 요청이 재검사 요청인지, 일반 리소스 요청인지 어떻게 구분할까요? 이를 위해 HTTP엔 조건부 GET 요청이 존재합니다.&lt;/p&gt;

&lt;p&gt;조건부 GET 요청은 조건부 요청헤더를 추가해 만들어집니다. 조건부 요청 헤더에는 아래 5가지가 있지만 유용하고 주로 사용되는 2개의 헤더에 대해서만 자세히 알아보겠습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;헤더&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Modified-Since&lt;/td&gt;
      &lt;td&gt;주어진 날짜 이후로 수정되었다면 요청 메서드를 처리합니다. Last-Modified 헤더와 함께 사용됩니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-None-Match&lt;/td&gt;
      &lt;td&gt;문서의 일련번호 및 id 처럼 문서의 버전을 나타내는 태그를 비교해 요청 메서드를 처리합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Unmodified-Since&lt;/td&gt;
      &lt;td&gt;문서의 부분의 같이 전송해 문서가 변하지 않았는지를 확인합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Range&lt;/td&gt;
      &lt;td&gt;불완전한 문서의 캐싱을 지원하기 위해 사용됩니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Match&lt;/td&gt;
      &lt;td&gt;웹 서버에 대한 동시성 제어를 할 때 유용합니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;785-if-modified-since--날짜-재검사&quot;&gt;7.8.5. If-Modified-Since : 날짜 재검사&lt;/h4&gt;

&lt;p&gt;가장 많이 쓰이는 재검사 헤더는 If-Modified-Since 입니다. 이는 흔히 줄여서 IMS 요청이라고도 불립니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If-Modified-Since : Tue, 17 Mar 2020, 20:30:00 GMT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;서버가 위와 같은 IMS 요청을 받는다면, 현재 서버의 원본이 마지막 변경일을 확인합니다. If-Modified-Since가 참이라면(==변경 되었다면) 변경된 문서의 사본과 함께 평범한 GET 응답이 새로운 만료 날짜와 함께 돌아갑니다.
 If-Modified-Since가 거짓이라면(==변경되지 않았다면), 서버는 작은 304 Not Modified 응답을 돌려줍니다. 이 응답에 본문은 없습니다.&lt;/p&gt;

&lt;p&gt;If-Modified-Since 헤더에 대한 응답엔 Last-Modified 헤더가 따라붙습니다. 캐시가 다음번에 같은 문서를 재검사 요청 보내게 될 땐 저번 재검사 요청의 응답으로 받은 Last-Modified 헤더의 값을 If-Modified-Since값에 넣어 보내게 됩니다.&lt;/p&gt;

&lt;p&gt;주의할 점이 있습니다. 몇몇 웹 서버는 If-Modified-Since의 값을 시간으로 파싱해 비교하지 않습니다. 대신 단순 문자열 비교를 수행해 ‘이 날짜 이후로 변경되었다면’이라는 의미가 아니라 ‘정확히 이 날자에 마지막 변경이 일어난 것이 아니라면’과 같이 비교합니다.  심지어 날짜가 아닌 일련번호, id 같은 것을 If-Modified-Since에 넣어 문자열 비교를 사용하기도 합니다.&lt;/p&gt;

&lt;h4 id=&quot;786-if-none-match--엔터티-태그-재검사&quot;&gt;7.8.6. If-None-Match : 엔터티 태그 재검사&lt;/h4&gt;

&lt;p&gt;날짜를 기준으로한 If-Modified-Since 검사가 가장 많이 쓰이지만 날짜 비교가 적절하지 않은 콘텐츠들도 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일정 간격으로 다시 쓰여지지만 실제 내용 변화가 없을 경우&lt;/li&gt;
  &lt;li&gt;서버를 바라보는 모든 캐시들이 다시 데이터를 받기엔 변경이 사소한 경우(철자 및 주석 등)&lt;/li&gt;
  &lt;li&gt;페이지에 대한 최근 변경 일시를 정확하게 판별할 수 없는 경우&lt;/li&gt;
  &lt;li&gt;1초보다 작은 간격으로 갱신이 될 수 있는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 경우엔 If-None-Match 헤더를 사용할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET /announce.html HTTP/1.0
If-None-Match : “v2.6”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 헤더는 해당 문서의 버전이 ‘v2.6’이라는 것입니다. 이렇게 일련번호, 버전, id와 같이 문서가 유의미하게 변경되었다는 것을 보여줄수 있는 태그들을 사용해 재검사를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이에 대한 서버의 응답은 Etag(Entity Tag) 헤더와 함께 돌아옵니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP/1.0 304 Not Modified
Date : Wed, 03 Jul 2020, 19:18:22 GMT
&lt;strong&gt;ETag : “v2.6”&lt;/strong&gt;
Expires : Frie, 05 Jul 2020, 05:00:00 GMT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위는 변경되지 않았을 때이고, 변경되었다면 200 OK 코드와 갱신된 Etag값, 엔터티 본문과 함께 응답될 것입니다.&lt;/p&gt;

&lt;p&gt;캐시가 객체에 대해 여러개 사본을 가지고 있다면 If-None-Match 태그에 여러개의 엔터티 태그를 같이 보낼 수도 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If-None-Match : “v2.4”, “v2.5”, “v2.6”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;787-약한-검사기와-강한-검사기&quot;&gt;7.8.7. 약한 검사기와 강한 검사기&lt;/h4&gt;

&lt;p&gt;앞서 ‘서버를 바라보는 모든 캐시들이 다시 데이터를 받기엔 변경이 사소한 경우(철자 및 주석 등)’ 를 위해 엔터티 태그를 사용한다고 했습니다. 하지만 이 문제를 해결하기 위한 다른 방법도 있습니다.&lt;/p&gt;

&lt;p&gt;HTTP/1.1 에선 조금 수정된 컨텐츠를 위해 “그 정도면 같은 것이다”라고 서버가 주장할 수 있게 해주는 약한 검사기(weak validator)를 지원합니다. 반대로 약한 검사기가 아닌것은 강한 검사기(strong validator)입니다.&lt;/p&gt;

&lt;p&gt;약한 검사기는 엔터티 태그 앞에 ‘W/’ 접두사를 사용해 구분합니다. ‘W/’접두가사 붙은 엔터티 태그는 약한 검사를 해달라는 것입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Etag : W/”v2.6”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;강한 엔터티 태그는 그에 대응하는 엔터티 값이 어떻게 바뀌든 매번 같이 바뀌어야 합니다. 하지만 약한 엔터티 태그는 변경중 유의미한 변경이 있을때만 같이 변경됩니다.&lt;/p&gt;

&lt;p&gt;서버는 강한 엔터티, 약한 엔터티 모두 재활용해서는 안됩니다. 캐시에 요청이 잘 안들어온다면 유효기간이 엄청오래된 콘텐츠에 대해 재검사 요청이 올수 있고, 이때 요청온 엔터티 태그가 재활용된 태그라면 큰 혼란을 만들것입니다.&lt;/p&gt;

&lt;h4 id=&quot;788-언제-엔터티-태그를-사용하고-언제-last-modified-일시를-사용하는가&quot;&gt;7.8.8. 언제 엔터티 태그를 사용하고 언제 Last-Modified 일시를 사용하는가&lt;/h4&gt;

&lt;p&gt;앞서 알아본 것과 같이 서버는 문서의 유효기간을 다루기 위해 Etag 헤더 혹은 Last-Modified 헤더를 보낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;캐시의 입장에선, 서버가 Etag 헤더를 사용한다면 If-None-Match를, Last-Modified 헤더를 사용한다면 If-Modified-Since 헤더를 사용해야 합니다. 만약 모두 사용 가능하다면 두 가지 모두 사용하는 것을 추천합니다.(HTTP/1.0, HTTP/1.1 모두를 다룰 수 있기 때문입니다.)&lt;/p&gt;

&lt;p&gt;HTTP/1.1 을 구현하고 있는 서버는 가능하다면 Etag 헤더를 보내야 합니다. Last-Modified 헤더를 같이 보내면 더 좋습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;79-캐시-제어&quot;&gt;7.9. 캐시 제어&lt;/h3&gt;

&lt;h4 id=&quot;791-no-cahce와-no-store-응답-헤더&quot;&gt;7.9.1. no-cahce와 no-store 응답 헤더&lt;/h4&gt;

&lt;h4 id=&quot;792-max-age-응답-헤더&quot;&gt;7.9.2. Max-Age 응답 헤더&lt;/h4&gt;

&lt;h4 id=&quot;793-expires-응답-헤더&quot;&gt;7.9.3. Expires 응답 헤더&lt;/h4&gt;

&lt;h4 id=&quot;794-must-revalidate-응답-헤더&quot;&gt;7.9.4. Must-Revalidate 응답 헤더&lt;/h4&gt;

&lt;h4 id=&quot;795-휴리스틱-만료&quot;&gt;7.9.5. 휴리스틱 만료&lt;/h4&gt;

&lt;h4 id=&quot;796-클라이언트-신선도-제약&quot;&gt;7.9.6. 클라이언트 신선도 제약&lt;/h4&gt;

&lt;h4 id=&quot;797-주의할-점&quot;&gt;7.9.7. 주의할 점&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;710-캐시-제어-설정&quot;&gt;7.10. 캐시 제어 설정&lt;/h3&gt;

&lt;h4 id=&quot;7101-아파치로-http-헤더-제어하기&quot;&gt;7.10.1. 아파치로 HTTP 헤더 제어하기&lt;/h4&gt;

&lt;h4 id=&quot;7102-http-equiv를-통한-html-캐시-제어&quot;&gt;7.10.2. HTTP-EQUIV를 통한 HTML 캐시 제어&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;711-자세한-알고리즘&quot;&gt;7.11. 자세한 알고리즘&lt;/h3&gt;

&lt;h4 id=&quot;7111-나이와-신선도-수명&quot;&gt;7.11.1. 나이와 신선도 수명&lt;/h4&gt;

&lt;h4 id=&quot;7112-나이-계산&quot;&gt;7.11.2. 나이 계산&lt;/h4&gt;

&lt;h4 id=&quot;7113-완전한-나이-계산-알고리즘&quot;&gt;7.11.3. 완전한 나이 계산 알고리즘&lt;/h4&gt;

&lt;h4 id=&quot;7114-신선도-수명-계산&quot;&gt;7.11.4. 신선도 수명 계산&lt;/h4&gt;

&lt;h4 id=&quot;7115-완전한-서버-신선도-알고리즘&quot;&gt;7.11.5. 완전한 서버 신선도 알고리즘&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;712-캐시와-광고&quot;&gt;7.12. 캐시와 광고&lt;/h3&gt;

&lt;h4 id=&quot;7121-광고-회사의-딜레마&quot;&gt;7.12.1. 광고 회사의 딜레마&lt;/h4&gt;

&lt;h4 id=&quot;7122-퍼블리셔의-응답&quot;&gt;7.12.2. 퍼블리셔의 응답&lt;/h4&gt;

&lt;h4 id=&quot;7123-로그-마이그레이션&quot;&gt;7.12.3. 로그 마이그레이션&lt;/h4&gt;

&lt;h4 id=&quot;7124-적중-측정과-사용량-제한&quot;&gt;7.12.4. 적중 측정과 사용량 제한&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>윈도우에서 수정한 우분투 파일 권한 수정</title>
   <link href="http://localhost:4000/posts/googling/jekyll/%EA%B6%8C%ED%95%9C%EB%AC%B8%EC%A0%9C/"/>
   <updated>2020-03-17T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/jekyll/권한문제</id>
   <content type="html">
&lt;h3 id=&quot;0-코린이들에게-바칩니다&quot;&gt;0. 코린이들에게 바칩니다…&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;윈도우와 우분투를 섞어쓰다 Permission denied 난 저 같은 코린이들에게 바칩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해결하는 과정에서 리눅스의 명령어 및 권한에 좀 친해진것 같은 느낌이 들어 포스팅 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-깃헙-페이지-만들기&quot;&gt;1. 깃헙 페이지 만들기&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;처음 깃헙 페이지를 만들때 &lt;a href=&quot;https://devinlife.com/howto/&quot;&gt;이 포스팅&lt;/a&gt;을 보고 따라했습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;위 포스팅은 리눅스 환경에서 실행되고 있었습니다.&lt;/li&gt;
  &lt;li&gt;제가 사용하는건 윈도우였기 때문에 이 &lt;a href=&quot;https://m.blog.naver.com/6116949/221244246623&quot;&gt;포스팅&lt;/a&gt;을 따라 우분투를 설치해 리눅스 환경을 구성했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-설치-완료-및-작업환경-셋팅&quot;&gt;2. 설치 완료 및 작업환경 셋팅&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;jekyll 설치하고, Github page 만들고, 깔끔한 테마(&lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;Laynon&lt;/a&gt;)도 받아 설치했습니다.&lt;/li&gt;
  &lt;li&gt;새 글을 쓰고 Git에 연결해 Push까지 했습니다.&lt;/li&gt;
  &lt;li&gt;이후 제가 기존에 써오던 작업 환경을 셋팅하기 시작했습니다.
    &lt;ul&gt;
      &lt;li&gt;git을 CLI로 다루는게 어색해 sourcetree를 설치했습니다.&lt;/li&gt;
      &lt;li&gt;편집을 위해 &lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt;라는 markdown 편집기도 설치했습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;작업 환경을 구성한 뒤, 윈도우 디렉토리로 새 폴더를 만들고 md 파일들도 복사하고, 윈도우 Typora를 실행해 md 파일을 수정했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-에러-발견&quot;&gt;3. 에러 발견&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 이제 jekyll 서버를 켜서 확인해 보려는데…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/jekyll/permissionError.png&quot; alt=&quot;에러발생&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;에러가 났습니다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;--trace&lt;/code&gt;옵션을 줘보니&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/jekyll/permissionError2.png&quot; alt=&quot;에러발생2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Errno::EACCES, Permission denied&lt;/code&gt; 에러가 났습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-임시해결&quot;&gt;4. (임시)해결&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Permission denied 를 보는 순간 윈도우와 우분투를 섞어 사용해 발생한 것 같다는 느낌을 받았습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;여자저차 구글링해 권한에 대해 찾아보고, 권한을 확인하는법, 변경하는 법을 찾았습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;41-권한확인&quot;&gt;4.1. 권한확인&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;권한확인은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; 명령어(&lt;strong&gt;l&lt;/strong&gt;ist &lt;strong&gt;s&lt;/strong&gt;egment -&lt;strong&gt;l&lt;/strong&gt;ong format)를 통해 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/jekyll/viewPermission1.png&quot; alt=&quot;viewPermission1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;위 사진을 보시면  &lt;code class=&quot;highlighter-rouge&quot;&gt;-rw-rw-rw-rw-&lt;/code&gt;로 되어 있는 파일들이 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;----------&lt;/code&gt;로 되어있는 파일들이 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-rw-rw-rw-&lt;/code&gt; 파일들은 리눅스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;명령어로 가져온 파일들이고&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;----------&lt;/code&gt;파일은 윈도우에서 리눅수 디렉토리로 직접 저장한 파일들입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt;로 조회한 파일권한은 다음과 같습니다. 이중 권한 부분에 대해 알보았습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;drwxrwxrwx 1 ki ki   4096 Mar 17 21:42  study_book
-rw-rw-rw- 1 ki ki  65410 Mar 17 21:42 'relative url parsing.png'
---------- 1 ki ki  29027 Mar 17 21:59  viewPermission1.png
---------- - -- --  ----- ------------ ----------------------------
권한 링크수 소유자 그룹 파일크기 수정시간              파일이름
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;42-권한&quot;&gt;4.2. 권한&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;권한은 크게 4부분으로 이루어져 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-  rw-  rw-  rw-
1   2    3    4 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;1 : 해당 항목이 파일(-)인지, 디렉토리(d)인지 구분&lt;/li&gt;
      &lt;li&gt;2 : 사용자(소유자)의 권한 정보&lt;/li&gt;
      &lt;li&gt;3 : 그룹 권한 정보&lt;/li&gt;
      &lt;li&gt;4 : 다른 사용자 권한 정보&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;권한 정보는 각각 &lt;strong&gt;r&lt;/strong&gt;ead, &lt;strong&gt;w&lt;/strong&gt;rite, e&lt;strong&gt;x&lt;/strong&gt;ecute 값을 갖을 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/jekyll/viewPermission1.png&quot; alt=&quot;viewPermission1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;다시 에러가 났던 파일을 보겠습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;다른 항목들은 파일이며(-) 사용자, 그룹, 다른 사용자에 대해 모두 읽기(r), 쓰기(w) 권한을 가지고 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;-rw-rw-rw-&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;에러가 났던 파일은 사용자, 그룹, 다른 사용자 모두에게 아무 권한이 없습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;----------&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;43-임시-방편&quot;&gt;4.3. 임시 방편&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Permission denied 에러를 해결하기 위해선 윈도우에서 만든 파일들의 권한을 우분투의 사용자가 사용할 수 있게 권한 변경을 해줘야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;권한 변경을 하기위해선 &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod {permission} {filename}&lt;/code&gt; 명령어를 사용합니다.&lt;/li&gt;
  &lt;li&gt;이때 {permission} 부분은 3자리 숫자로 표현됩니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;r&lt;/strong&gt;ead = 4, &lt;strong&gt;w&lt;/strong&gt;rite = 2, e&lt;strong&gt;x&lt;/strong&gt;ecute = 1&lt;/li&gt;
      &lt;li&gt;각 권한은 위와 값을 갖습니다.&lt;/li&gt;
      &lt;li&gt;사용자/권한/다른사용자 순서대로 허용된 권한들의 값의 합을 기입해주면 됩니다.&lt;/li&gt;
      &lt;li&gt;rwx = 7, rw- = 6, r-x = 5, — = 0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;윈도우에서 만든 파일을 다른 파일들과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;-rx-rx-rx-&lt;/code&gt;로 만들겠습니다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/public/image/jekyll/viewPermission2.png&quot; alt=&quot;viewPermission2.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 1개의 권한이 &lt;code class=&quot;highlighter-rouge&quot;&gt;----------&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;-rw-rw-rw-&lt;/code&gt; 로 변경되었습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 작업을 디렉토리 아래 모든 파일에 대해 하고 싶다면 아래와 같은 명령어를 사용하면 됩니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find -type f -exec chmod 666 {} \;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;현재 디렉토리 아래에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;find -type f&lt;/code&gt; 타입이 파일(f)인 것을 찾고(현 디렉토리의 하위 디렉토리아래 있는 파일들도 탐색합니다)&lt;/li&gt;
      &lt;li&gt;찾은 각 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;-exec&lt;/code&gt;뒤에 명령어를 실행합니다.&lt;/li&gt;
      &lt;li&gt;뒤의 &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 666 {} \;&lt;/code&gt;는 권한 변경입니다.
        &lt;ul&gt;
          &lt;li&gt;파일명 부분에 &lt;code class=&quot;highlighter-rouge&quot;&gt;{} \;&lt;/code&gt;가 들어가는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;find -type f&lt;/code&gt;에서 찾은 파일들을 그대로 입력한다고 생각하면 됩니다.(자세한 부분은 나중에 추가하겠습니다 :sweat_smile:)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;권한을 바꾼뒤 다시 서버를 켜보면…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/jekyll/viewPermission3.png&quot; alt=&quot;viewPermission3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/jekyll/permissionErrorClear.png&quot; alt=&quot;permissionErrorClear.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해결이 됐습니다! :happy:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-제대로-해결하려면&quot;&gt;5. 제대로 해결하려면…&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;물론 이건 리눅스의 명령어와 권한과 친해지기 위해 해본 임시 해결책입니다. 근본적인 해결책은&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;작업환경을 리눅스로 통일 하던가(사실 시도하다가 Typora 설치에서 에러가…)&lt;/li&gt;
      &lt;li&gt;ruby와 jekyll을 윈도우 환경에서 다시 셋팅 하던가&lt;/li&gt;
      &lt;li&gt;윈도우와 리눅스가 권한을 공유할 수 있게 자동 설정 하는 것입니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;이것들 중에 하나가 될 것 같습니다.&lt;/li&gt;
  &lt;li&gt;작업 속도를 위해선 2번이 나을것 같긴 한데… 앞으로 개발자 하면서 어차피 친해져야할 리눅스이니 빨리 1번을 할까 싶기도 하고… 3번도 간단해 보이고…&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>프록시</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C6/"/>
   <updated>2020-03-16T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드6</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;61-웹-중개자&quot;&gt;6.1. 웹 중개자&lt;/h3&gt;

&lt;p&gt;쿠팡, 11번가와 같은 인터넷 쇼핑몰은 소비자와 판매자 사이를 중개해줍니다. 소비자 입장에선 똑같이 돈을 주고 물건을 받는것이지만 인터넷 쇼핑몰을 이용하면 쇼핑몰이 제공하는 다양한 기능(상품 비교, 장바구니 등)을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;프록시는 클라이언트와 서버를 중개해줍니다. 클라이언트와 서버 사이에 놓여 여러가지 기능들을 제공해줍니다. 클라이언트와 서버 사이에 있기 때문에 프록시는 클라이언트와 통신할땐 서버처럼, 서버와 통신할 땐 클라이언트 처럼 행동합니다.&lt;/p&gt;

&lt;h4 id=&quot;611-개인-프록시와-공유-프록시&quot;&gt;6.1.1. 개인 프록시와 공유 프록시&lt;/h4&gt;

&lt;p&gt;프록시는 하나의 클라이언트가 하나를 독점적으로 쓸 수도 있고 여러 클라이언트가 공유할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;공용 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;하지만 대부분의 프록시는 사실 공용 프록시입니다. 클라이언트마다 프록시를 할당해 관리하는 것 보다 하나의 큰 프록시를 관리하는게 효율이 더 높기 때문입니다. 그리고 캐시 프록시 서버 같은 프록시는 공통된 요청을 빠르게 처리할 수 있기 때문에 사용자가 많을수록 유리하기도 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개인 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;개인 프록시는 흔하지 않지만 꾸준히 사용됩니다. 주로 클라이언트의 PC에 설치되어 실행 됩니다. 인터넷 브라우저 자체적으로 개인 프록시를 운영하기도 합니다.&lt;/p&gt;

&lt;h4 id=&quot;612-프록시-대-게이트웨이&quot;&gt;6.1.2. 프록시 대 게이트웨이&lt;/h4&gt;

&lt;p&gt;그런데 클라이언트와 서버 사이를 중개해주는 것이 하나 더 있습니다. 바로 게이트웨이입니다. 앞 장에서 살짝 살펴보았고 이후 8장에서 더 자세히 살펴볼 것입니다.&lt;/p&gt;

&lt;p&gt;일반적으로 프록시와 게이트웨이의 차이점은 같은 프로토콜을 연결하는지, 다른 프로토콜을 연결하는 지입니다. 프록시는 같은 프로토콜을 사용해 클라이언트와 서버를 중개하고, 게이트웨이는 메세지를 받아 다른 프로토콜의 메세지로 전환해줍니다.&lt;/p&gt;

&lt;p&gt;하지만 사실 프록시와 게이트웨이의 경계는 모호합니다. 프록시는 다른 버전의 HTTP 프로토콜끼리도 중개해야 하기 때문에(클라이언트마다 HTTP 버전이 다르므로) 프로토콜을 변환하기도 합니다. 그리고 상용 프록시들은 SSL 보안 프로토콜, SOCKS 방화벽, FTP접근 등 게이트웨이가 하는 역할까지 지원합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;62-왜-프록시를-사용하는가&quot;&gt;6.2. 왜 프록시를 사용하는가?&lt;/h3&gt;

&lt;p&gt;프로시가 사용되는 몇 가지 예를 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어린이 필터&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어린이들이 주로 사용하는 학교의 PC 같은 경우엔 유해한 사이트를 차단하는 프록시를 설정해둘수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;문서 접근 제어자&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;대기업 같이 권한이 계층화 되어있는 곳에선 부서별로, 직급별로 열람 가능한 문서를 제한할 수 있습니다. 모든 클라이언트가 중앙 프록시 서버를 거칠 수 있도록 하고, 중앙 프록시 서버에서 요청마다 접근을 제어하고 audit trail(감사 추적)을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;보안 방화벽&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;보안용 프록시를 설치해 들어오는 요청에 바이러스가 있는지 검사할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;웹 캐시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버에 걸리는 부담을 줄이고 클라이언트들이 응답을 빠르게 얻을 수 있도록 서버 안에 자주 열람되는 리소스들의 사본을 모아 프록시에 저장해 놓을 수도 있습니다. 이를 웹 캐시라고 부릅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;대리 프록시(Surrogate)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;대리 프록시는 웹 서버인것 처럼 위장합니다. 요청을 받아 요청받은 리소스의 위치를 찾기 위해 다른 서버들과 통신합니다. 웹 서버의 성능 개선을 목적으로 쓰이기 때문에 흔히 서버 가속기라고 불리기도 합니다. 콘텐츠 라우팅기능과 결합되어 분산 네트워크를 구성하기도 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;콘텐츠 라우터&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;콘텐츠 라우터는 클라이언트나 콘텐츠 종류에 따라 요청을 특정 웹 서버로 유도합니다. 예를들어 높은 성능을 위해 추가로 돈을 지불할 수 있는 웹 서비스에선 추가 지불한 클라이언트들의 요청은 더 빨리 응답해줄 수 있는 웹 캐시로 전달해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;트랜스코더&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;트랜스코더는 본문의 포맷을 수정하는 프록시입니다. GIF 파일을 JPG 파일로 압축하거나, 일반 텍스트 파일을 더 압축할 수도 있고, 텍스트 파일을 특정 언어로 변환할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;익명화 프록시(Anonymizer)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP 메세지에서 클라이언트를 식별할 수 있는 특성들을 제거하고 전달해주는 프록시입니다. User-Agent헤더에서 사용자의 컴퓨터와 OS종류를 제거하고, IP주소, From헤더, Referer헤더, Cookie헤더 등을 제거해줍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;63-프록시는-어디에-있는가&quot;&gt;6.3. 프록시는 어디에 있는가&lt;/h3&gt;

&lt;p&gt;프록시가 어떤 역할을 하는지는 알았으니 이번엔 프록시가 구체적으로 어디에 있고, 언제 네트워크 아키텍처상에 배치되는지 알아보겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;631-프록시-서버-배치&quot;&gt;6.3.1. 프록시 서버 배치&lt;/h4&gt;

&lt;p&gt;프록시는 클라이언트-서버 사이면 어느 곳에든 배치 될 수 있는데 아래와 같은 방법들로 배치할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LAN과 WAN사이 : 출구(Egress) 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;로컬 네트워크(LAN, Local Area Network)가 WAN(Wide Area Network)에 들어가는 지점에 위치해 회사안의 보안을 강화할 수도 있고 어린이들이 유해 사이트에 노출되지 않게 할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ISP(Internet Service Provider)접근 지점 : 접근(입구) 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ISP란 KT, SK 텔레콤과 같이 인터넷을 제공해주는 업체를 말합니다. 주로 인터넷 속도 개선을 위해 사용하는 캐시 프록시를 예로 들 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;웹 서버 바로 앞 : 대리 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;대리 프록시는 웹 서버 바로 앞에 위치해 요청을 처리하고 서버에서 리소스를 가져와야 할 때만 서버까지 요청을 보냅니다. 주로 캐시 프록시를 예로 들 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;네트워크 교환 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;네트워크들 사이에 위치해서 트래픽의 혼잡을 완하하고 감시하기도 합니다.&lt;/p&gt;

&lt;h4 id=&quot;632-프록시-계층&quot;&gt;6.3.2. 프록시 계층&lt;/h4&gt;

&lt;p&gt;프록시는 여러개를 거칠 수도 있습니다. 만약&lt;/p&gt;

&lt;p&gt;클라이언트 -&amp;gt; 프록시1 -&amp;gt; 프록시2 -&amp;gt; 프록시3 -&amp;gt; 서버&lt;/p&gt;

&lt;p&gt;관계가 있다면 프록시2는 프록시1의 인바운드 프록시이며 ‘부모’프록시라고 부릅니다. 반대로 프록시2는 프록시3의 아웃바운드 프록시이며 ‘자식’프록시라고 부릅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프락시 계층 콘텐츠 라우팅&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프록시가 계층을 이루고 있을때 프록시A는 항상 프록시B로 요청을 보낼 수도 있고(프록시 계층이 정적이다) 조건에 따라 다른 프록시들로 라우팅 할 수도 있습니다.(프록시 계층이 동적이다.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;부하 균형
 자식 프록시는 부하를 분산하기 위해 부모 프록시들의 작업량을 파악해 부하가 적게 걸리는 부모쪽으로 라우팅 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;지리적 인접성에 근거한 라우팅
 원 서버의 각 지역을 담당하는 부모쪽으로 라우팅할 수 있습니다. 2020년 3월 16일 기준으로 구글 클라우드 서비스는 전세계 21개 지역에 서버를 두고 있습니다. 서울도 있습니다.&lt;/li&gt;
  &lt;li&gt;프로토콜/타입 라우팅
 요청 URI에 근거해 라우팅을 할 수 있습니다. FTP프로토콜로 온 요청을 파일 서버로 라우팅 한다던가, 이미지 파일 요청이 왔을때 이미지 서버로 라우팅할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;유료 서비스 가입자를 위한 라우팅
 빠른 성능을 위해 추가금액을 낸 이용자를 위해 가까운 것에 캐시 프록시를 만들어 캐시 프록시에서 바로 리소스를 제공해줄 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;633-어떻게-프록시가-트래픽을-처리하는가&quot;&gt;6.3.3. 어떻게 프록시가 트래픽을 처리하는가&lt;/h4&gt;

&lt;p&gt;그런데 지금까지 학습한 바에 따르면 우리는 분명 원 서버로 URL 요청을 보낼텐데 어떻게 그 요청이 프록시로 가는 걸까요&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클라이언트 수정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저같은 웹 클라이언트들은 수동 혹은 자동 프록시 설정을 지원합니다. 클라이언트 어플리케이션에서 특정 프록시를 거치도록 설정 됐거나, 설정 하게되면 사용자의 요청은 프록시로 먼저 가게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;네트워크 수정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;네트워크를 관리하는 업체에선 트래픽을 가로채 프록시로 보낼 수 있습니다. 이 방법을 사용하면 클라이언트 입장에선 자신의 요청이 프록시를 거쳐온건지, 바로 서버로 갔다온건지 알 수 없습니다. 이를 하기 위해 스위칭 장치와 라우팅 장치가 필요합니다. 이런 프록시를 인터셉트 프록시라고 부릅니다.
 (투명 프록시(transparent proxy) 라고도 하지만 HTTP 명세에서 transparent는 ‘행위의 의미를 변경하지 않는다’라는 뜻으로 쓰이기 때문에 본 책에선 투명 프록시 대신 인터셉트 프록시라고 표현했습니다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS 이름 공간을 수정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용자가 URL에 호스트명을 입력하면 DNS 서버가 이를 호스트의 IP로 변환해줍니다. 이 과정에서 호스트 명을 호스트의 원 서버 IP가 아닌 프록시의 IP로 변환되게 설정한다면 요청을 프록시로 보낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;웹 서버를 수정 - 리다이렉션&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 서버에서 프록시로 리다이렉션 시킬 수도 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;64-클라이언트-프록시-설정&quot;&gt;6.4. 클라이언트 프록시 설정&lt;/h3&gt;

&lt;p&gt;앞서 웹 브라우저같은 클라이언트 어플리케이션을 수정해 요청을 프록시로 보낼 수 있다고 했습니다. 거의 모든 현대 브라우저에선 프록시를 사용할 수 있도록 여러가지 설정 방법을 제공하고 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;641-클라이언트-프록시-설정-수동&quot;&gt;6.4.1. 클라이언트 프록시 설정: 수동&lt;/h4&gt;

&lt;p&gt;사용자가 브라우저의 설정 탭에서 수동으로 프록시 설정을 할 수 있습니다. (크롬 프록시 설정 : &lt;a href=&quot;https://www.itopening.com/2413/&quot;&gt;https://www.itopening.com/2413/&lt;/a&gt; )&lt;/p&gt;

&lt;h4 id=&quot;642-클라이언트-프록시-설정-pac-파일&quot;&gt;6.4.2. 클라이언트 프록시 설정: PAC 파일&lt;/h4&gt;

&lt;p&gt;수동으로 프록시를 설정하는 방법은 쉽지만 한계가 있습니다. 하나의 프록시만 설정할 수 있고, 지정한 프록시가 장애를 일으킬때의 대안도 없으며, 기업같은 곳에선 프록시를 바꿀때마다 모든 사용자가 각자 프록시 설정을 바꿔야 합니다.&lt;/p&gt;

&lt;p&gt;PAC(Proxy Auto-Configuration)파일은 말 그대로 프록시를 자동으로 Configuration해주는 파일입니다. PAC파일은 FindProxyForUrl(url, host)라는 함수를 구현한 자바스크립트 파일입니다. PAC파일의 URI를 브라우저에 수동으로 설정해두면, 브라우저는 PAC 파일의 로직에 따라 동적으로 프록시를 찾습니다.&lt;/p&gt;

&lt;p&gt;기업같은 곳에서 PAC파일을 한 곳에서 관리하고 모든 사용자가 그 PAC파일의 URI만 안다면 언제든지 PAC 파일을 사용자와 관계 없이 업데이트 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;PAC 파일은 .pac확장자를 갖고 MIME 타입은 ‘application/x-ns-proxy-autoconfig’ 입니다. PAC파일에서 정의해야 하는 FindProxyForUrl 함수는 아래중 하나를 리턴해야 합니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;return 값&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DIRECT&lt;/td&gt;
      &lt;td&gt;프록시 없이 직접 연결한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PROXY host:port&lt;/td&gt;
      &lt;td&gt;지정한 프록시를 사용한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOCKS host:port&lt;/td&gt;
      &lt;td&gt;지정한 SOCKS 서버를 사용한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;아래는 프로토콜에 따라 프록시를 달리해주는 PAC 파일 사례입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FindProxyURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PROXY http-proxy.mydomain.com:8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ftp:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PROXY ftp-proxy.mydomain.com:8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DIRECT&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;643-클라이언트-프록시-설정-wpad&quot;&gt;6.4.3. 클라이언트 프록시 설정: WPAD&lt;/h4&gt;

&lt;p&gt;하지만 여기서 끝나지 않고 이 PAC파일의 설정 자체도 동적으로 할 수 있습니다. WPAD(Web Proxy Autodiscovery Protocol)는 프로토콜중 하나이며 자동으로 PAC 파일을 찾아줍니다. 대부분의 브라우저에서 지원해줍니다.&lt;/p&gt;

&lt;p&gt;자동으로 PAC 파일을 찾는 방법엔 몇가지 정형화된 기법이 있습니다. 브라우저는 몇 가지 PAC 파일 탐색 기법을 차례대로 성공할때 까지 수행합니다.&lt;/p&gt;

&lt;p&gt;WPAD명세에선 다음의 순서대로 기법들을 정의하고 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;동적 호스트 발견 규약(DHCP, Dynamic Host Configuration Protocol)&lt;/li&gt;
  &lt;li&gt;서비스 위치 규약(SLP, Service Location Protocol)&lt;/li&gt;
  &lt;li&gt;DNS 잘 알려진 호스트명&lt;/li&gt;
  &lt;li&gt;DNS SRV 레코드&lt;/li&gt;
  &lt;li&gt;DNS TXT 레코드 안의 서비스 URI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;20장에서 더 자세히 알아볼 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;65-프록시-요청의-미묘한-특징들&quot;&gt;6.5. 프록시 요청의 미묘한 특징들&lt;/h3&gt;

&lt;p&gt;프록시에게 하는 요청은 서버에 하는 요청과 약간 다른 특징을 갖습니다.&lt;/p&gt;

&lt;h4 id=&quot;651-프록시-uri는-서버-uri와-다르다&quot;&gt;6.5.1. 프록시 URI는 서버 URI와 다르다&lt;/h4&gt;

&lt;p&gt;클라이언트가 웹 서버로 바로 요청을 보낼땐 아래와 같이 부분 URI를 갖을 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET /index.html HTTP/1.0
User-Agent : SuperBrowser v1.3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하지만 프록시로 요청을 보낼땐 다음과 같이 완전한 URI를 갖습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET http://www.marys-antiques.com/index.html HTTP/1.0
User-Agent : SuperBrowser v1.3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;인터넷의 초창기 시절 클라이언트는 서버와 직접 대화했습니다. 가상 호스팅도, 프록시도 없었습니다. 이렇게 직접 대화하는 환경에서 서버는 자신의 호스트명, 포트번호를 알고 있기 때문에 클라이언트쪽에선 불필요한 정보 발송을 피하기 위해 스킴과 호스트를 생략한 부분 URI를 보냈습니다.&lt;/p&gt;

&lt;p&gt;하지만 프록시, 게이트웨이가 등장하며 부분 URI는 문제가 됐습니다. 프록시로 보내기 위해선 프록시 서버의 호스트명을 명시해야 했고, 게이트웨이에선 스킴을 읽어 어떤 프로토콜인지 식별해야 했기 때문입니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서 HTTP/1.0에선 프록시 요청의 경우 완전한 URI를 보내기로 하였습니다. HTTP/1.1 부턴 프록시, 서버 모두 완전한 URI를 요구하지만 아직 많은 레거시 클라이언트들이 부분 URI를 보냅니다.&lt;/p&gt;

&lt;h4 id=&quot;652-가상-호스팅에서-일어나는-같은-문제&quot;&gt;6.5.2. 가상 호스팅에서 일어나는 같은 문제&lt;/h4&gt;

&lt;p&gt;가상 호스팅은 물리적으론 같은 웹 서버를 공유하지만 여러 도메인을 호스팅하는 방식을 말합니다. 앞서 언급한 부분 URI는 가상 호스팅 환경에서도 문제가 됐습니다.&lt;/p&gt;

&lt;p&gt;프록시에선 완전한 URI를 요구하는 것으로 문제를 해결했지만 가상 호스팅에선 호스트와 포트 정보가 담겨있는 Host 헤더를 요구하는 것으로 해결했습니다.&lt;/p&gt;

&lt;h4 id=&quot;653-인터셉트-프록시는-부분-uri를-받는다&quot;&gt;6.5.3. 인터셉트 프록시는 부분 URI를 받는다.&lt;/h4&gt;

&lt;p&gt;6.5.1. 에서 프록시 요청은 완전한 URI를 요구한다고 했습니다. 하지만 클라이언트가 자신이 프록시와 대화하는지 모르면서 프록시와 대화할 수도 있습니다. 대리프록시, 인터셉트 프록시가 그 예입니다. 이때, 클라이언트는 자신이 원 서버와 대화한다고 생각하고 부분 URI를 보낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;대리 프록시는 앞서 설명했듯이 원 서버의 호스트명과 IP를 사용하기 때문에 문제될 것이 없고, 원 서버의 IP는 대리 프록시가 알고 있습니다.&lt;/p&gt;

&lt;p&gt;인터셉트 프록시는 네트워크 사이에서 서버로 가는 트래픽을 가로채기 때문에 부분 URI를 얻게 됩니다.(그래서 어떻게 되는지…)&lt;/p&gt;

&lt;h4 id=&quot;654-프록시는-프록시-요청과-서버-요청을-모두-다룰-수-있다&quot;&gt;6.5.4. 프록시는 프록시 요청과 서버 요청을 모두 다룰 수 있다.&lt;/h4&gt;

&lt;p&gt;다목적 프록시라면 완전한 URI와 부분 URI 모두를 다룰 수 있어야 합니다. 어떻게 다루는 지는 아래와 같은 프로세스를 따릅니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;완전한 URI가 주어졌다면 그것을 사용합니다.&lt;/li&gt;
  &lt;li&gt;부분 URI가 주어졌고 Host헤더가 있다면, Host 헤더를 이용해 원 서버의 이름과 포트번호를 알아냅니다.&lt;/li&gt;
  &lt;li&gt;부분 URI가 주어졌으나 Host 헤더가 없다면 다음과 같은 경우의 수가 있습니다.
    &lt;ol&gt;
      &lt;li&gt;프록시가 대리 프록시라면, 프록시에 원 서버 주소와 포트번호가 설정되어 있을 것입니다.&lt;/li&gt;
      &lt;li&gt;이전에 인터셉트 프록시가 가로챘던 트래픽을 받았고, 이전에 가로챈 인터셉터 프록시가 해당 트래픽에 원 IP주소와 포트번호를 설정해두었다면 그 IP와 포트번호를 사용합니다.&lt;/li&gt;
      &lt;li&gt;모두 실패했다면 에러 메세지를 반환합니다.(Host헤더를 지원하는 최신 브라우저로 업그레이드 하라는 에러 메세지)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;655-전송-중-uri-변경&quot;&gt;6.5.5. 전송 중 URI 변경&lt;/h4&gt;

&lt;p&gt;영향이 없을 것 같은 사소한 URI 변경도 문제를 일으킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;몇몇 프록시는 URI를 다음 홉으로 보내기 전에 포트번호를 기본 포트인 ‘:80’으로 설정한다던가, 잘못 사용된 예약어를 올바르게 교체하는 것 같은 표준 형식으로의 ‘정규화’를 진행합니다. 이런 변형도 상호운용성 문제를 일으킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;프록시는 최대한 관대하게 메세지를 받아 넘겨야 합니다.&lt;/p&gt;

&lt;p&gt;특히 HTTP명세에서 일반적인 인터셉트 프록시가 URI를 전달할때 절대 경로를 고쳐 쓰는 것을 금지합니다.(빈 경로를 ‘/’로 교체하는 건 허용합니다.)&lt;/p&gt;

&lt;h4 id=&quot;656-uri-클라이언트-자동확장과-호스트명-분석hostname-resolution&quot;&gt;6.5.6. URI 클라이언트 자동확장과 호스트명 분석(Hostname Resolution)&lt;/h4&gt;

&lt;p&gt;브라우저는 프록시의 존재 여부에 따라 요청 URI를 다르게 분석합니다. 프록시가 없다면 사용자가 입력한 URI에서 호스트명을 찾고 그에 대응하는 IP 주소들을 연결에 성공할 때까지 시도합니다.&lt;/p&gt;

&lt;p&gt;호스트가 발견되지 않는다면 브라우저는 사용자가 호스트명을 완전히 입력하지 않은 것으로 간주하고 2장에서 살펴봤던 URL 확장을 시도합니다.&lt;/p&gt;

&lt;h4 id=&quot;657-프록시-없는-uri-분석uri-resolution&quot;&gt;6.5.7. 프록시 없는 URI 분석(URI Resolution)&lt;/h4&gt;

&lt;p&gt;6.5.6.에서 명시적인 프록시가 없을 때의 과정을 사례를 들어 알아보겠습니다. 사용자가 URI에 ‘Oreilly’를 입력한 상황입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 ‘Oreilly’를 입력합니다.&lt;/li&gt;
  &lt;li&gt;브라우저는 DNS로 호스트 ‘Oreilly’를 찾습니다. -&amp;gt; 실패&lt;/li&gt;
  &lt;li&gt;브라우저는 ‘Oreilly’를 확장합니다.
3.1. 앞에 ‘www’, 뒤에 ‘com’을 붙여 ‘www.oreilly.com’로 URI를 확장했습니다.
3.2. DNS로 ‘www.oreilly.com’을 찾습니다. -&amp;gt; 성공, IP주소 받음&lt;/li&gt;
  &lt;li&gt;브라우저는 알아낸 IP주소들에 대해 성공할 때까지 접속을 시도합니다. -&amp;gt; 성공했다면 커넥션을 맺습니다.&lt;/li&gt;
  &lt;li&gt;요청을 보내고 응답을 받습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;658-명시적인-프록시를-사용할-때의-uri-분석&quot;&gt;6.5.8. 명시적인 프록시를 사용할 때의 URI 분석&lt;/h4&gt;

&lt;p&gt;6.5.6. 에서 명시적인 프록시를 사용한다면 브라우저가 제공하는 URI 확장 없이 요청이 진행됩니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 ‘Oreilly’를 입력합니다.&lt;/li&gt;
  &lt;li&gt;브라우저는 사용하기로 설정된 프록시의 호스트 명과 DNS를 이용해 프록시의 IP를 알아냅니다.&lt;/li&gt;
  &lt;li&gt;브라우저와 프록시가 커넥션을 맺습니다.&lt;/li&gt;
  &lt;li&gt;브라우저는 기본 스킴과 경로만 추가해 프록시로 ‘http://oreilly/’라는 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;이후로는 프록시에 따라 달라집니다. URI 확장을 시도하는 프록시도 있지만 대부분 확장하지 않고 에러를 돌려줄 것입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;659-인터셉트-프록시를-이용한-uri-분석&quot;&gt;6.5.9. 인터셉트 프록시를 이용한 URI 분석&lt;/h4&gt;

&lt;p&gt;앞서 인터셉터 프록시는 클라이언트 입장에서 본인이 프록시와 대화하는지 모른다고 하였습니다. 그렇기 때문에 6.5.6.의 과정에서 인터셉트 프록시가 개입한다면 클라이언트는 URI 확장을 시도합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 ‘Oreilly’를 입력합니다.&lt;/li&gt;
  &lt;li&gt;브라우저는 DNS로 호스트 ‘Oreilly’를 찾습니다. -&amp;gt; 실패&lt;/li&gt;
  &lt;li&gt;브라우저는 ‘Oreilly’를 확장합니다.
3.1. 앞에 ‘www’, 뒤에 ‘com’을 붙여 ‘www.oreilly.com’로 URI를 확장했습니다.
3.2. DNS로 ‘www.oreilly.com’을 찾습니다. -&amp;gt; 성공, IP주소 받음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;하지만 여기서 프록시가 없을 때와 인터셉트 프록시가 개입할때가 다른 과정을 보입니다. 프록시가 없을 땐 받아온 IP들중 연결에 성공할 때까지 접속을 시도합니다. 하지만 인터셉트 프록시가 개입하면 첫 번째 접속 시도로 끝납니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;브라우저가 첫 번째 접속을 시도하고 그 시도를 인터셉트 프록시가 가로챕니다. 브라우저는 첫 번째 접속 시도가 성공했다고 생각합니다.&lt;/li&gt;
  &lt;li&gt;인터셉트 프록시가 원 서버와 대화할 준비가 되었을때 프록시는 원 서버에 장애가 있다는 것을 알게 됩니다.&lt;/li&gt;
  &lt;li&gt;인터셉트 프록시는 Host헤더를 찾아 DNS를 이용해 접속 시도할 수 있는 IP를 다시 받아 오던지, Host헤더가 없다면 요청 받은 IP를 역방향 DNS 룩업을 시행해 호스트명을 알아낸뒤 다시 다른 IP들을 알아옵니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;66-메세지-추적&quot;&gt;6.6. 메세지 추적&lt;/h3&gt;

&lt;p&gt;오늘날에 웹 요청이 서버로 가기 까지 둘 이상의 프록시를 지나는건 매우 흔한 일입니다. 프록시가 흔해지며 프록시를 넘나드는 메세지의 흐름을 추적하고 문제점을 찾아내는 것이 중요해 졌습니다.&lt;/p&gt;

&lt;h4 id=&quot;661-via-헤더&quot;&gt;6.6.1. Via 헤더&lt;/h4&gt;

&lt;p&gt;Via헤더 필드는 메세지가 지나는 중간 노드(프록시 및 게이트웨이)의 정보를 나열해줍니다. 한 노드를 지날 때 마다 해당 노드에 대한 정보가 Via 목록의 끝에 추가되어야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Via : 1.1 proxy-62.irenes-isp.net, 1.0 cache.joes-hardware.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 Via헤더 예시는 해당 메세지가 두개의 프록시를 거쳤음을 말해줍니다. 첫번째 프록시는 HTTP/1.1을 구현하는 proxy-62.irenes-isp.net 이라는 프록시이고 두번째는 HTTP/1.0을 구현하는 cache.joes-hardware.com 이라는 프록시입니다.&lt;/p&gt;

&lt;p&gt;프록시는 또한 네트워크의 라우팅 루프(마지막 목적지를 찾지 못하고 계속 looping 하는 현상)를 탐지하기 위해 Via 헤더를 사용할 수 있습니다. 프록시에서 받은 요청을 다른 곳으로 보낼때 자신의 정보를 Via헤더에 추가해야 하는데 추가 하기 전에 Via 헤더를 탐색해 라우팅 루프가 발견되는지 검사할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via 문법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Via 헤더 필드는 쉼표로 구분된 경유지(Waypoint)의 목록입니다.
 각 경유지는 개별 프록시, 게이트웨이를 나타내며 프로토콜과 주소에 대한 정보를 담고 있습니다. 프로토콜 이름을 기입 할 수 있으며 기입 안한경우엔 HTTP로 간주합니다. 프로토콜 버전과 경유지 이름은 필수이며 선택적으로 코멘트를 추가할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via 문법 - 프로토콜 이름&lt;/strong&gt;
 각 waypoint가 수신한 프로토콜입니다. HTTP라면 생략 가능하고 버전앞에 ‘/’로 구분되어 붙습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via 문법 - 프로토콜 버전&lt;/strong&gt;
 수신한 메세지의 프로토콜 버전입니다. 필수적으로 기입되어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via 문법 - 노드 이름&lt;/strong&gt;
 중개자의 호스트와 포트번호입니다. 포트번호는 생략 가능하며 이 경우 사용하는 프로토콜의 기본 포트로 간주합니다. 가명으로 대체할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via 문법 - 노드 코멘트&lt;/strong&gt;
 선택사항이며 자유롭게 기입할 수 있지만 주로 벤더나 버전 정보, 프록시에서 일어난 이벤트에 대한 진단 정보등을 넣습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via 요청과 응답 경로&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;요청, 응답 모두 Via 헤더를 갖습니다. TCP 커넥션의 경우 대부분 응답 메세지는 요청과 같은 경로로 되돌아갑니다. 요청시에 프록시 A, B, C를 지났다면 응답시엔 대부분 프록시 C, B, A를 지납니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via와 게이트웨이&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;현대의 프록시는 게이트웨이의 기능도 같이 제공할 수 있습니다. Via 헤더엔 이런 프로토콜 변환이 기록되기 때문에 클라이언트 쪽에서 해당 프록시에 프로토콜 변환 기능이 있는지 확인할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET ftp://http-guide.com/pub/welcom.txt HTTP/1.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같은 요청을 프록시로 보냈고 프록시가 FTP서버에 FTP 요청을 보내고 받아온 FTP응답을 HTTP로 변환해 클라이언트에게 돌려줍니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP/1.0 200 OK
Date : Sun, 11 Nov 2001 21:01:59 GMT
&lt;strong&gt;Via : FTP/1.0 proxy.irenes-isp.net (Traffic-Server/5.0.1-17882 [cMsf])&lt;/strong&gt;
Last-modified : Sun, 11 Nov 2001 21:05:24 GMT
Content-type : text/plain&lt;/p&gt;

  &lt;p&gt;Hi there~ This is FTP Server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Via헤더에 기록된 수신 프로토콜이 FTP라는 것에 주의합시다. 클라이언트가 처음 FTP요청을 보냈기에 수신한 프로토콜이 기재됐습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server 헤더와 Via헤더&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Server 헤더는 최종적인 목적지 서버가 사용하는 소프트웨어를 알려줍니다. 클라이언트가 요청한 원 서버를 위한 헤더입니다. 프록시에선 이 Server 헤더를 건드리면 안됩니다. 프록시가 무슨 소프트웨어를 사용하는지는 Via헤더의 코멘트에 기록하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via가 개인정보 보호와 보안에 미치는 영향&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프록시가 방화벽의 일부인 경우엔 프록시 뒤에 있는 호스트의 이름과 포트를 전달해서는 안됩니다. 이때 프록시는 호스트 명을 적당한 가명으로 교체할 수 있습니다. 아래와 같이 말이죠.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Via: 1.0 foo, 1.1 devirus.company.com, 1.1 access-logger.company.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 Via 헤더를&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Via: 1.0 foo, 1.1 concealed-stuff&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같이 여러개의 경유지를 하나로 합쳐 숨길 수 있습니다. 하지만 이렇게 합쳐 숨기기 위해선 경유지들이 모두 같은 조직의 통제하에 있고 호스트가 이미 가명으로 교체되었어야 합니다. 그리고 수신된 프로토콜이 다를땐 다른 프로토콜들을 합쳐선 안됩니다.&lt;/p&gt;

&lt;h4 id=&quot;662-trace-메서드&quot;&gt;6.6.2. TRACE 메서드&lt;/h4&gt;

&lt;p&gt;앞 장에서 TRACE 메서드의 역할을 알아본적이 있습니다. TRACE 요청이 목적지 서버에 도착했을 때(혹은 바로 알아볼 Max-Forward값이 0인 요청을 받은 서버), 서버는 요청 메세지를 응답 메세지 본문에 넣어 응답 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Max-Forward&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Max-Forward 헤더는 TRACE요청이나 OPTIONS 요청에서 프록시 홉의 갯수를 제한할 수 있습니다. 메세지가 프록시 들을 계속 무한 루프 도는지 테스트 할 때나, 프록시 연쇄 중간의 특정 프록시 서버들의 효과를 체크할 때 사용됩니다.&lt;/p&gt;

&lt;p&gt;Max-Forward헤더는 이 메세지가 앞으로 몇 개의 홉을 더 거칠수 있는지를 말해주는 값을 가지고 있습니다. Max-Forward값이 0이라면 수신 프록시는 자신이 목적지 서버가 아니더라도 인바운드 방향으로 전달하지 말고 클라이언트 쪽으로 응답을 보내야 합니다.&lt;/p&gt;

&lt;p&gt;받은 Max-Forward값이 0이 아니면 다음 홉으로 전달시 Max-Forward 값을 1 줄여 보내야 합니다.&lt;/p&gt;

&lt;p&gt;그리고 이런 Max-Forward가 작동하기 위해선 모든 프록시나 게이트웨이가 이 Max-Forward를 지원해야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;67-프록시-인증&quot;&gt;6.7. 프록시 인증&lt;/h3&gt;

&lt;p&gt;프록시는 접근 제어 장치로 사용될 수 있습니다. 사용자가 유효한 접근 권한 자격을 프록시에 제출하지 않으면 프록시에서 요청을 차단할 수 있는데 이를 ‘프록시 인증’ 메커니즘 이라고 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;제한된 콘텐츠에 대한 요청이 프록시에 도착.&lt;/li&gt;
  &lt;li&gt;프록시는 접근 자격을 요구하는 407 Proxy Authorization Required 상태코드와 자격 제출 방식을 설명해주는 Proxy-Authenticate 헤더 필드를 클라이언트에게 보냅니다.&lt;/li&gt;
  &lt;li&gt;407 응답을 받은 클라리언트는 로컬 DB를 찾던지, 사용자에게 물어보던지 여러 방식으로 요구 자격을 수집합니다.&lt;/li&gt;
  &lt;li&gt;자격을 얻었다면 자격을 Proxy-Authenticate 헤더에 담아 다시 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;자격이 유효하다면 프록시는 다음 홉으로 메세지를 전달하고 유효하지 않다면 407응답을 보냅니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프록시 인증은 인증에 참여하는 프록시가 프록시 연쇄상에 여러개 있을 경우 잘 작동하지 않습니다.(Proxy-Authenticate에 있는 값이 여러 프록시 인증 중 어디에 쓰여야 될지 모르므로.) 이를 해결하기 위해 프록시 연쇄의 특정 경유지와 인증 자격을 짝지어주는 HTTP 기능 확장이 제안 됐지만 많이 구현되진 않았습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;68-프록시-상호운용성&quot;&gt;6.8. 프록시 상호운용성&lt;/h3&gt;

&lt;p&gt;클라이언트, 서버, 프록시들은 각기 다른 프로토콜, 프로토콜 버전, 벤더 등을 가지고 있습니다. 따라서 이런 많은 기기들간의 상호운용성 문제는 항상 중요합니다.&lt;/p&gt;

&lt;h4 id=&quot;681-지원하지-않는-헤더와-메서드-다루기&quot;&gt;6.8.1. 지원하지 않는 헤더와 메서드 다루기&lt;/h4&gt;

&lt;p&gt;기본적으로 프록시가 자신이 이해할 수 없는 메서드와 헤더를 만난다면 관대하게 그대로 보존해 전달해야 합니다. HTTP 명세에선 메서드와 헤더의 확장을 허용하기 때문에 항상 자신이 이해하지 못하는 메서드와 헤더를 염두에 두어야 합니다.&lt;/p&gt;

&lt;p&gt;같은 이름의 헤더필드가 여러개 온다면 이 헤더필드의 상대적인 순서 역시 그대로 보존해야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;682-options-어떤-기능을-지원하는지-알아보기&quot;&gt;6.8.2. OPTIONS: 어떤 기능을 지원하는지 알아보기&lt;/h4&gt;

&lt;p&gt;앞 장에서 OPTIONS는 서버에게 특정 리소스에 대해 어떤 메서드를 지원하는지 묻는 메서드라고 했습니다.&lt;/p&gt;

&lt;p&gt;OPTIONS 요청을 받은 서버는 특정 리소스에 대해 가능한 기능을 서술하는 여러 헤더를 추가할 수 있지만 HTTP/1.1 명세에서 정의한 헤더는 Allow 헤더 뿐입니다.&lt;/p&gt;

&lt;h4 id=&quot;683-allow-헤더&quot;&gt;6.8.3. Allow 헤더&lt;/h4&gt;

&lt;p&gt;기본적으로 Allow 헤더는 OPTIONS 요청에 대해 응답하기 위한 헤더입니다. 식별되는 자원에 대해 OPTIONS 요청을 하면 서버는 그 리소스에 지원되는 메서드나 서버가 지원하는 모든 메서드(요청 URI가 *인 경우)를 열거합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Allow : GET, HEAD, PUT&lt;/p&gt;

  &lt;p&gt;-&amp;gt; 요청 리소스에 대해 GET, HEAD, PUT 요청이 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그런데 Allow 헤더가 요청에도 사용될 수 있습니다. 이때 Allow 헤더는 새 리소스가 지원했으면 하는 메서드를 추천하기 위해 사용되지만 서버가 이를 지원할 의무는 없습니다.&lt;/p&gt;

&lt;p&gt;프록시가 Allow에 있는 메서드를 이해할 수 없다고 해서 Allow 헤더를 수정하면 안됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Github Page Emoji</title>
   <link href="http://localhost:4000/posts/googling/etc/Github-Page-Emoji/"/>
   <updated>2020-03-16T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/etc/Github Page Emoji</id>
   <content type="html">&lt;p&gt;Thanks for ‘https://gist.github.com/rxaviers/7360908’ ​ :fire::fire::fire:&lt;/p&gt;

&lt;p&gt;People&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;:bowtie: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bowtie:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:smile: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smile:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:laughing: &lt;code class=&quot;highlighter-rouge&quot;&gt;:laughing:&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:blush: &lt;code class=&quot;highlighter-rouge&quot;&gt;:blush:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:smiley: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smiley:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:relaxed: &lt;code class=&quot;highlighter-rouge&quot;&gt;:relaxed:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:smirk: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smirk:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heart_eyes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heart_eyes:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:kissing_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kissing_heart:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:kissing_closed_eyes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kissing_closed_eyes:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:flushed: &lt;code class=&quot;highlighter-rouge&quot;&gt;:flushed:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:relieved: &lt;code class=&quot;highlighter-rouge&quot;&gt;:relieved:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:satisfied: &lt;code class=&quot;highlighter-rouge&quot;&gt;:satisfied:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:grin: &lt;code class=&quot;highlighter-rouge&quot;&gt;:grin:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wink: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wink:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:stuck_out_tongue_winking_eye: &lt;code class=&quot;highlighter-rouge&quot;&gt;:stuck_out_tongue_winking_eye:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:stuck_out_tongue_closed_eyes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:stuck_out_tongue_closed_eyes:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:grinning: &lt;code class=&quot;highlighter-rouge&quot;&gt;:grinning:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:kissing: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kissing:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:kissing_smiling_eyes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kissing_smiling_eyes:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:stuck_out_tongue: &lt;code class=&quot;highlighter-rouge&quot;&gt;:stuck_out_tongue:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sleeping: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sleeping:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:worried: &lt;code class=&quot;highlighter-rouge&quot;&gt;:worried:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:frowning: &lt;code class=&quot;highlighter-rouge&quot;&gt;:frowning:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:anguished: &lt;code class=&quot;highlighter-rouge&quot;&gt;:anguished:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:open_mouth: &lt;code class=&quot;highlighter-rouge&quot;&gt;:open_mouth:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:grimacing: &lt;code class=&quot;highlighter-rouge&quot;&gt;:grimacing:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:confused: &lt;code class=&quot;highlighter-rouge&quot;&gt;:confused:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hushed: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hushed:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:expressionless: &lt;code class=&quot;highlighter-rouge&quot;&gt;:expressionless:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:unamused: &lt;code class=&quot;highlighter-rouge&quot;&gt;:unamused:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sweat_smile: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sweat_smile:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sweat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sweat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:disappointed_relieved: &lt;code class=&quot;highlighter-rouge&quot;&gt;:disappointed_relieved:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:weary: &lt;code class=&quot;highlighter-rouge&quot;&gt;:weary:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pensive: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pensive:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:disappointed: &lt;code class=&quot;highlighter-rouge&quot;&gt;:disappointed:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:confounded: &lt;code class=&quot;highlighter-rouge&quot;&gt;:confounded:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fearful: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fearful:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cold_sweat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cold_sweat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:persevere: &lt;code class=&quot;highlighter-rouge&quot;&gt;:persevere:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cry: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cry:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sob: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sob:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:joy: &lt;code class=&quot;highlighter-rouge&quot;&gt;:joy:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:astonished: &lt;code class=&quot;highlighter-rouge&quot;&gt;:astonished:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:scream: &lt;code class=&quot;highlighter-rouge&quot;&gt;:scream:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:neckbeard: &lt;code class=&quot;highlighter-rouge&quot;&gt;:neckbeard:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tired_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tired_face:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:angry: &lt;code class=&quot;highlighter-rouge&quot;&gt;:angry:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rage: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rage:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:triumph: &lt;code class=&quot;highlighter-rouge&quot;&gt;:triumph:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sleepy: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sleepy:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:yum: &lt;code class=&quot;highlighter-rouge&quot;&gt;:yum:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mask: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mask:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sunglasses: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sunglasses:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dizzy_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dizzy_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:imp: &lt;code class=&quot;highlighter-rouge&quot;&gt;:imp:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:smiling_imp: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smiling_imp:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:neutral_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:neutral_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:no_mouth: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_mouth:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:innocent: &lt;code class=&quot;highlighter-rouge&quot;&gt;:innocent:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:alien: &lt;code class=&quot;highlighter-rouge&quot;&gt;:alien:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:yellow_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:yellow_heart:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:blue_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:blue_heart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:purple_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:purple_heart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heart:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:green_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:green_heart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:broken_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:broken_heart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heartbeat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heartbeat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:heartpulse: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heartpulse:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:two_hearts: &lt;code class=&quot;highlighter-rouge&quot;&gt;:two_hearts:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:revolving_hearts: &lt;code class=&quot;highlighter-rouge&quot;&gt;:revolving_hearts:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cupid: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cupid:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sparkling_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sparkling_heart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sparkles: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sparkles:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:star: &lt;code class=&quot;highlighter-rouge&quot;&gt;:star:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:star2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:star2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dizzy: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dizzy:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:boom: &lt;code class=&quot;highlighter-rouge&quot;&gt;:boom:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:collision: &lt;code class=&quot;highlighter-rouge&quot;&gt;:collision:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:anger: &lt;code class=&quot;highlighter-rouge&quot;&gt;:anger:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:exclamation: &lt;code class=&quot;highlighter-rouge&quot;&gt;:exclamation:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:question: &lt;code class=&quot;highlighter-rouge&quot;&gt;:question:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:grey_exclamation: &lt;code class=&quot;highlighter-rouge&quot;&gt;:grey_exclamation:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:grey_question: &lt;code class=&quot;highlighter-rouge&quot;&gt;:grey_question:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:zzz: &lt;code class=&quot;highlighter-rouge&quot;&gt;:zzz:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dash: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dash:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sweat_drops: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sweat_drops:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:notes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:notes:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:musical_note: &lt;code class=&quot;highlighter-rouge&quot;&gt;:musical_note:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:fire: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fire:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hankey: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hankey:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:poop: &lt;code class=&quot;highlighter-rouge&quot;&gt;:poop:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:shit: &lt;code class=&quot;highlighter-rouge&quot;&gt;:shit:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:+1: &lt;code class=&quot;highlighter-rouge&quot;&gt;:+1:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:thumbsup: &lt;code class=&quot;highlighter-rouge&quot;&gt;:thumbsup:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:-1: &lt;code class=&quot;highlighter-rouge&quot;&gt;:-1:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:thumbsdown: &lt;code class=&quot;highlighter-rouge&quot;&gt;:thumbsdown:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ok_hand: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ok_hand:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:punch: &lt;code class=&quot;highlighter-rouge&quot;&gt;:punch:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:facepunch: &lt;code class=&quot;highlighter-rouge&quot;&gt;:facepunch:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fist: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fist:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:v: &lt;code class=&quot;highlighter-rouge&quot;&gt;:v:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wave: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wave:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hand: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hand:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:raised_hand: &lt;code class=&quot;highlighter-rouge&quot;&gt;:raised_hand:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:open_hands: &lt;code class=&quot;highlighter-rouge&quot;&gt;:open_hands:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:point_up: &lt;code class=&quot;highlighter-rouge&quot;&gt;:point_up:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:point_down: &lt;code class=&quot;highlighter-rouge&quot;&gt;:point_down:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:point_left: &lt;code class=&quot;highlighter-rouge&quot;&gt;:point_left:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:point_right: &lt;code class=&quot;highlighter-rouge&quot;&gt;:point_right:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:raised_hands: &lt;code class=&quot;highlighter-rouge&quot;&gt;:raised_hands:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pray: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pray:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:point_up_2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:point_up_2:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clap: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clap:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:muscle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:muscle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:metal: &lt;code class=&quot;highlighter-rouge&quot;&gt;:metal:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:fu: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fu:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:walking: &lt;code class=&quot;highlighter-rouge&quot;&gt;:walking:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:runner: &lt;code class=&quot;highlighter-rouge&quot;&gt;:runner:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:running: &lt;code class=&quot;highlighter-rouge&quot;&gt;:running:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:couple: &lt;code class=&quot;highlighter-rouge&quot;&gt;:couple:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:family: &lt;code class=&quot;highlighter-rouge&quot;&gt;:family:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:two_men_holding_hands: &lt;code class=&quot;highlighter-rouge&quot;&gt;:two_men_holding_hands:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:two_women_holding_hands: &lt;code class=&quot;highlighter-rouge&quot;&gt;:two_women_holding_hands:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dancer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dancer:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:dancers: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dancers:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ok_woman: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ok_woman:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:no_good: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_good:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:information_desk_person: &lt;code class=&quot;highlighter-rouge&quot;&gt;:information_desk_person:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:raising_hand: &lt;code class=&quot;highlighter-rouge&quot;&gt;:raising_hand:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bride_with_veil: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bride_with_veil:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:person_with_pouting_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:person_with_pouting_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:person_frowning: &lt;code class=&quot;highlighter-rouge&quot;&gt;:person_frowning:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bow: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bow:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:couplekiss: &lt;code class=&quot;highlighter-rouge&quot;&gt;:couplekiss:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:couple_with_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:couple_with_heart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:massage: &lt;code class=&quot;highlighter-rouge&quot;&gt;:massage:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:haircut: &lt;code class=&quot;highlighter-rouge&quot;&gt;:haircut:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:nail_care: &lt;code class=&quot;highlighter-rouge&quot;&gt;:nail_care:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:boy: &lt;code class=&quot;highlighter-rouge&quot;&gt;:boy:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:girl: &lt;code class=&quot;highlighter-rouge&quot;&gt;:girl:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:woman: &lt;code class=&quot;highlighter-rouge&quot;&gt;:woman:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:man: &lt;code class=&quot;highlighter-rouge&quot;&gt;:man:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:baby: &lt;code class=&quot;highlighter-rouge&quot;&gt;:baby:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:older_woman: &lt;code class=&quot;highlighter-rouge&quot;&gt;:older_woman:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:older_man: &lt;code class=&quot;highlighter-rouge&quot;&gt;:older_man:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:person_with_blond_hair: &lt;code class=&quot;highlighter-rouge&quot;&gt;:person_with_blond_hair:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:man_with_gua_pi_mao: &lt;code class=&quot;highlighter-rouge&quot;&gt;:man_with_gua_pi_mao:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:man_with_turban: &lt;code class=&quot;highlighter-rouge&quot;&gt;:man_with_turban:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:construction_worker: &lt;code class=&quot;highlighter-rouge&quot;&gt;:construction_worker:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cop: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cop:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:angel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:angel:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:princess: &lt;code class=&quot;highlighter-rouge&quot;&gt;:princess:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:smiley_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smiley_cat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:smile_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smile_cat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:heart_eyes_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heart_eyes_cat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:kissing_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kissing_cat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:smirk_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smirk_cat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:scream_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:scream_cat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:crying_cat_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:crying_cat_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:joy_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:joy_cat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:pouting_cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pouting_cat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:japanese_ogre: &lt;code class=&quot;highlighter-rouge&quot;&gt;:japanese_ogre:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:japanese_goblin: &lt;code class=&quot;highlighter-rouge&quot;&gt;:japanese_goblin:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:see_no_evil: &lt;code class=&quot;highlighter-rouge&quot;&gt;:see_no_evil:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hear_no_evil: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hear_no_evil:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:speak_no_evil: &lt;code class=&quot;highlighter-rouge&quot;&gt;:speak_no_evil:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:guardsman: &lt;code class=&quot;highlighter-rouge&quot;&gt;:guardsman:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:skull: &lt;code class=&quot;highlighter-rouge&quot;&gt;:skull:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:feet: &lt;code class=&quot;highlighter-rouge&quot;&gt;:feet:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:lips: &lt;code class=&quot;highlighter-rouge&quot;&gt;:lips:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:kiss: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kiss:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:droplet: &lt;code class=&quot;highlighter-rouge&quot;&gt;:droplet:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ear: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ear:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:eyes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:eyes:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:nose: &lt;code class=&quot;highlighter-rouge&quot;&gt;:nose:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tongue: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tongue:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:love_letter: &lt;code class=&quot;highlighter-rouge&quot;&gt;:love_letter:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bust_in_silhouette: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bust_in_silhouette:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:busts_in_silhouette: &lt;code class=&quot;highlighter-rouge&quot;&gt;:busts_in_silhouette:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:speech_balloon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:speech_balloon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:thought_balloon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:thought_balloon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:feelsgood: &lt;code class=&quot;highlighter-rouge&quot;&gt;:feelsgood:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:finnadie: &lt;code class=&quot;highlighter-rouge&quot;&gt;:finnadie:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:goberserk: &lt;code class=&quot;highlighter-rouge&quot;&gt;:goberserk:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:godmode: &lt;code class=&quot;highlighter-rouge&quot;&gt;:godmode:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hurtrealbad: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hurtrealbad:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rage1: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rage1:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:rage2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rage2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rage3: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rage3:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rage4: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rage4:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:suspect: &lt;code class=&quot;highlighter-rouge&quot;&gt;:suspect:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:trollface: &lt;code class=&quot;highlighter-rouge&quot;&gt;:trollface:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nature&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;:sunny: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sunny:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:umbrella: &lt;code class=&quot;highlighter-rouge&quot;&gt;:umbrella:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:cloud: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cloud:&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:snowflake: &lt;code class=&quot;highlighter-rouge&quot;&gt;:snowflake:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:snowman: &lt;code class=&quot;highlighter-rouge&quot;&gt;:snowman:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:zap: &lt;code class=&quot;highlighter-rouge&quot;&gt;:zap:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cyclone: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cyclone:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:foggy: &lt;code class=&quot;highlighter-rouge&quot;&gt;:foggy:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ocean: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ocean:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dog: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dog:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mouse: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mouse:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:hamster: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hamster:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rabbit: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rabbit:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wolf: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wolf:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:frog: &lt;code class=&quot;highlighter-rouge&quot;&gt;:frog:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tiger: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tiger:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:koala: &lt;code class=&quot;highlighter-rouge&quot;&gt;:koala:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bear: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bear:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pig: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pig:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pig_nose: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pig_nose:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cow: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cow:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:boar: &lt;code class=&quot;highlighter-rouge&quot;&gt;:boar:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:monkey_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:monkey_face:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:monkey: &lt;code class=&quot;highlighter-rouge&quot;&gt;:monkey:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:horse: &lt;code class=&quot;highlighter-rouge&quot;&gt;:horse:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:racehorse: &lt;code class=&quot;highlighter-rouge&quot;&gt;:racehorse:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:camel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:camel:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sheep: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sheep:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:elephant: &lt;code class=&quot;highlighter-rouge&quot;&gt;:elephant:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:panda_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:panda_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:snake: &lt;code class=&quot;highlighter-rouge&quot;&gt;:snake:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bird: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bird:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:baby_chick: &lt;code class=&quot;highlighter-rouge&quot;&gt;:baby_chick:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hatched_chick: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hatched_chick:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hatching_chick: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hatching_chick:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:chicken: &lt;code class=&quot;highlighter-rouge&quot;&gt;:chicken:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:penguin: &lt;code class=&quot;highlighter-rouge&quot;&gt;:penguin:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:turtle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:turtle:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bug: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bug:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:honeybee: &lt;code class=&quot;highlighter-rouge&quot;&gt;:honeybee:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ant: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ant:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:beetle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:beetle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:snail: &lt;code class=&quot;highlighter-rouge&quot;&gt;:snail:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:octopus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:octopus:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tropical_fish: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tropical_fish:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fish: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fish:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:whale: &lt;code class=&quot;highlighter-rouge&quot;&gt;:whale:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:whale2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:whale2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dolphin: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dolphin:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cow2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cow2:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ram: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ram:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:water_buffalo: &lt;code class=&quot;highlighter-rouge&quot;&gt;:water_buffalo:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tiger2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tiger2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rabbit2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rabbit2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dragon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dragon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:goat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:goat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rooster: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rooster:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dog2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dog2:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:pig2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pig2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mouse2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mouse2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ox: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ox:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:dragon_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dragon_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:blowfish: &lt;code class=&quot;highlighter-rouge&quot;&gt;:blowfish:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:crocodile: &lt;code class=&quot;highlighter-rouge&quot;&gt;:crocodile:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:dromedary_camel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dromedary_camel:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:leopard: &lt;code class=&quot;highlighter-rouge&quot;&gt;:leopard:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cat2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cat2:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:poodle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:poodle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:paw_prints: &lt;code class=&quot;highlighter-rouge&quot;&gt;:paw_prints:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bouquet: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bouquet:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cherry_blossom: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cherry_blossom:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tulip: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tulip:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:four_leaf_clover: &lt;code class=&quot;highlighter-rouge&quot;&gt;:four_leaf_clover:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:rose: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rose:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sunflower: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sunflower:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hibiscus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hibiscus:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:maple_leaf: &lt;code class=&quot;highlighter-rouge&quot;&gt;:maple_leaf:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:leaves: &lt;code class=&quot;highlighter-rouge&quot;&gt;:leaves:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fallen_leaf: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fallen_leaf:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:herb: &lt;code class=&quot;highlighter-rouge&quot;&gt;:herb:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mushroom: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mushroom:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cactus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cactus:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:palm_tree: &lt;code class=&quot;highlighter-rouge&quot;&gt;:palm_tree:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:evergreen_tree: &lt;code class=&quot;highlighter-rouge&quot;&gt;:evergreen_tree:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:deciduous_tree: &lt;code class=&quot;highlighter-rouge&quot;&gt;:deciduous_tree:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:chestnut: &lt;code class=&quot;highlighter-rouge&quot;&gt;:chestnut:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:seedling: &lt;code class=&quot;highlighter-rouge&quot;&gt;:seedling:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:blossom: &lt;code class=&quot;highlighter-rouge&quot;&gt;:blossom:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ear_of_rice: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ear_of_rice:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:shell: &lt;code class=&quot;highlighter-rouge&quot;&gt;:shell:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:globe_with_meridians: &lt;code class=&quot;highlighter-rouge&quot;&gt;:globe_with_meridians:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sun_with_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sun_with_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:full_moon_with_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:full_moon_with_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:new_moon_with_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:new_moon_with_face:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:new_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:new_moon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:waxing_crescent_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:waxing_crescent_moon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:first_quarter_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:first_quarter_moon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:waxing_gibbous_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:waxing_gibbous_moon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:full_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:full_moon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:waning_gibbous_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:waning_gibbous_moon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:last_quarter_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:last_quarter_moon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:waning_crescent_moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:waning_crescent_moon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:last_quarter_moon_with_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:last_quarter_moon_with_face:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:first_quarter_moon_with_face: &lt;code class=&quot;highlighter-rouge&quot;&gt;:first_quarter_moon_with_face:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:moon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:moon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:earth_africa: &lt;code class=&quot;highlighter-rouge&quot;&gt;:earth_africa:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:earth_americas: &lt;code class=&quot;highlighter-rouge&quot;&gt;:earth_americas:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:earth_asia: &lt;code class=&quot;highlighter-rouge&quot;&gt;:earth_asia:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:volcano: &lt;code class=&quot;highlighter-rouge&quot;&gt;:volcano:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:milky_way: &lt;code class=&quot;highlighter-rouge&quot;&gt;:milky_way:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:partly_sunny: &lt;code class=&quot;highlighter-rouge&quot;&gt;:partly_sunny:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:octocat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:octocat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:squirrel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:squirrel:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Objects&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;:bamboo: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bamboo:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:gift_heart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:gift_heart:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:dolls: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dolls:&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:school_satchel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:school_satchel:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mortar_board: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mortar_board:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:flags: &lt;code class=&quot;highlighter-rouge&quot;&gt;:flags:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:fireworks: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fireworks:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sparkler: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sparkler:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wind_chime: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wind_chime:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:rice_scene: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rice_scene:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:jack_o_lantern: &lt;code class=&quot;highlighter-rouge&quot;&gt;:jack_o_lantern:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ghost: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ghost:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:santa: &lt;code class=&quot;highlighter-rouge&quot;&gt;:santa:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:christmas_tree: &lt;code class=&quot;highlighter-rouge&quot;&gt;:christmas_tree:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:gift: &lt;code class=&quot;highlighter-rouge&quot;&gt;:gift:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bell: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bell:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:no_bell: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_bell:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tanabata_tree: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tanabata_tree:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tada: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tada:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:confetti_ball: &lt;code class=&quot;highlighter-rouge&quot;&gt;:confetti_ball:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:balloon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:balloon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:crystal_ball: &lt;code class=&quot;highlighter-rouge&quot;&gt;:crystal_ball:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cd: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cd:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dvd: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dvd:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:floppy_disk: &lt;code class=&quot;highlighter-rouge&quot;&gt;:floppy_disk:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:camera: &lt;code class=&quot;highlighter-rouge&quot;&gt;:camera:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:video_camera: &lt;code class=&quot;highlighter-rouge&quot;&gt;:video_camera:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:movie_camera: &lt;code class=&quot;highlighter-rouge&quot;&gt;:movie_camera:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:computer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:computer:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tv: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tv:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:iphone: &lt;code class=&quot;highlighter-rouge&quot;&gt;:iphone:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:phone: &lt;code class=&quot;highlighter-rouge&quot;&gt;:phone:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:telephone: &lt;code class=&quot;highlighter-rouge&quot;&gt;:telephone:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:telephone_receiver: &lt;code class=&quot;highlighter-rouge&quot;&gt;:telephone_receiver:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pager: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pager:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fax: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fax:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:minidisc: &lt;code class=&quot;highlighter-rouge&quot;&gt;:minidisc:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:vhs: &lt;code class=&quot;highlighter-rouge&quot;&gt;:vhs:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sound: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sound:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:speaker: &lt;code class=&quot;highlighter-rouge&quot;&gt;:speaker:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mute: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mute:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:loudspeaker: &lt;code class=&quot;highlighter-rouge&quot;&gt;:loudspeaker:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:mega: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mega:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hourglass: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hourglass:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hourglass_flowing_sand: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hourglass_flowing_sand:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:alarm_clock: &lt;code class=&quot;highlighter-rouge&quot;&gt;:alarm_clock:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:watch: &lt;code class=&quot;highlighter-rouge&quot;&gt;:watch:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:radio: &lt;code class=&quot;highlighter-rouge&quot;&gt;:radio:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:satellite: &lt;code class=&quot;highlighter-rouge&quot;&gt;:satellite:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:loop: &lt;code class=&quot;highlighter-rouge&quot;&gt;:loop:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mag: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mag:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:mag_right: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mag_right:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:unlock: &lt;code class=&quot;highlighter-rouge&quot;&gt;:unlock:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:lock: &lt;code class=&quot;highlighter-rouge&quot;&gt;:lock:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:lock_with_ink_pen: &lt;code class=&quot;highlighter-rouge&quot;&gt;:lock_with_ink_pen:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:closed_lock_with_key: &lt;code class=&quot;highlighter-rouge&quot;&gt;:closed_lock_with_key:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:key: &lt;code class=&quot;highlighter-rouge&quot;&gt;:key:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bulb: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bulb:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:flashlight: &lt;code class=&quot;highlighter-rouge&quot;&gt;:flashlight:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:high_brightness: &lt;code class=&quot;highlighter-rouge&quot;&gt;:high_brightness:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:low_brightness: &lt;code class=&quot;highlighter-rouge&quot;&gt;:low_brightness:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:electric_plug: &lt;code class=&quot;highlighter-rouge&quot;&gt;:electric_plug:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:battery: &lt;code class=&quot;highlighter-rouge&quot;&gt;:battery:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:calling: &lt;code class=&quot;highlighter-rouge&quot;&gt;:calling:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:email: &lt;code class=&quot;highlighter-rouge&quot;&gt;:email:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mailbox: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mailbox:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:postbox: &lt;code class=&quot;highlighter-rouge&quot;&gt;:postbox:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bath: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bath:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bathtub: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bathtub:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:shower: &lt;code class=&quot;highlighter-rouge&quot;&gt;:shower:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:toilet: &lt;code class=&quot;highlighter-rouge&quot;&gt;:toilet:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wrench: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wrench:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:nut_and_bolt: &lt;code class=&quot;highlighter-rouge&quot;&gt;:nut_and_bolt:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hammer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hammer:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:seat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:seat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:moneybag: &lt;code class=&quot;highlighter-rouge&quot;&gt;:moneybag:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:yen: &lt;code class=&quot;highlighter-rouge&quot;&gt;:yen:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dollar: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dollar:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:pound: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pound:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:euro: &lt;code class=&quot;highlighter-rouge&quot;&gt;:euro:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:credit_card: &lt;code class=&quot;highlighter-rouge&quot;&gt;:credit_card:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:money_with_wings: &lt;code class=&quot;highlighter-rouge&quot;&gt;:money_with_wings:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:e-mail: &lt;code class=&quot;highlighter-rouge&quot;&gt;:e-mail:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:inbox_tray: &lt;code class=&quot;highlighter-rouge&quot;&gt;:inbox_tray:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:outbox_tray: &lt;code class=&quot;highlighter-rouge&quot;&gt;:outbox_tray:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:envelope: &lt;code class=&quot;highlighter-rouge&quot;&gt;:envelope:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:incoming_envelope: &lt;code class=&quot;highlighter-rouge&quot;&gt;:incoming_envelope:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:postal_horn: &lt;code class=&quot;highlighter-rouge&quot;&gt;:postal_horn:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mailbox_closed: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mailbox_closed:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mailbox_with_mail: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mailbox_with_mail:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:mailbox_with_no_mail: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mailbox_with_no_mail:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:door: &lt;code class=&quot;highlighter-rouge&quot;&gt;:door:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:smoking: &lt;code class=&quot;highlighter-rouge&quot;&gt;:smoking:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bomb: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bomb:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:gun: &lt;code class=&quot;highlighter-rouge&quot;&gt;:gun:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hocho: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hocho:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:pill: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pill:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:syringe: &lt;code class=&quot;highlighter-rouge&quot;&gt;:syringe:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:page_facing_up: &lt;code class=&quot;highlighter-rouge&quot;&gt;:page_facing_up:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:page_with_curl: &lt;code class=&quot;highlighter-rouge&quot;&gt;:page_with_curl:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bookmark_tabs: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bookmark_tabs:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bar_chart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bar_chart:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:chart_with_upwards_trend: &lt;code class=&quot;highlighter-rouge&quot;&gt;:chart_with_upwards_trend:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:chart_with_downwards_trend: &lt;code class=&quot;highlighter-rouge&quot;&gt;:chart_with_downwards_trend:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:scroll: &lt;code class=&quot;highlighter-rouge&quot;&gt;:scroll:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clipboard: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clipboard:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:calendar: &lt;code class=&quot;highlighter-rouge&quot;&gt;:calendar:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:date: &lt;code class=&quot;highlighter-rouge&quot;&gt;:date:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:card_index: &lt;code class=&quot;highlighter-rouge&quot;&gt;:card_index:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:file_folder: &lt;code class=&quot;highlighter-rouge&quot;&gt;:file_folder:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:open_file_folder: &lt;code class=&quot;highlighter-rouge&quot;&gt;:open_file_folder:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:scissors: &lt;code class=&quot;highlighter-rouge&quot;&gt;:scissors:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pushpin: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pushpin:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:paperclip: &lt;code class=&quot;highlighter-rouge&quot;&gt;:paperclip:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:black_nib: &lt;code class=&quot;highlighter-rouge&quot;&gt;:black_nib:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pencil2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pencil2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:straight_ruler: &lt;code class=&quot;highlighter-rouge&quot;&gt;:straight_ruler:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:triangular_ruler: &lt;code class=&quot;highlighter-rouge&quot;&gt;:triangular_ruler:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:closed_book: &lt;code class=&quot;highlighter-rouge&quot;&gt;:closed_book:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:green_book: &lt;code class=&quot;highlighter-rouge&quot;&gt;:green_book:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:blue_book: &lt;code class=&quot;highlighter-rouge&quot;&gt;:blue_book:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:orange_book: &lt;code class=&quot;highlighter-rouge&quot;&gt;:orange_book:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:notebook: &lt;code class=&quot;highlighter-rouge&quot;&gt;:notebook:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:notebook_with_decorative_cover: &lt;code class=&quot;highlighter-rouge&quot;&gt;:notebook_with_decorative_cover:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ledger: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ledger:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:books: &lt;code class=&quot;highlighter-rouge&quot;&gt;:books:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bookmark: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bookmark:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:name_badge: &lt;code class=&quot;highlighter-rouge&quot;&gt;:name_badge:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:microscope: &lt;code class=&quot;highlighter-rouge&quot;&gt;:microscope:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:telescope: &lt;code class=&quot;highlighter-rouge&quot;&gt;:telescope:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:newspaper: &lt;code class=&quot;highlighter-rouge&quot;&gt;:newspaper:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:football: &lt;code class=&quot;highlighter-rouge&quot;&gt;:football:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:basketball: &lt;code class=&quot;highlighter-rouge&quot;&gt;:basketball:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:soccer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:soccer:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:baseball: &lt;code class=&quot;highlighter-rouge&quot;&gt;:baseball:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tennis: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tennis:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:8ball: &lt;code class=&quot;highlighter-rouge&quot;&gt;:8ball:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rugby_football: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rugby_football:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bowling: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bowling:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:golf: &lt;code class=&quot;highlighter-rouge&quot;&gt;:golf:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mountain_bicyclist: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mountain_bicyclist:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bicyclist: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bicyclist:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:horse_racing: &lt;code class=&quot;highlighter-rouge&quot;&gt;:horse_racing:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:snowboarder: &lt;code class=&quot;highlighter-rouge&quot;&gt;:snowboarder:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:swimmer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:swimmer:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:surfer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:surfer:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ski: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ski:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:spades: &lt;code class=&quot;highlighter-rouge&quot;&gt;:spades:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hearts: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hearts:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clubs: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clubs:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:diamonds: &lt;code class=&quot;highlighter-rouge&quot;&gt;:diamonds:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:gem: &lt;code class=&quot;highlighter-rouge&quot;&gt;:gem:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ring: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ring:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:trophy: &lt;code class=&quot;highlighter-rouge&quot;&gt;:trophy:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:musical_score: &lt;code class=&quot;highlighter-rouge&quot;&gt;:musical_score:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:musical_keyboard: &lt;code class=&quot;highlighter-rouge&quot;&gt;:musical_keyboard:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:violin: &lt;code class=&quot;highlighter-rouge&quot;&gt;:violin:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:space_invader: &lt;code class=&quot;highlighter-rouge&quot;&gt;:space_invader:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:video_game: &lt;code class=&quot;highlighter-rouge&quot;&gt;:video_game:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:black_joker: &lt;code class=&quot;highlighter-rouge&quot;&gt;:black_joker:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:flower_playing_cards: &lt;code class=&quot;highlighter-rouge&quot;&gt;:flower_playing_cards:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:game_die: &lt;code class=&quot;highlighter-rouge&quot;&gt;:game_die:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:dart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mahjong: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mahjong:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clapper: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clapper:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:memo: &lt;code class=&quot;highlighter-rouge&quot;&gt;:memo:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pencil: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pencil:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:book: &lt;code class=&quot;highlighter-rouge&quot;&gt;:book:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:art: &lt;code class=&quot;highlighter-rouge&quot;&gt;:art:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:microphone: &lt;code class=&quot;highlighter-rouge&quot;&gt;:microphone:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:headphones: &lt;code class=&quot;highlighter-rouge&quot;&gt;:headphones:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:trumpet: &lt;code class=&quot;highlighter-rouge&quot;&gt;:trumpet:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:saxophone: &lt;code class=&quot;highlighter-rouge&quot;&gt;:saxophone:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:guitar: &lt;code class=&quot;highlighter-rouge&quot;&gt;:guitar:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:shoe: &lt;code class=&quot;highlighter-rouge&quot;&gt;:shoe:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sandal: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sandal:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:high_heel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:high_heel:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:lipstick: &lt;code class=&quot;highlighter-rouge&quot;&gt;:lipstick:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:boot: &lt;code class=&quot;highlighter-rouge&quot;&gt;:boot:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:shirt: &lt;code class=&quot;highlighter-rouge&quot;&gt;:shirt:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tshirt: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tshirt:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:necktie: &lt;code class=&quot;highlighter-rouge&quot;&gt;:necktie:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:womans_clothes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:womans_clothes:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:dress: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dress:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:running_shirt_with_sash: &lt;code class=&quot;highlighter-rouge&quot;&gt;:running_shirt_with_sash:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:jeans: &lt;code class=&quot;highlighter-rouge&quot;&gt;:jeans:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:kimono: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kimono:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bikini: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bikini:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ribbon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ribbon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tophat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tophat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:crown: &lt;code class=&quot;highlighter-rouge&quot;&gt;:crown:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:womans_hat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:womans_hat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:mans_shoe: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mans_shoe:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:closed_umbrella: &lt;code class=&quot;highlighter-rouge&quot;&gt;:closed_umbrella:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:briefcase: &lt;code class=&quot;highlighter-rouge&quot;&gt;:briefcase:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:handbag: &lt;code class=&quot;highlighter-rouge&quot;&gt;:handbag:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pouch: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pouch:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:purse: &lt;code class=&quot;highlighter-rouge&quot;&gt;:purse:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:eyeglasses: &lt;code class=&quot;highlighter-rouge&quot;&gt;:eyeglasses:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fishing_pole_and_fish: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fishing_pole_and_fish:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:coffee: &lt;code class=&quot;highlighter-rouge&quot;&gt;:coffee:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tea: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tea:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sake: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sake:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:baby_bottle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:baby_bottle:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:beer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:beer:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:beers: &lt;code class=&quot;highlighter-rouge&quot;&gt;:beers:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cocktail: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cocktail:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tropical_drink: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tropical_drink:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wine_glass: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wine_glass:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fork_and_knife: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fork_and_knife:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:pizza: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pizza:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hamburger: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hamburger:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fries: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fries:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:poultry_leg: &lt;code class=&quot;highlighter-rouge&quot;&gt;:poultry_leg:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:meat_on_bone: &lt;code class=&quot;highlighter-rouge&quot;&gt;:meat_on_bone:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:spaghetti: &lt;code class=&quot;highlighter-rouge&quot;&gt;:spaghetti:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:curry: &lt;code class=&quot;highlighter-rouge&quot;&gt;:curry:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fried_shrimp: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fried_shrimp:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bento: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bento:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sushi: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sushi:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fish_cake: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fish_cake:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rice_ball: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rice_ball:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:rice_cracker: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rice_cracker:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rice: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rice:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ramen: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ramen:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:stew: &lt;code class=&quot;highlighter-rouge&quot;&gt;:stew:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:oden: &lt;code class=&quot;highlighter-rouge&quot;&gt;:oden:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:dango: &lt;code class=&quot;highlighter-rouge&quot;&gt;:dango:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:egg: &lt;code class=&quot;highlighter-rouge&quot;&gt;:egg:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bread: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bread:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:doughnut: &lt;code class=&quot;highlighter-rouge&quot;&gt;:doughnut:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:custard: &lt;code class=&quot;highlighter-rouge&quot;&gt;:custard:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:icecream: &lt;code class=&quot;highlighter-rouge&quot;&gt;:icecream:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ice_cream: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ice_cream:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:shaved_ice: &lt;code class=&quot;highlighter-rouge&quot;&gt;:shaved_ice:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:birthday: &lt;code class=&quot;highlighter-rouge&quot;&gt;:birthday:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cake: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cake:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cookie: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cookie:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:chocolate_bar: &lt;code class=&quot;highlighter-rouge&quot;&gt;:chocolate_bar:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:candy: &lt;code class=&quot;highlighter-rouge&quot;&gt;:candy:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:lollipop: &lt;code class=&quot;highlighter-rouge&quot;&gt;:lollipop:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:honey_pot: &lt;code class=&quot;highlighter-rouge&quot;&gt;:honey_pot:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:apple: &lt;code class=&quot;highlighter-rouge&quot;&gt;:apple:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:green_apple: &lt;code class=&quot;highlighter-rouge&quot;&gt;:green_apple:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tangerine: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tangerine:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:lemon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:lemon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cherries: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cherries:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:grapes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:grapes:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:watermelon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:watermelon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:strawberry: &lt;code class=&quot;highlighter-rouge&quot;&gt;:strawberry:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:peach: &lt;code class=&quot;highlighter-rouge&quot;&gt;:peach:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:melon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:melon:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:banana: &lt;code class=&quot;highlighter-rouge&quot;&gt;:banana:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pear: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pear:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pineapple: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pineapple:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sweet_potato: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sweet_potato:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:eggplant: &lt;code class=&quot;highlighter-rouge&quot;&gt;:eggplant:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tomato: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tomato:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:corn: &lt;code class=&quot;highlighter-rouge&quot;&gt;:corn:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Places&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;:house: &lt;code class=&quot;highlighter-rouge&quot;&gt;:house:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:house_with_garden: &lt;code class=&quot;highlighter-rouge&quot;&gt;:house_with_garden:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:school: &lt;code class=&quot;highlighter-rouge&quot;&gt;:school:&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:office: &lt;code class=&quot;highlighter-rouge&quot;&gt;:office:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:post_office: &lt;code class=&quot;highlighter-rouge&quot;&gt;:post_office:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hospital: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hospital:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bank: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bank:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:convenience_store: &lt;code class=&quot;highlighter-rouge&quot;&gt;:convenience_store:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:love_hotel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:love_hotel:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:hotel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hotel:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wedding: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wedding:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:church: &lt;code class=&quot;highlighter-rouge&quot;&gt;:church:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:department_store: &lt;code class=&quot;highlighter-rouge&quot;&gt;:department_store:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:european_post_office: &lt;code class=&quot;highlighter-rouge&quot;&gt;:european_post_office:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:city_sunrise: &lt;code class=&quot;highlighter-rouge&quot;&gt;:city_sunrise:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:city_sunset: &lt;code class=&quot;highlighter-rouge&quot;&gt;:city_sunset:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:japanese_castle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:japanese_castle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:european_castle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:european_castle:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:tent: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tent:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:factory: &lt;code class=&quot;highlighter-rouge&quot;&gt;:factory:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tokyo_tower: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tokyo_tower:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:japan: &lt;code class=&quot;highlighter-rouge&quot;&gt;:japan:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mount_fuji: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mount_fuji:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sunrise_over_mountains: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sunrise_over_mountains:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sunrise: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sunrise:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:stars: &lt;code class=&quot;highlighter-rouge&quot;&gt;:stars:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:statue_of_liberty: &lt;code class=&quot;highlighter-rouge&quot;&gt;:statue_of_liberty:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bridge_at_night: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bridge_at_night:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:carousel_horse: &lt;code class=&quot;highlighter-rouge&quot;&gt;:carousel_horse:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rainbow: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rainbow:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ferris_wheel: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ferris_wheel:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fountain: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fountain:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:roller_coaster: &lt;code class=&quot;highlighter-rouge&quot;&gt;:roller_coaster:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ship: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ship:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:speedboat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:speedboat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:boat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:boat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sailboat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sailboat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rowboat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rowboat:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:anchor: &lt;code class=&quot;highlighter-rouge&quot;&gt;:anchor:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:rocket: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rocket:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:airplane: &lt;code class=&quot;highlighter-rouge&quot;&gt;:airplane:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:helicopter: &lt;code class=&quot;highlighter-rouge&quot;&gt;:helicopter:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:steam_locomotive: &lt;code class=&quot;highlighter-rouge&quot;&gt;:steam_locomotive:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tram: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tram:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mountain_railway: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mountain_railway:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bike: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bike:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:aerial_tramway: &lt;code class=&quot;highlighter-rouge&quot;&gt;:aerial_tramway:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:suspension_railway: &lt;code class=&quot;highlighter-rouge&quot;&gt;:suspension_railway:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:mountain_cableway: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mountain_cableway:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tractor: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tractor:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:blue_car: &lt;code class=&quot;highlighter-rouge&quot;&gt;:blue_car:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:oncoming_automobile: &lt;code class=&quot;highlighter-rouge&quot;&gt;:oncoming_automobile:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:car: &lt;code class=&quot;highlighter-rouge&quot;&gt;:car:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:red_car: &lt;code class=&quot;highlighter-rouge&quot;&gt;:red_car:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:taxi: &lt;code class=&quot;highlighter-rouge&quot;&gt;:taxi:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:oncoming_taxi: &lt;code class=&quot;highlighter-rouge&quot;&gt;:oncoming_taxi:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:articulated_lorry: &lt;code class=&quot;highlighter-rouge&quot;&gt;:articulated_lorry:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bus:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:oncoming_bus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:oncoming_bus:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:rotating_light: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rotating_light:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:police_car: &lt;code class=&quot;highlighter-rouge&quot;&gt;:police_car:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:oncoming_police_car: &lt;code class=&quot;highlighter-rouge&quot;&gt;:oncoming_police_car:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fire_engine: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fire_engine:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ambulance: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ambulance:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:minibus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:minibus:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:truck: &lt;code class=&quot;highlighter-rouge&quot;&gt;:truck:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:train: &lt;code class=&quot;highlighter-rouge&quot;&gt;:train:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:station: &lt;code class=&quot;highlighter-rouge&quot;&gt;:station:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:train2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:train2:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:bullettrain_front: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bullettrain_front:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bullettrain_side: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bullettrain_side:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:light_rail: &lt;code class=&quot;highlighter-rouge&quot;&gt;:light_rail:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:monorail: &lt;code class=&quot;highlighter-rouge&quot;&gt;:monorail:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:railway_car: &lt;code class=&quot;highlighter-rouge&quot;&gt;:railway_car:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:trolleybus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:trolleybus:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ticket: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ticket:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fuelpump: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fuelpump:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:vertical_traffic_light: &lt;code class=&quot;highlighter-rouge&quot;&gt;:vertical_traffic_light:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:traffic_light: &lt;code class=&quot;highlighter-rouge&quot;&gt;:traffic_light:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:warning: &lt;code class=&quot;highlighter-rouge&quot;&gt;:warning:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:construction: &lt;code class=&quot;highlighter-rouge&quot;&gt;:construction:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:beginner: &lt;code class=&quot;highlighter-rouge&quot;&gt;:beginner:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:atm: &lt;code class=&quot;highlighter-rouge&quot;&gt;:atm:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:slot_machine: &lt;code class=&quot;highlighter-rouge&quot;&gt;:slot_machine:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:busstop: &lt;code class=&quot;highlighter-rouge&quot;&gt;:busstop:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:barber: &lt;code class=&quot;highlighter-rouge&quot;&gt;:barber:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:hotsprings: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hotsprings:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:checkered_flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;:checkered_flag:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:crossed_flags: &lt;code class=&quot;highlighter-rouge&quot;&gt;:crossed_flags:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:izakaya_lantern: &lt;code class=&quot;highlighter-rouge&quot;&gt;:izakaya_lantern:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:moyai: &lt;code class=&quot;highlighter-rouge&quot;&gt;:moyai:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:circus_tent: &lt;code class=&quot;highlighter-rouge&quot;&gt;:circus_tent:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:performing_arts: &lt;code class=&quot;highlighter-rouge&quot;&gt;:performing_arts:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:round_pushpin: &lt;code class=&quot;highlighter-rouge&quot;&gt;:round_pushpin:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:triangular_flag_on_post: &lt;code class=&quot;highlighter-rouge&quot;&gt;:triangular_flag_on_post:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:jp: &lt;code class=&quot;highlighter-rouge&quot;&gt;:jp:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:kr: &lt;code class=&quot;highlighter-rouge&quot;&gt;:kr:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cn: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cn:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:us: &lt;code class=&quot;highlighter-rouge&quot;&gt;:us:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:fr: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fr:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:es: &lt;code class=&quot;highlighter-rouge&quot;&gt;:es:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:it: &lt;code class=&quot;highlighter-rouge&quot;&gt;:it:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ru: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ru:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:gb: &lt;code class=&quot;highlighter-rouge&quot;&gt;:gb:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:uk: &lt;code class=&quot;highlighter-rouge&quot;&gt;:uk:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:de: &lt;code class=&quot;highlighter-rouge&quot;&gt;:de:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Symbols&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;:one: &lt;code class=&quot;highlighter-rouge&quot;&gt;:one:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:two: &lt;code class=&quot;highlighter-rouge&quot;&gt;:two:&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;:three: &lt;code class=&quot;highlighter-rouge&quot;&gt;:three:&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:four: &lt;code class=&quot;highlighter-rouge&quot;&gt;:four:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:five: &lt;code class=&quot;highlighter-rouge&quot;&gt;:five:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:six: &lt;code class=&quot;highlighter-rouge&quot;&gt;:six:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:seven: &lt;code class=&quot;highlighter-rouge&quot;&gt;:seven:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:eight: &lt;code class=&quot;highlighter-rouge&quot;&gt;:eight:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:nine: &lt;code class=&quot;highlighter-rouge&quot;&gt;:nine:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:keycap_ten: &lt;code class=&quot;highlighter-rouge&quot;&gt;:keycap_ten:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:1234: &lt;code class=&quot;highlighter-rouge&quot;&gt;:1234:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:zero: &lt;code class=&quot;highlighter-rouge&quot;&gt;:zero:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:hash: &lt;code class=&quot;highlighter-rouge&quot;&gt;:hash:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:symbols: &lt;code class=&quot;highlighter-rouge&quot;&gt;:symbols:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_backward: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_backward:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:arrow_down: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_down:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_forward: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_forward:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_left: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_left:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:capital_abcd: &lt;code class=&quot;highlighter-rouge&quot;&gt;:capital_abcd:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:abcd: &lt;code class=&quot;highlighter-rouge&quot;&gt;:abcd:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:abc: &lt;code class=&quot;highlighter-rouge&quot;&gt;:abc:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:arrow_lower_left: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_lower_left:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_lower_right: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_lower_right:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_right: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_right:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:arrow_up: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_up:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_upper_left: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_upper_left:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_upper_right: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_upper_right:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:arrow_double_down: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_double_down:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_double_up: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_double_up:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_down_small: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_down_small:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:arrow_heading_down: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_heading_down:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_heading_up: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_heading_up:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:leftwards_arrow_with_hook: &lt;code class=&quot;highlighter-rouge&quot;&gt;:leftwards_arrow_with_hook:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:arrow_right_hook: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_right_hook:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:left_right_arrow: &lt;code class=&quot;highlighter-rouge&quot;&gt;:left_right_arrow:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrow_up_down: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_up_down:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:arrow_up_small: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrow_up_small:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrows_clockwise: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrows_clockwise:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:arrows_counterclockwise: &lt;code class=&quot;highlighter-rouge&quot;&gt;:arrows_counterclockwise:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:rewind: &lt;code class=&quot;highlighter-rouge&quot;&gt;:rewind:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:fast_forward: &lt;code class=&quot;highlighter-rouge&quot;&gt;:fast_forward:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:information_source: &lt;code class=&quot;highlighter-rouge&quot;&gt;:information_source:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ok: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ok:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:twisted_rightwards_arrows: &lt;code class=&quot;highlighter-rouge&quot;&gt;:twisted_rightwards_arrows:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:repeat: &lt;code class=&quot;highlighter-rouge&quot;&gt;:repeat:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:repeat_one: &lt;code class=&quot;highlighter-rouge&quot;&gt;:repeat_one:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:new: &lt;code class=&quot;highlighter-rouge&quot;&gt;:new:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:top: &lt;code class=&quot;highlighter-rouge&quot;&gt;:top:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:up: &lt;code class=&quot;highlighter-rouge&quot;&gt;:up:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cool: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cool:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:free: &lt;code class=&quot;highlighter-rouge&quot;&gt;:free:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ng: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ng:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cinema: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cinema:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:koko: &lt;code class=&quot;highlighter-rouge&quot;&gt;:koko:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:signal_strength: &lt;code class=&quot;highlighter-rouge&quot;&gt;:signal_strength:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u5272: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u5272:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u5408: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u5408:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:u55b6: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u55b6:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u6307: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u6307:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u6708: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u6708:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:u6709: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u6709:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u6e80: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u6e80:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u7121: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u7121:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:u7533: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u7533:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u7a7a: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u7a7a:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:u7981: &lt;code class=&quot;highlighter-rouge&quot;&gt;:u7981:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:sa: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sa:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:restroom: &lt;code class=&quot;highlighter-rouge&quot;&gt;:restroom:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mens: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mens:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:womens: &lt;code class=&quot;highlighter-rouge&quot;&gt;:womens:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:baby_symbol: &lt;code class=&quot;highlighter-rouge&quot;&gt;:baby_symbol:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:no_smoking: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_smoking:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:parking: &lt;code class=&quot;highlighter-rouge&quot;&gt;:parking:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wheelchair: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wheelchair:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:metro: &lt;code class=&quot;highlighter-rouge&quot;&gt;:metro:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:baggage_claim: &lt;code class=&quot;highlighter-rouge&quot;&gt;:baggage_claim:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:accept: &lt;code class=&quot;highlighter-rouge&quot;&gt;:accept:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wc: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wc:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:potable_water: &lt;code class=&quot;highlighter-rouge&quot;&gt;:potable_water:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:put_litter_in_its_place: &lt;code class=&quot;highlighter-rouge&quot;&gt;:put_litter_in_its_place:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:secret: &lt;code class=&quot;highlighter-rouge&quot;&gt;:secret:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:congratulations: &lt;code class=&quot;highlighter-rouge&quot;&gt;:congratulations:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:m: &lt;code class=&quot;highlighter-rouge&quot;&gt;:m:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:passport_control: &lt;code class=&quot;highlighter-rouge&quot;&gt;:passport_control:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:left_luggage: &lt;code class=&quot;highlighter-rouge&quot;&gt;:left_luggage:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:customs: &lt;code class=&quot;highlighter-rouge&quot;&gt;:customs:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ideograph_advantage: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ideograph_advantage:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:cl: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cl:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sos: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sos:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:id: &lt;code class=&quot;highlighter-rouge&quot;&gt;:id:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:no_entry_sign: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_entry_sign:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:underage: &lt;code class=&quot;highlighter-rouge&quot;&gt;:underage:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:no_mobile_phones: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_mobile_phones:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:do_not_litter: &lt;code class=&quot;highlighter-rouge&quot;&gt;:do_not_litter:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:non-potable_water: &lt;code class=&quot;highlighter-rouge&quot;&gt;:non-potable_water:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:no_bicycles: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_bicycles:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:no_pedestrians: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_pedestrians:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:children_crossing: &lt;code class=&quot;highlighter-rouge&quot;&gt;:children_crossing:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:no_entry: &lt;code class=&quot;highlighter-rouge&quot;&gt;:no_entry:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:eight_spoked_asterisk: &lt;code class=&quot;highlighter-rouge&quot;&gt;:eight_spoked_asterisk:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:eight_pointed_black_star: &lt;code class=&quot;highlighter-rouge&quot;&gt;:eight_pointed_black_star:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heart_decoration: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heart_decoration:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:vs: &lt;code class=&quot;highlighter-rouge&quot;&gt;:vs:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:vibration_mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;:vibration_mode:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:mobile_phone_off: &lt;code class=&quot;highlighter-rouge&quot;&gt;:mobile_phone_off:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:chart: &lt;code class=&quot;highlighter-rouge&quot;&gt;:chart:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:currency_exchange: &lt;code class=&quot;highlighter-rouge&quot;&gt;:currency_exchange:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:aries: &lt;code class=&quot;highlighter-rouge&quot;&gt;:aries:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:taurus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:taurus:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:gemini: &lt;code class=&quot;highlighter-rouge&quot;&gt;:gemini:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:cancer: &lt;code class=&quot;highlighter-rouge&quot;&gt;:cancer:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:leo: &lt;code class=&quot;highlighter-rouge&quot;&gt;:leo:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:virgo: &lt;code class=&quot;highlighter-rouge&quot;&gt;:virgo:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:libra: &lt;code class=&quot;highlighter-rouge&quot;&gt;:libra:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:scorpius: &lt;code class=&quot;highlighter-rouge&quot;&gt;:scorpius:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:sagittarius: &lt;code class=&quot;highlighter-rouge&quot;&gt;:sagittarius:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:capricorn: &lt;code class=&quot;highlighter-rouge&quot;&gt;:capricorn:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:aquarius: &lt;code class=&quot;highlighter-rouge&quot;&gt;:aquarius:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:pisces: &lt;code class=&quot;highlighter-rouge&quot;&gt;:pisces:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ophiuchus: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ophiuchus:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:six_pointed_star: &lt;code class=&quot;highlighter-rouge&quot;&gt;:six_pointed_star:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:negative_squared_cross_mark: &lt;code class=&quot;highlighter-rouge&quot;&gt;:negative_squared_cross_mark:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:a: &lt;code class=&quot;highlighter-rouge&quot;&gt;:a:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:b: &lt;code class=&quot;highlighter-rouge&quot;&gt;:b:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:ab: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ab:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:o2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:o2:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:diamond_shape_with_a_dot_inside: &lt;code class=&quot;highlighter-rouge&quot;&gt;:diamond_shape_with_a_dot_inside:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:recycle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:recycle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:end: &lt;code class=&quot;highlighter-rouge&quot;&gt;:end:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:on: &lt;code class=&quot;highlighter-rouge&quot;&gt;:on:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:soon: &lt;code class=&quot;highlighter-rouge&quot;&gt;:soon:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock1: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock1:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock130: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock130:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock10: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock10:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock1030: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock1030:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock11: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock11:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock1130: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock1130:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock12: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock12:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock1230: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock1230:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock2: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock2:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock230: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock230:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock3: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock3:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock330: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock330:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock4: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock4:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock430: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock430:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock5: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock5:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock530: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock530:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock6: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock6:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock630: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock630:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock7: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock7:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock730: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock730:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock8: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock8:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock830: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock830:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:clock9: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock9:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:clock930: &lt;code class=&quot;highlighter-rouge&quot;&gt;:clock930:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heavy_dollar_sign: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heavy_dollar_sign:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:copyright: &lt;code class=&quot;highlighter-rouge&quot;&gt;:copyright:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:registered: &lt;code class=&quot;highlighter-rouge&quot;&gt;:registered:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:tm: &lt;code class=&quot;highlighter-rouge&quot;&gt;:tm:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:x: &lt;code class=&quot;highlighter-rouge&quot;&gt;:x:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heavy_exclamation_mark: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heavy_exclamation_mark:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:bangbang: &lt;code class=&quot;highlighter-rouge&quot;&gt;:bangbang:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:interrobang: &lt;code class=&quot;highlighter-rouge&quot;&gt;:interrobang:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:o: &lt;code class=&quot;highlighter-rouge&quot;&gt;:o:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heavy_multiplication_x: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heavy_multiplication_x:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:heavy_plus_sign: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heavy_plus_sign:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heavy_minus_sign: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heavy_minus_sign:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heavy_division_sign: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heavy_division_sign:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:white_flower: &lt;code class=&quot;highlighter-rouge&quot;&gt;:white_flower:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:100: &lt;code class=&quot;highlighter-rouge&quot;&gt;:100:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:heavy_check_mark: &lt;code class=&quot;highlighter-rouge&quot;&gt;:heavy_check_mark:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ballot_box_with_check: &lt;code class=&quot;highlighter-rouge&quot;&gt;:ballot_box_with_check:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:radio_button: &lt;code class=&quot;highlighter-rouge&quot;&gt;:radio_button:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:link: &lt;code class=&quot;highlighter-rouge&quot;&gt;:link:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:curly_loop: &lt;code class=&quot;highlighter-rouge&quot;&gt;:curly_loop:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:wavy_dash: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wavy_dash:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:part_alternation_mark: &lt;code class=&quot;highlighter-rouge&quot;&gt;:part_alternation_mark:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:trident: &lt;code class=&quot;highlighter-rouge&quot;&gt;:trident:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:black_square: &lt;code class=&quot;highlighter-rouge&quot;&gt;:black_square:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:white_square: &lt;code class=&quot;highlighter-rouge&quot;&gt;:white_square:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:white_check_mark: &lt;code class=&quot;highlighter-rouge&quot;&gt;:white_check_mark:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:black_square_button: &lt;code class=&quot;highlighter-rouge&quot;&gt;:black_square_button:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:white_square_button: &lt;code class=&quot;highlighter-rouge&quot;&gt;:white_square_button:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:black_circle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:black_circle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:white_circle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:white_circle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:red_circle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:red_circle:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:large_blue_circle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:large_blue_circle:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:large_blue_diamond: &lt;code class=&quot;highlighter-rouge&quot;&gt;:large_blue_diamond:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:large_orange_diamond: &lt;code class=&quot;highlighter-rouge&quot;&gt;:large_orange_diamond:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:small_blue_diamond: &lt;code class=&quot;highlighter-rouge&quot;&gt;:small_blue_diamond:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:small_orange_diamond: &lt;code class=&quot;highlighter-rouge&quot;&gt;:small_orange_diamond:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:small_red_triangle: &lt;code class=&quot;highlighter-rouge&quot;&gt;:small_red_triangle:&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:small_red_triangle_down: &lt;code class=&quot;highlighter-rouge&quot;&gt;:small_red_triangle_down:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;:shipit: &lt;code class=&quot;highlighter-rouge&quot;&gt;:shipit:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>프레임워크(Framework) vs 라이브러리(Library)</title>
   <link href="http://localhost:4000/posts/googling/etc/Framework-vs-Library/"/>
   <updated>2020-03-16T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/etc/Framework vs Library</id>
   <content type="html">&lt;h3 id=&quot;프레임워크framework-vs-라이브러리library-firefirefire&quot;&gt;프레임워크(Framework) vs 라이브러리(Library) :fire::fire::fire:&lt;/h3&gt;

&lt;p&gt;예전에 면접 질문들을 정리하다가 Framework와 Library의 차이에 대해 생각해보게 됐습니다.&lt;/p&gt;

&lt;p&gt;여기저기 글을 찾아 헤메던 와중 가장 알기 쉽고 간단하게 정리된 문장을 발견했습니다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;**라이브러리와 프레임워크의 차이는 제어 흐름에 대한 주도성이 누구에게/어디에 있는가이다.**&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;블로그 이곳 저곳에 흩어져 있던 말이라 어떤 분이 처음 하신 말인지 출처를 찾아 봤더니… &lt;strong&gt;『거꾸로 배우는 소프트웨어 개발 - 이호종』&lt;/strong&gt; 이라는 책이 출처인것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프레임워크&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프레임워크는 프로그램이 흐르는 틀을 제공해줍니다. 개발자의 역할은 프레임워크님이 잘 굴러갈 수 있게 채워줘야 할 부분을 채워주는 것입니다.&lt;/strong&gt; 프로그램 흐름에 대한 제어권은 프레임워크님에게 있습니다.&lt;/p&gt;

&lt;p&gt;스프링 프레임워크를 사용하는데 왜 ‘Dispatcher Servlet’이 ‘Handler Mapping’을 찾아가고 ‘Handler Adapter’를 찾아가고 ‘View Resolver’를 찾아가는지 이유를 알 필요는 있지만 애써 건드릴 필요는 없습니다. 전체적인 흐름은 프레임워크님에게 맡겨 줍시다. :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;라이브러리&lt;/strong&gt; :hammer:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;라이브러리는 반면 프로그램을 다루는데 필요한 도구들을 제공해줍니다. 프로그램이 전체적으로 어떻게 돌아갈지 결정하는건 개발자 본인입니다.&lt;/strong&gt; 스프링 프레임워크가 없어도 개발자가 원하는대로 진행되는 웹 서비스를 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;Java에서 제공하는 소켓 API는(라이브러리가 아니라 api긴 하지만…) TCP 통신을 할때 유용한 도구 입니다. 이 소켓 API를 잘 휘두루면 본인이 원하는 대로 흘러가는 웹 서비스를 만들 수 있습니다. 주도권은 온전히 개발자에게 있습니다.(책임도.. :weary:)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>웹 서버</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C5/"/>
   <updated>2020-03-15T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드5</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;51-다채로운-웹-서버&quot;&gt;5.1. 다채로운 웹 서버&lt;/h3&gt;

&lt;p&gt;이번 장에선 웹 서버에 관해 간단하게 알아볼 것입니다.&lt;/p&gt;

&lt;p&gt;웹 서버는 기능, 형태, 크기가 정말 다양합니다. 열 줄 짜리 스크립트가 될 수도 있고 50mb짜리 상용 엔진도 있으며, 전자기기 작은 기판에 설치된 서버도 있습니다. 이런 다양한 웹 서버들이 있지만 공통적으로 클라이언트의 HTTP 요청을 받고 처리해 리소스를 돌려주는 일을 합니다.&lt;/p&gt;

&lt;h4 id=&quot;511-웹-서버-구현&quot;&gt;5.1.1. 웹 서버 구현&lt;/h4&gt;

&lt;p&gt;웹 서버는 HTTP 프로토콜을 구현해 클라이언트와 통신하며, 웹 리소스를 관리하고 서버 스스로를 관리합니다. 운영체제와 함께 TCP 커넥션 관리에 참여하기도 합니다.&lt;/p&gt;

&lt;p&gt;운영체제는 웹 서버가 올라가있는 하드웨어를 관리하고, TCP/IP 네트워크를 지원해주며, 웹 리소스를 관리하기 위한 파일 시스템, 연산활동을 위한 프로세스 관리를 제공합니다.&lt;/p&gt;

&lt;h4 id=&quot;512-다목적-소프트웨어-웹-서버&quot;&gt;5.1.2. 다목적 소프트웨어 웹 서버&lt;/h4&gt;

&lt;p&gt;세상엔 수 만개의 웹 서버들이 존재합니다. 하지만 그중 주로 사용되는건 몇 가지에 꼽힙니다. 아래 netcraft에서 조사한 웹 서버 시장 점유율을 보시죠.&lt;/p&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;p&gt;출처 : &lt;a href=&quot;https://news.netcraft.com/archives/2019/09/27/september-2019-web-server-survey.html&quot;&gt;https://news.netcraft.com/archives/2019/09/27/september-2019-web-server-survey.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2019년 8월 까지의 데이터가 담겼는데 아파치 웹 서버의 장기집권이 끝나고 웹 서버의 춘추전국시대가 벌어지는 중인것 같습니다. 하지만 수 만개의 웹 서버중 nginx(32.7%), Apache(29.0%), Microsoft(14.7%)가 전체중 75%가량 차지합니다.&lt;/p&gt;

&lt;h4 id=&quot;513-임베디드-웹-서버&quot;&gt;5.1.3. 임베디드 웹 서버&lt;/h4&gt;

&lt;p&gt;임베디드 웹 서버는 전자기기에 내장될 목적으로 만들어진 작원 웹 서버입니다. 공유기를 구입하고 비밀번호 등을 설정하기 위해 공유기 관리자 페이지에 들어가게 되는데 이때 들어가는 웹 페이지는 공유기의 임베디드 웹 서버에서 운영중인 페이지입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;52-간단한-펄-웹-서버&quot;&gt;5.2. 간단한 펄 웹 서버&lt;/h3&gt;

&lt;p&gt;가장 많이 알려진 아파치 웹 서버의 코어는 50,000줄이 넘는 코드로 이루어져 있습니다. HTTP/1.1의 기능들을 모두 지원하려면 방대한 양의 코드들이 들어갈 수 밖에 없습니다. 하지만 정말 최소한의 기능만 갖는 웹 서버는 30줄로도 가능합니다. 아래 코드가 Perl 언어로 작성한 30줄 짜리 웹 서버 코드입니다.&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Carp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FileHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# (1) 명령줄에서 덮어쓰지 않는 이상 8080 포트를 기본으로 사용한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@ARGV&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;# (2) 로컬 TCP소켓을 생성하고 커넥션을 기다리도록(listen) 설정한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getprotobyname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;('&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;');&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sockaddr_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SOMAXCONN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# (3) 시작 메세지를 출력한다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;lt;&amp;lt;&amp;lt;Type-O-Serve Accepting on Port %d&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# (4) 커넥션 C를 기다린다.&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$cport_caddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$caddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sockaddr_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cport_caddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;autoflush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;# (5) 누구로부터의 커넥션인지 출력한다.&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$cname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gethostbyaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$caddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;lt;&amp;lt;&amp;lt;Request From '%s'&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;# (6) 빈 줄이 나올 때까지 요청 메세지를 읽어서 화면에 출력한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;screen&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^\r/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;# (7) 응답 메세지를 위한 프롬프트를 만들고, 응답줄을 입력 받는다.&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# &quot;.&quot; 하나만으로 되어 있는 줄이 입력되기 전까지, 입력된 줄을 클라이언트에게 보낸다.&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;lt;&amp;lt;&amp;lt;Type Response Followed by '.'&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;);&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;STDIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/\r//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/\n//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^\./&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&quot;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 펄 서버는 ‘type-o-serve’라고 이름 붙인 펄 프로그램 입니다. HTTP 요청이 오면 콘솔창에 받은 요청이 출력되고, 콘솔에 타이핑한 텍스트가 HTTP 응답으로 전송되는 간단한 서버입니다. 코드가 간단하고 책에서 단계별로 주석도 잘 적어주셨기 때문에 쉽게 이해할 수 있을 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;53-진짜-웹-서버가-하는-일&quot;&gt;5.3. 진짜 웹 서버가 하는 일&lt;/h3&gt;

&lt;p&gt;상용 웹 서버는 위의 펄 서버와 비교할 수 없을 만큼 다양한 일을 합니다. 하지만 모든 웹 서버가 하는 일은 아래와 같은 과정을 따른다고 할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;커넥션을 맺는다 : 클라이언트의 접속을 받아들이거나, 원치 않는 클라이언트라면 닫는다.&lt;/li&gt;
  &lt;li&gt;요청을 받는다 : HTTP 요청 메세지를 네트워크로부터 읽어 들인다.&lt;/li&gt;
  &lt;li&gt;요청을 처리한다 : 요청 메세지를 해석하고 행동을 취한다.&lt;/li&gt;
  &lt;li&gt;리소스에 접근한다 : 메세지에서 지정한 리소스에 접근한다.&lt;/li&gt;
  &lt;li&gt;응답을 만든다 : 올바른 헤더를 포함한 HTTP 응답 메세지를 생성한다.&lt;/li&gt;
  &lt;li&gt;응답을 보낸다 : 응답을 클라이언트에게 돌려준다.&lt;/li&gt;
  &lt;li&gt;트랜잭션을 로그로 남긴다 : 로그 파일에 트랜잭션 완료에 대한 기록을 남긴다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;뒤로는 각 단계들에 대해 살펴보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;54-단계1--클라이언트-커넥션-수락&quot;&gt;5.4. 단계1 : 클라이언트 커넥션 수락&lt;/h3&gt;

&lt;p&gt;한 클라이언트에 대해 이미 커넥션이 열려있다면 그 커넥션을 계속 사용할 수 있지만, 새로운 클라이언트가 연결을 요청한다면 새 커넥션을 열 필요가 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;541-새-커넥션-다루기&quot;&gt;5.4.1. 새 커넥션 다루기&lt;/h4&gt;

&lt;p&gt;클라이언트가 TCP 커넥션 요청을 보내오면 서버는 커넥션을 수락하고 커넥션에서 IP를 추출해 상대방이 어떤 클라이언트인지 확인합니다.(이런 TCP 커넥션들을 소켓이라고 부릅니다.) 새 커넥션이 생성되고 받아들여지면 서버는 새 커넥션을 커넥션 목록에 추가하고 데이터를 받을 준비를 합니다.&lt;/p&gt;

&lt;p&gt;웹 서버는 어떤 커넥션이든 마음대로 거절하거나 닫을 수 있습니다. 금지할 IP 주소나 호스트명을 미리 정해두면 여기서 오는 모든 커넥션을 거절할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;542-클라이언트-호스트-명-식별&quot;&gt;5.4.2. 클라이언트 호스트 명 식별&lt;/h4&gt;

&lt;p&gt;서버가 특정 호스트명의 접근을 막거나 로그를 남길때 어디서 온 로그인지 보기쉽게 남겨야할 필요가 있습니다. 이때 서버는 reverse DNS 를 이용해 클라이언트의 IP를 호스트명으로 변환할 수 있습니다. 이 작업을 Hostname Lookup 이라고 합니다.&lt;/p&gt;

&lt;p&gt;하지만 이 작업은 시간이 꽤 걸리는 작업이라 트랜잭션을 지연시킬 수 있습니다. 따라서 이 작업은 서버에 따라 꺼두기도 하고 특정 리소스에 대해서만 켜기도 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Apache&quot;&gt;HostnameLookups off
&amp;lt;File ~ &quot;\.(html|htm|cgi)$&quot;&amp;gt;
	HostnameLookups on
&amp;lt;/File&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드는 아파치에서 html, htm, cgi 리소스들만 Hostname Lookup을 실시하고 나머지는 하지 않는다는 설정 코드입니다.&lt;/p&gt;

&lt;h4 id=&quot;543-ident를-통해-클라이언트-사용자-알아내기&quot;&gt;5.4.3. ident를 통해 클라이언트 사용자 알아내기&lt;/h4&gt;

&lt;p&gt;클라이언트를 식별하는 방법엔 ident 프로토콜을 사용하는 방법도 있습니다. 간단히 설명하자면 클라이언트 식별을 위한 전용 커넥션을 생성하고 요청, 응답해 클라이언트를 식별하는 방법입니다. 과정은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 HTTP 커넥션을 요청합니다.&lt;/li&gt;
  &lt;li&gt;서버는 클라이언트의 커넥션 요청을 받아들입니다.&lt;/li&gt;
  &lt;li&gt;서버는 클라이언트의 ident 서버 포트(113번으로 정해져있으며 처음 클라이언트가 요청할때 사용한 포트와 다른 포트입니다.)로 커넥션을 요청합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 커넥션을 받아들이면 서버가 사용자를 식별할 요청을 보냅니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사내 망에선 종종 사용되지만 공공 인터넷에선 다음과 같은 이유로 사용이 되지 않습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 ident 프로토콜을 지원해야 합니다.&lt;/li&gt;
  &lt;li&gt;HTTP 트랜잭션을 지연시킵니다.&lt;/li&gt;
  &lt;li&gt;방화벽에서 서버의 ident 커넥션 요청이 막힐 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;ident 프로토콜은 가상 IP 주소를 잘 지원하지 않습니다.&lt;/li&gt;
  &lt;li&gt;프라이버시 침해의 우려도 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;55-단계2--요청-메세지-수신&quot;&gt;5.5. 단계2 : 요청 메세지 수신&lt;/h3&gt;

&lt;p&gt;커넥션을 맺은 뒤에 서버는 데이터가 오길 기다립니다. 커넥션에 데이터가 들어오면 앞 장에서 살펴본 HTTP 메세지의 구성을 고려해 데이터를 HTTP 메세지로 파싱합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;요청 메서드, URI, 버전번호를 파싱합니다. 각 값은 공백으로 분리되어 있고 요청줄의 끝은 CRLF로 끝납니다.&lt;/li&gt;
  &lt;li&gt;헤더들을 파싱합니다. 각 헤더는 CRLF로 끝납니다.&lt;/li&gt;
  &lt;li&gt;헤더의 끝을 의미하는 CRLF 끝나는 빈줄을 찾아 헤더 파싱을 끝냅니다.&lt;/li&gt;
  &lt;li&gt;이후 엔터티 본문이 있다면 읽어 들입니다.(이때, 헤더에 Content-Length가 있다면 그만큼 읽어냅니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IP패킷들은 순서와 상관없이 불규칙하게 전달됩니다. 따라서 웹 서버는 파싱 가능할때까지 IP패킷의 데이터들을 메모리에 임시 저장해 놓을 수 있어야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;551-메세지의-내부-표현&quot;&gt;5.5.1. 메세지의 내부 표현&lt;/h4&gt;

&lt;p&gt;웹 서버에 따라 요청 메세지를 다루기 쉽게 따로 자료 구조를 만들어 저장합니다.&lt;/p&gt;

&lt;h4 id=&quot;552-커넥션-입력출력-처리-아키텍처&quot;&gt;5.5.2. 커넥션 입력/출력 처리 아키텍처&lt;/h4&gt;

&lt;p&gt;포털 사이트 같이 사용자가 많은 웹 서버들은 그 많은 사용자와 하나 이상의 커넥션을 맺고 있습니다. 어떤 사용자는 10초에 한 번씩 요청을 보내고 어떤 사용자는 1초에 한 번씩 보냅니다. 그리고 어떤 사용자는 웹 크롤러를 사용해 1초에 10번씩 요청을 보냅니다.&lt;/p&gt;

&lt;p&gt;이렇게 많은 사용자들의 커넥션들을 효율적으로 처리하기 위해 커넥션 입/출력 처리 기술도 발전해 왔습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단일 스레드 웹 서버&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;처음은 단일 스레드 웹 서버였을 것입니다. 한 번에 하나의 커넥션만 처리하는 단일 스레드 웹 서버는 당연히 성능이 형편 없어 테스트 및 교육용이나 임베디드 서버 같은 극히 일부의 서버에서만 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티프로세스와 멀티스레드 웹 서버&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;여러 요청을 동시에 처리하기 위해 멀티프로세스/스레드 서버가 사용됩니다. 프로세스/스레드는 필요할때마다 생성할 수도 있고 미리 만들어 놓고 기다릴 수도 있습니다.&lt;/p&gt;

&lt;p&gt;각각 커넥션 마다 프로세스/스레드를 할당 할 수 있지만 이렇게 된다면 너무 많은 메모리를 낭비하게 될 것입니다. 멀티프로세스/스레드를 사용하는 웹 서버들은 프로세스/스레드 수에 제한을 걸어 놓습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다중 I/O 서버&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;방금 설명한 멀티프로세스/스레드 서버는 단일 스레드보단 좋지만 한계가 있습니다. 하나의 커넥션이 생성되었지만 실제로 그 커넥션에 들어오는 요청이 없더라도 프로세스/스레드는 그 커넥션을 보면서 데이터가 오길 기다려야하기 때문입니다. 이를 해결하기 위한 방법이 입출력 다중화(multiplexing)입니다.&lt;/p&gt;

&lt;p&gt;하나의 커넥션은 ‘입력 -&amp;gt; 처리 -&amp;gt; 출력’ 으로 동작한다고 볼 수 있습니다. 그런데 처리중엔 입력, 출력에서 쓰이는 함수가 봉쇄(block) 됩니다. #@$#@$@#$ 추가 설명 필요&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다중 멀티스레드 웹 서버&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;56-단계3--요청-처리&quot;&gt;5.6. 단계3 : 요청 처리&lt;/h3&gt;

&lt;p&gt;요청을 처리하는 과정은 뒷 장들에서 나올 주제중 대부분이기 때문에 이번 장에선 생략하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;57-단계4--리소스의-매핑과-접근&quot;&gt;5.7. 단계4 : 리소스의 매핑과 접근&lt;/h3&gt;

&lt;p&gt;웹 서버는 리소스를 주고 받게 해주는 서버입니다. 이 리소스에는 이미지 파일, html 페이지 같은 고정된 리소스도 있지만 php, jsp, asp와 같이 리소스 생성 어플리케이션을 통해 만들어지는 동적인 리소스도 있습니다.&lt;/p&gt;

&lt;p&gt;웹 서버가 리소스를 알맞게 제공하기 위해선 클라이언트의 요청 URI에서 그에 맞는 리소스나 리소스 생성기를 찾아야 합니다. 이런 과정을 리소스 맵핑이라고 합니다.&lt;/p&gt;

&lt;h4 id=&quot;571-docroot&quot;&gt;5.7.1. Docroot&lt;/h4&gt;

&lt;p&gt;리소스 맵핑의 가장 단순한 형태는 URI로 파일 자체를 가리키는 것입니다. 그런데 그 파일들은 어느 디렉토리에 위치해 있을까요?&lt;/p&gt;

&lt;p&gt;스프링 프레임워크를 사용해 보았다면 클라이언트는 ‘WebContent’ 폴더 안에 있는 것들만 접근 할 수 있다라는 얘기를 많이 들어보셨을 것입니다. 이렇게 일반적으로 웹 서버 파일 시스템의 특별한 폴더를 웹 리소스를 올려두기 위해 예약해둡니다. 이 폴더를 문서 루트, docroot 라고 부릅니다.&lt;/p&gt;

&lt;p&gt;웹 서버는 URI에서 호스트명 뒤의 리소스 경로를 가져와 docroot 뒤에 붙입니다. 아래와 같은 요청이 왔다고 하면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;요청 URI : http://www.joes-hardware.com/specials/saw-blade.gif
리소스 경로 : /specials/saw-blade.gif&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;웹 서버의 docroot에 따라 docroot/specials/saw-blade.gif 리소스를 찾아 갑니다.&lt;/p&gt;

&lt;p&gt;이 docroot는 사용하는 웹 서버에서 기본적으로 설정해 두기도 하고 따로 설정 파일을 통해 docroot를 지정할 수도 있습니다. 많이 사용하는 아파치 웹 서버의 경우 httpd.conf 파일에 아래와 같은 줄을 추가해 설정할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DocumentRoot /usr/local/httpd/files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;웹 서버는 상대 URL이 docroot를 벗어나 파일 시스템의 다른 부분을 가리킬 수 없게 조심해야 합니다. 예를들어 다음과 같이 docroot의 상위 디렉토리를 찾는 요청이 왔다고 해서 실제 docroot의 상위 디렉토리를 찾아가면 안됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://www.joes-hardware.com/../&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;가상 호스팅된 docroot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가상 호스팅은 하나의 물리적 웹 서버에 여러 도메인을 호스팅 하는 것입니다. 가상 호스팅 환경에선 호스팅된 각각의 서버마다 분리된 docroot를 설정해줍니다. 설정은 매우 간단합니다. 많이 사용되는 아파치의 경우 아래와 같이 설정 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost www.joes-hardware.com&amp;gt;
	ServerName www.joes-hardware.com
	DocumentRoot /docs/joe
	TransferLog /logs/joe.access_log
	ErrorLog /logs/joe.error_log
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost www.marys-antiques.com&amp;gt;
	ServerName www.marys-antiques.com
	DocumentRoot /docs/mary
	TransferLog /logs/mary.access_log
	ErrorLog /logs/mary.error_log
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;가상 호스팅에 대해선 18장에서 더 자세히 이어집니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;사용자 홈 디렉터리 docroots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;docroots를 활용하면 사용자들이 한 대의 웹 서버에서 각자 자신의 웹 사이트를 만들 수 있습니다. ‘/~’ 뒤에 이름이 오는 것으로 시작하는 URI들이 그 예입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;요청 메세지A : GET /~bob/index.html HTTP/1.0
-&amp;gt; 가리키는 리소스 : /home/bob/public_html&lt;/p&gt;

  &lt;p&gt;요청 메세지B : GET /~betty/index.html HTTP/1.0
-&amp;gt; 가리키는 리소스 : home/betty/public_html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;572-디렉터리-목록&quot;&gt;5.7.2. 디렉터리 목록&lt;/h4&gt;

&lt;p&gt;URL은 리소스 파일을 가리키는게 아니라 디렉터리 자체를 가리킬 수도 있습니다. 이를 디렉터리 URL 이라고 합니다. 대부분 웹 서버는 디렉터리 URL 요청을 받았을때 다음과 같은 행동을 취합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;에러를 반환&lt;/li&gt;
  &lt;li&gt;디렉터리 대신 특별한 ‘색인 파일’을 반환&lt;/li&gt;
  &lt;li&gt;디렉터리를 탐색한 뒤 그 내용을 담은 HTML 페이지를 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;대부분의 웹 서버는 디렉터리 URL을 받으면 해당 디렉터리 안의 ‘index.html’  혹은 ‘index.htm’ 파일을 찾습니다. 그리고 그 파일이 존재한다면 반환합니다.&lt;/p&gt;

&lt;p&gt;아파치 웹 서버에선 이렇게 디렉터리 URL이 왔을때 기본적으로 찾을 파일의 이름 집합을 설정할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DirectoryIndex index.html index.htm home.html home.htm index.cgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정하면 나열된 순서대로 파일을 찾아보고 나온다면 그 파일을 반환합니다.&lt;/p&gt;

&lt;p&gt;그런데 만약 기본 색인 파일을 찾을 수 없다면 어떻게 할까요? 많은 웹 서버는 요청받은 디렉터리 안의 파일들의 크기, 변경일, 파일에 대한 링크 등을 열거한 HTML 파일을 반환합니다. 하지만 이 방식은 클라이언트에게 숨겨야 할 파일도 노출할 수 있으니 조심해야 합니다.&lt;/p&gt;

&lt;p&gt;아파치 웹 서버에선 다음과 같은 설정으로 디렉터리 색인 파일 자동 생성을 끌 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Options -Indexes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;573-동적-콘텐츠-리소스-매핑&quot;&gt;5.7.3. 동적 콘텐츠 리소스 매핑&lt;/h4&gt;

&lt;p&gt;웹 서버는 URI를 동적 리소스에 맵핑할 수도 있습니다. 웹 서버중 웹 어플리케이션 서버(WAS, Web Application Server)라고 불리는 것들은 웹 서버와 백엔드 어플리케이션을 연결해줍니다.&lt;/p&gt;

&lt;p&gt;국내에서 많이 사용되는 기술 스택인 ‘아파치 - 톰캣 - 자바 서블릿’이 이런 동적 콘텐츠 맵핑의 하나라고 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;아파치에서 URI에 따라 프로그램의 경로를 맵핑 시킬 수 있습니다. 다음 아파치 설정을 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ScriptAlias /cgi-bin/ /usr/local/etc/httpd/cgi-programs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 설정은 URI 경로가 ‘/cgi-bin/’ 으로 시작한다면, ‘/usr/local/etc/httpd/cgi-programs/’ 에서 프로그램을 찾아 실행하라는 의미 입니다. 여기에 덧붙여&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AddHandler cgi-script .cgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 설정을 추가해 특정 확장자의 파일만 실행 되도록 설정할 수 있습니다. 위 설정은 ‘.cgi’ 로 끝나는 모든 웹 리소스는 실행되어야 함을 명시하는 것입니다.&lt;/p&gt;

&lt;p&gt;CGI는 서버사이드 어플리케이션을 실행하기 위한 간단한 인터페이스인데 웹의 초창기에 많이 사용되었습니다. CGI 자체는 Common Gateway Interface로 웹 서버와 웹 어플리케이션 서버간 데이터를 주고받는데 도움을 주는 인터페이스입니다. 이 CGI를 따라 작성된 프로그램을 CGI 프로그램이라고 합니다.&lt;/p&gt;

&lt;p&gt;오늘날엔 asp, jsp 같은 애플리케이션 서버가 cgi를 대체하고 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;574-서버사이드-인클루드server-side-includes-ssi&quot;&gt;5.7.4. 서버사이드 인클루드(Server-Side Includes, SSI)&lt;/h4&gt;

&lt;p&gt;서버사이드 인클루드는 서버가 생성하거나 가지고 있는 HTML 파일을 클라이언트에게 보내기 직전에 html 안에 있던 변수 값들을 치환하는 것을 말합니다.&lt;/p&gt;

&lt;p&gt;SSI를 가지고 있는 html파일은 대부분 ‘.shtml’ 이라는 확장자가 붙습니다.&lt;/p&gt;

&lt;p&gt;자바 스택을 이용해 웹 페이지를 만들어 보았다면 jsp 페이지에&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;% include file=&quot;/css/bootstrap.css&quot; %&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 &amp;lt;% ~~ %&amp;gt; 태그를 본적이 있을 것입니다. 이런 태그들이 클라이언트에게 보내지기 직전에 치환되는 변수들이며 이런 과정을 SSI라고 합니다.&lt;/p&gt;

&lt;p&gt;많은 웹 서버가 이 SSI를 지원합니다. 동적 컨텐츠를 만들 수 있는 쉬운 방법중 하나입니다.&lt;/p&gt;

&lt;h4 id=&quot;575-접근-제어&quot;&gt;5.7.5. 접근 제어&lt;/h4&gt;

&lt;p&gt;웹 서버는 각 리소스에 접근 제어를 설정할 수도 있습니다. 접근이 제어된 리소스에 요청이 올 경우 웹 서버는 클라이언트의 IP에 근거해 접근을 제어하던가, 리소스에 접근하기 위한 비밀번호를 물어보던가 등을 할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;58-단계5--응답-만들기&quot;&gt;5.8. 단계5 : 응답 만들기&lt;/h3&gt;

&lt;p&gt;요청을 받았다면 응답을 해야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;581-응답-엔터티&quot;&gt;5.8.1. 응답 엔터티&lt;/h4&gt;

&lt;p&gt;응답 메세지에 엔터티 본문이 있다면, 응답 메세지엔 다음과 같은 것들이 포함되어야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;응답 본문의 MIME 타입을 서술하는 Content-Type 헤더&lt;/li&gt;
  &lt;li&gt;응답 본문의 길이를 서술하는 Content-Length 헤더&lt;/li&gt;
  &lt;li&gt;실제 응답 본문&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;582-mime-타입-결정하기&quot;&gt;5.8.2. MIME 타입 결정하기&lt;/h4&gt;

&lt;p&gt;웹 서버는 응답 본문의 MIME 타입을 결정해야 하는 책임이 있습니다. MIME 타입을 결정하는 방법엔 다음과 같은 것들이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mime.types&lt;/strong&gt;
 파일 이름의 확장자를 사용하는 방법입니다. 확장자를 그대로 사용하는 것은 아니고, 웹 서버별로 확장자별 MIME 타입이 담겨 있는 파일을 탐색해 확장자에 맞는 MIME 타입을 맵핑해 줍니다. 가장 흔히 쓰이는 방법입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매직 타이핑(Magic Typing)&lt;/strong&gt;
 한편, 확장자가 없는 파일이 있을 수도 있습니다. 아파치 웹 서버에선 파일의 내용을 검사해 특정 패턴을 추출할 수 있습니다. 이 패턴을 매직 파일(패턴과 MIME 타입을 맵핑해주는 테이블)에 맵핑해 MIME 타입을 찾아냅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;유형 명시(Explicit typing)&lt;/strong&gt;
 특정 파일 혹은 특정 디렉토리 안의 파일들을 파일 확장자나 내용에 상관 없이 어떤 MIME 타입을 갖도록 명시할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;유형 협상(Type negotiation)&lt;/strong&gt;
 한 리소스가 여러 MIME 타입에 맵핑 될 수도 있습니다. 이때 웹 서버가 협상 과정을 통해 사용하기 가장 좋은 MIME 타입을 판별해 설정할 수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;583-리다이렉션&quot;&gt;5.8.3. 리다이렉션&lt;/h4&gt;

&lt;p&gt;웹 서버는 성공 대신 리다이렉션을 응답하기도 합니다. 리다이렉션이 사용되는 경우는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;영구히 리소스가 옮겨진 경우&lt;/strong&gt;
 리소스의 위치가 옮겨지거나 이름이 바뀌었을 수 있습니다. 이때 웹 서버는 클라이언트에게 리소스의 URL이 바뀌었으니 북마크를 새로 갱신하라고 말해줄 수 있습니다. 이때 ‘301 Moved Permanently’ 코드가 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;임시로 리소스가 옮겨진 경우&lt;/strong&gt;
 리소스가 영구히 옮겨진게 아니라 잠시 옮겨지거나 이름이 변경될 수도 있습니다. 이때, 리다이렉션은 필요하지만 방금 전 처럼 북마크를 갱신할 필요는 없습니다. 이럴땐 ‘303 See Other’ 이나 ‘307 Temporary Redirect’ 코드가 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URL 증강&lt;/strong&gt;
 서버는 문맥 정보를 포함시키기 위해 재작성된 URL로 리다이렉션 시키기도 합니다. 그러면 클라이언트는 다시 작성된 fat URL을 따라 다시 요청 합니다. 이때도 ‘303 See Other’이나 ‘307 Temporary Redirect’ 코드가 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;부하 균형&lt;/strong&gt;
 과부하된 서버가 요청을 받으면 부하가 덜 걸린 서버로 리다이렉션 시킬수도 있습니다. 이때도 ‘303 See Other’이나 ‘307 Temporary Redirect’ 코드가 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;친밀한 다른 서버가 있을 때&lt;/strong&gt;
 웹 서버들은 사용자에 대한 정보를 가지고 있을 수 있습니다. 한 서버가 요청을 받았을때, 클라이언트의 정보를 가지고 있는 서버로 리다이렉션 시킬 수 있습니다. 이때도 ‘303 See Other’이나 ‘307 Temporary Redirect’ 코드가 사용됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;디렉터리 이름 정규화&lt;/strong&gt;
 클라이언트가 디렉터리 이름에 대해 URI 요청을 하는데 ‘/’를 바뜨렸다면, 대부분의 웹 서버는 클라이언트를 ‘/’를 추가한 새로운 URI로 리다이렉션 시킵니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;59-단계6--응답-보내기&quot;&gt;5.9. 단계6 : 응답 보내기&lt;/h3&gt;

&lt;p&gt;대게 한 서버는 여러 클라이언트를 상대하며 여러 커넥션을 가지고 있습니다. 그중 어떤 커넥션은 놀고 있을 수 있고 어떤 커넥션은 데이터를 보내고 있으며 어떤 커넥션은 데이터를 받고 있을 수도 있습니다.&lt;/p&gt;

&lt;p&gt;요청을 받을때와 마찬가지로 응답을 보낼때도 커넥션 상태들을 추적해 효율적으로 전송해야 합니다. 특히, 비지속 커넥션은 응답을 보낸뒤에 바로 커넥션을 닫으면 되기 때문에 비교적 간단하지만 지속 커넥션의 경우 더 주의해야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;510-단계7--로깅&quot;&gt;5.10. 단계7 : 로깅&lt;/h3&gt;

&lt;p&gt;트랜잭션이 완료되면 트랜잭션의 수행 결과를 로그 파일에 기록합니다. 대부분의 웹 서버는 기본적으로 제공하는 로깅 방식과 설정들이 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;매 장을 읽으면 그동안 머릿속에 자유롭게 돌아다니던 지식의 조각들이 제 자리를 찾아가는 것을 느낍니다. ‘How to use’를 알고 있던 것들이 ‘How it works’와 연결되는 과정이 즐겁습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>커넥션 관리</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C4/"/>
   <updated>2020-03-13T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드4</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;41-tcp-커넥션&quot;&gt;4.1. TCP 커넥션&lt;/h3&gt;

&lt;p&gt;이번 장에선 HTTP 통신을 사용하기 위한 기저인 TCP 커넥션에 대해 알아볼 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP는 어떻게 TCP 통신을 사용하는지&lt;/li&gt;
  &lt;li&gt;네트워크 지연의 원인인 TCP 커넥션의 지연, 병목, 막힘이 무엇인지&lt;/li&gt;
  &lt;li&gt;지연을 해결하기 위한 병렬커넥션, keep-alive 커넥션, 커넥션 파이프라인이 무엇인지&lt;/li&gt;
  &lt;li&gt;커넥션 관리를 위해 따라야 할 몇 가지 규칙들&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 것들을 알아볼 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1장에서도 설명드렸듯이 모든 HTTP 통신은 TCP/IP 통신을 기반으로 이루어집니다. HTTP는 데이터가 손실되지 않는 안전한 통신인데, 이 ‘안전한’을 TCP가 보장해줍니다.&lt;/p&gt;

&lt;p&gt;TCP/IP 커넥션이 맺어지면 HTTP 메세지들은 손실, 손상되지 않고 순서가 바뀌지도 않습니다. 이번 절에선 TCP/IP가 어떻게 데이터를 보장해주는지알아볼 것입니다.&lt;/p&gt;

&lt;p&gt;웹 브라우저 입장에서 TCP 커넥션을 이용한 HTTP 통신은 다음과 같은 과정으로 이루어집니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;브라우저가 URL에서 호스트 명을 추출합니다. 
(ex - http://www.joes-hardware.com:80/power-tools.html -&amp;gt; www.joes-hardware.com)&lt;/li&gt;
  &lt;li&gt;브라우저가 DNS(Domain Name System)을 이용해 호스트명에 대한 IP 주소를 찾습니다. 
(ex - www.joes-hardware.com -&amp;gt; 202.43.78.3)&lt;/li&gt;
  &lt;li&gt;브라우저가 URL에서 포트번호를 얻습니다. 
(ex - http://www.joes-hardware.com:80/power-tools.html -&amp;gt; 80)&lt;/li&gt;
  &lt;li&gt;브라우저가 호스트명의 포트 번호로 TCP 커넥션을 생성합니다.&lt;/li&gt;
  &lt;li&gt;브라우저가 서버로 요청 HTTP메세지를 보냅니다.&lt;/li&gt;
  &lt;li&gt;브라우저가 서버에서 온 응답 HTTP 메세지를 읽습니다.&lt;/li&gt;
  &lt;li&gt;브라우저가 커넥션을 끊습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;411-신뢰할-수-있는-데이터-전송-통로인-tcp&quot;&gt;4.1.1. 신뢰할 수 있는 데이터 전송 통로인 TCP&lt;/h4&gt;

&lt;p&gt;TCP에 대해 깊게 이해하기 위해선 따로 책 한권이 필요할 정도입니다.(저자추천 도서: 『TCP/IP Illustrated』 - W.Richard Stevens)&lt;/p&gt;

&lt;p&gt;4.1. 절에선 어떻게 TCP가 작동하고 데이터를 보장하는지 간략히 알아볼 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;412-tcp-스트림은-세그먼트로-나뉘어-ip-패킷을-통해-전송된다&quot;&gt;4.1.2. TCP 스트림은 세그먼트로 나뉘어 IP 패킷을 통해 전송된다&lt;/h4&gt;

&lt;p&gt;TCP는 HTTP 메세지를 통째로 전송하지 않습니다. IP 패킷(== IP 데이터그램)이라는 작은 조각으로 나눠 데이터를 전송합니다.&lt;/p&gt;

&lt;p&gt;패킷이라는 작은 조각으로 나누는 이유는 서킷 통신과 패킷 통신에 대해 알아야 합니다. https://brunch.co.kr/@wangho/6에 정말 잘 정리되어 있습니다. 간단히 말해 기존의 서킷 통신은 전화처럼 연결이 된 상대하고만 통신이 가능하고 그 외의 사람은 연결이 끝날때 까지 기다려야 하는데, 패킷 통신은 각자가 보낸 조각 패킷들을 받아서 조합하기 때문에 한 사람이 어떤 사람과 통신 중에 다른 사람이 끼어들어도 패킷들 사이에 다른 사람의 패킷이 들어올 수 있어 여러명과 통신이 가능하다는 것입니다.&lt;/p&gt;

&lt;p&gt;TCP는 HTTP 메세지를 세그먼트라는 단위로 나눠 IP 패킷에 담아 전달합니다. 이 과정은 osi 7계층에서 네트워크 계층, 전송 계층에서 일어나기 때문에 애플리케이션 계층을 다루는 개발자에겐 보이지 않습니다.&lt;/p&gt;

&lt;p&gt;IP 패킷은 아래와 같은 그림처럼 이루어져 있습니다.&lt;/p&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;p&gt;크게 IP 패킷 헤더(보통 20 Byte), TCP 세그먼트 헤더(보통 20 Byte), TCP 데이터 조각으로 이루어져 있는데 각자의 역할이 있습니다.&lt;/p&gt;

&lt;p&gt;IP 패킷 헤더는 발신지에서 목적지로 IP 패킷이 이동하는데 필요한 정보를 가지고 있습니다. 하나의 HTTP 메세지는 여러 IP 패킷으로 잘려 IP 패킷 헤더를 이용해 목적지에 도착합니다. 이때, 도착한 순서나 각 패킷들이 손상 없이 잘 도착했는지는 보장할 수 없습니다.&lt;/p&gt;

&lt;p&gt;이걸 보장해주기 위해 필요한게 TCP 세그먼트 헤더입니다. TCP 세그먼트 헤더의 속성들로 조각난 IP 패킷의 순서를 맞추고, 손실된 데이터가 발견되면 해당 데이터를 다시 요청합니다.&lt;/p&gt;

&lt;h4 id=&quot;413-tcp-커넥션-유지하기&quot;&gt;4.1.3. TCP 커넥션 유지하기&lt;/h4&gt;

&lt;p&gt;하나의 컴퓨터는 여러개의 TCP 커넥션을 가지고 있습니다. 포트 번호마다 여러개의 커넥션이 생성될 수 있습니다. 이런 여러개의 TCP 커넥션은&lt;/p&gt;

&lt;p&gt;&amp;lt;발신지 IP 주소, 발신지 포트, 수신지 IP 주소, 수신지 포트&amp;gt;&lt;/p&gt;

&lt;p&gt;위 네가지 값으로 식별됩니다. 네 가지 값이 같다면 같은 커넥션이라고 볼 수 있습니다. 한 포트에 여러 커넥션이 생성될 수 있지만 네 가지 값이 모두 같아야만 같은 커넥션이라고 합니다.&lt;/p&gt;

&lt;h4 id=&quot;414-tcp-소켓-프로그래밍&quot;&gt;4.1.4. TCP 소켓 프로그래밍&lt;/h4&gt;

&lt;p&gt;이런 TCP를 개발자가 직접 조작할 수도 있습니다. 이를 도와주는게 각 운영체제에서 지원하는 TCP 관련 API 입니다. 이를 흔히 소켓 API라고 부릅니다. 소켓 API는 유닉스에서 처음 개발됐지만 현재는 대부분의 운영체제에서 지원합니다.&lt;/p&gt;

&lt;p&gt;아래는 소켓 API의 주요 인터페이스입니다. 물론 API도 필요 없이 더 저수준의 언어로 TCP를 조작할 수도 있겠지만… 그건 나중에.. 각 운영체제에서 제공하는 소켓 API는 개발자들에게 TCP/IP에 관한 세부사항(핸드셰이킹, IP 패킷의 분할 및 재조립 등 .. )을 숨기지만 TCP/IP를 조작 할 수 있게 도와줍니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;소켓 API&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;s = socket(&lt;parameters&gt;)&lt;/parameters&gt;&lt;/td&gt;
      &lt;td&gt;연결되지 않은 익명의 새로운 소켓 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bind(s, &lt;local IP:port=&quot;&quot;&gt;)&lt;/local&gt;&lt;/td&gt;
      &lt;td&gt;소켓에 로컬 IP, 포트 번호와 인터페이스 할당&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;connect(s, &lt;remote IP:port=&quot;&quot;&gt;)&lt;/remote&gt;&lt;/td&gt;
      &lt;td&gt;로컬의 소켓과 원격 호스트, 포트 사이에 TCP 커넥션 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;listen(s, …)&lt;/td&gt;
      &lt;td&gt;커넥션을 받아들이기 위해 로컬 소켓에 허용함을 표시&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s2 = accpet(s)&lt;/td&gt;
      &lt;td&gt;누군가 로컬 포트에 커넥션을 맺기 기다림&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n = read(s, buffer, n)&lt;/td&gt;
      &lt;td&gt;소켓으로부터 버퍼에 n바이트 읽기 시도&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n = write(s, buffer, n)&lt;/td&gt;
      &lt;td&gt;소켓으로부터 버퍼에 n바이트 쓰기 시도&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;close(s)&lt;/td&gt;
      &lt;td&gt;TCP 커넥션을 완전히 끊음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shutdown(s, &lt;side&gt;)&lt;/side&gt;&lt;/td&gt;
      &lt;td&gt;TCP 커넥션의 입출력만 닫음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getsockopt(s, …)&lt;/td&gt;
      &lt;td&gt;내부 소켓 설정 옵션값을 읽음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;setsockopt(s, …)&lt;/td&gt;
      &lt;td&gt;내부 소켓 설정 옵션값을 변경&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위의 소켓 api를 기반으로 클라이언트와 서버의 TCP 통신을 대략적으로 그려보면 다음과 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;클라이언트&lt;/th&gt;
      &lt;th&gt;서버&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1. 새로운 소켓을 만든다(socket)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;2. 80포트로 소켓을 묶는다(bind)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3. 소켓 커넥션을 허가한다(listen)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;4. 커넥션을 기다린다(accept)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1. 요청 URL에서 IP 주소와 포트를 얻는다&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2. 새로운 소켓을 생성한다(socket)&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3. 서버의 IP:포트로 연결한다(connect)&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;5. 커넥션 인식 및 연결 확인 메세지를 보낸다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4. 연결 성공&lt;/td&gt;
      &lt;td&gt;6. 요청을 읽기 시작한다(read)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5. HTTP 요청을 보낸다(write)&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6. HTTP 응답을 기다린다(read)&lt;/td&gt;
      &lt;td&gt;7. 요청 메세지를 처리한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:&lt;/td&gt;
      &lt;td&gt;:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:&lt;/td&gt;
      &lt;td&gt;8. 응답을 보낸다.(write)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7. 응답을 처리한다.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8. 커넥션을 닫는다(close)&lt;/td&gt;
      &lt;td&gt;9. 커넥션을 닫는다(close)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;42-tcp의-성능에-대한-고려&quot;&gt;4.2. TCP의 성능에 대한 고려&lt;/h3&gt;

&lt;p&gt;HTTP는 osi 7계층에서 TCP 바로 위의 계층이기 때문에 HTTP의 성능은 TCP 성능에 직접적으로 영향을 받습니다.&lt;/p&gt;

&lt;p&gt;이번 절에선 TCP 성능 (주로 성능 저하의 원인)에 대해 알아볼 것입니다. TCP 프로토콜 내부를 자세히 알아야 하는 절이고 많은 개발자들은 이걸 직접 다룰 일은 드물 것입니다. 하지만 본 스터디는 근본 지식을 위한 스터디이므로 저는 한번 훑어보도록 하겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;421-http-트랜잭션-지연&quot;&gt;4.2.1. HTTP 트랜잭션 지연&lt;/h4&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 HTTP 요청을 처리하는 시간은 요청을 전송하고 응답을 전송하는 시간에 비해 짧습니다. 대부분의 HTTP 지연은 TCP 네트워크의 지연 때문에 발생합니다.&lt;/p&gt;

&lt;p&gt;HTTP 지연에는 다음과 같은 원인들이 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;처음 방문하는 호스트의 경우 DNS을 이용해 호스트명을 IP로 변환하는 과정. 과거에는 수십초가 걸림(현재는 인터넷 인프라의 발전으로 대부분 밀리초 단위로 DNS 이름 분석이 끝난다 - 옮긴이)&lt;/li&gt;
  &lt;li&gt;새로운 커넥션을 만들고 설정하는 시간. 과거엔 1~2초가 걸림 (역시 인터넷 인프라의 발전으로 대부분 1초 미만으로 끝난다.)&lt;/li&gt;
  &lt;li&gt;요청 메세지 전송&lt;/li&gt;
  &lt;li&gt;요청 처리 및 응답 메세지 전송&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;422-성능-관련-중요-요소&quot;&gt;4.2.2. 성능 관련 중요 요소&lt;/h4&gt;

&lt;p&gt;지금부턴 다음과 같은 일반적인 TCP 관련 지연에 대해 살펴봅니다. 고성능의 HTTP 소프트웨어를 개발해야 한다면 각 항목을 모두 이해해야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TCP 커넥션의 핸드셰이크 설정&lt;/li&gt;
  &lt;li&gt;TCP의 slow start : 본래는 인터넷의 혼잡을 제어하기 위해 사용되지만 지연의 원인이 되기도 합니다.&lt;/li&gt;
  &lt;li&gt;Nagle 알고리즘 : 작은 데이터를 모아 한번에 전송하기 위해 만들어진 알고리즘이지만 지연의 원인이 되기도 합니다.&lt;/li&gt;
  &lt;li&gt;TCP의 편승(piggyback) 확인응답(acknowledgment)을 위한 확인응답 지연 : 이 역시 확인응답이라는 메세지를 다른 데이터에 편승 시킬 목적이었으나 지연의 원인이 되기도 합니다.&lt;/li&gt;
  &lt;li&gt;TIME_WAIT 지연과 포트고갈&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;423-tcp-커넥션-핸드셰이크-지연&quot;&gt;4.2.3. TCP 커넥션 핸드셰이크 지연&lt;/h4&gt;

&lt;p&gt;핸드셰이크는 악수죠. TCP 커넥션 핸드셰이크는 정말 직관적으로 잘 이해되는 단어 같습니다. 새로운 TCP 커넥션을 맺을 때 두 TCP 소프트웨어는 커넥션을 맺기 위해 IP 패킷을 교환합니다.&lt;/p&gt;

&lt;p&gt;다음 그림과 설명은 TCP 커넥션이 핸드셰이크를 하는 순서입니다.&lt;/p&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트는 ‘SYN’이라는 플래그를 가진 작은 TCP 패킷을 보낸다.(40~60 Byte) SYN 플래그는 커넥션 생성 요청을 뜻한다.&lt;/li&gt;
  &lt;li&gt;서버가 그 커넥션을 받으면 몇 가지 커넥션 매개변수를 산출해 ‘SYN’과 ‘ACK’ 플래그가 담긴 TCP 패킷을 클라이언트에게 보낸다. SYN+ACK 플래그는 커넥션 생성 요청이 승낙 됐다는 것을 뜻한다.&lt;/li&gt;
  &lt;li&gt;SYN+ACK 플래그를 가진 TCP 패킷을 받은 클라이언트는 승낙을 확인했다는 뜻의 ACK 플래그를 가진 확인 응답 신호를 보낸다. 오늘날 TCP는 이 확인 응답 신호를 실질적으로 보내야할 데이터와 같이 보낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;주고받아야할 데이터의 크기가 작은 HTTP 트랜잭션들은 통신시간의 50%이상을 실제 데이터 전송이 아니라 TCP 커넥션을 구성하는데 사용합니다. (하나의 IP 패킷은 인터넷상에서 수백 바이트, 로컬에선 1500바이트 정도 됩니다.)&lt;/p&gt;

&lt;p&gt;이미 존재하는 커넥션을 재활용 하는 방식으로 이런 지연을 최소화 하는데 이는 뒤에서 살펴볼 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;424-확인응답-지연&quot;&gt;4.2.4. 확인응답 지연&lt;/h4&gt;

&lt;p&gt;앞서 하나의 HTTP 메세지는 여러 세그먼트단위로 나뉘고 IP 패킷에 담겨 전송되고, TCP는 각 세그먼트의 순서와 손상 여부를 검사한다고 했습니다. 이렇게 HTTP 메세지를 잘 받은걸 확인한 후에 확인응답 패킷을 송신자에게 반환합니다.&lt;/p&gt;

&lt;p&gt;그리고 송신자는 특정 시간 안에 확인응답을 받지 못하면 패킷 전송에 오류가 있다는 것으로 간주해 데이터를 다시 전송하게 됩니다.&lt;/p&gt;

&lt;p&gt;위 과정에서 보내는 확인응답은 크기가 작습니다. 그래서 보통 TCP는 확인응답이 가야할 방향으로 송출되는 데이터 패킷에 확인응답을 같이 태워보냅니다. 이를 편승(piggyback)시킨다고 부릅니다.&lt;/p&gt;

&lt;p&gt;편승하기 위해서 구현된 많은 ‘확인응답 지연’ 알고리즘은 다음과 같이 동작합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;보낼 확인응답을 특정시간(0.1~0.2초) 동안 버퍼에 저장한다.&lt;/li&gt;
  &lt;li&gt;편승할 송출 데이터 패킷을 찾는다.&lt;/li&gt;
  &lt;li&gt;일정 시간 안에 송출 데이터 패킷을 찾지 못하면 확인응답만 별도의 패킷으로 전송한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;서로 데이터 전송이 활발한 커넥션의 경우에 문제가 없겠지만 주고받는게 적은 통신에선 오히려 편승할 데이터 패킷을 찾는 과정에 시간을 버리는 일이 빈번합니다.&lt;/p&gt;

&lt;p&gt;운영체제에 따라 이 확인응답 지연 관련 기능을 수정할수도 있지만 조심히 건드려야 할것입니다.&lt;/p&gt;

&lt;h4 id=&quot;425-tcp-느린-시작slow-start&quot;&gt;4.2.5. TCP 느린 시작(slow start)&lt;/h4&gt;

&lt;p&gt;TCP의 slow start는 생성 초기엔 커넥션의 최대 속도를 제한하고 데이터가 성공적으로 전송됨에 따라 속도 제한을 높이는 것입니다. 이는 인터넷의 급작스러운 부하나 혼잡을 방지하기 위해 도입되었습니다.&lt;/p&gt;

&lt;p&gt;속도 제한은 한번에 전송 가능한 패킷의 수로 제어 합니다. 패킷이 성공적으로 전달되면 추가로 2개의 패킷을 더 전송할 수 있는 권한을 얻게 됩니다.&lt;/p&gt;

&lt;p&gt;2개를 보냈다가 성공적으로 전달되면 다음엔 4개를 보낼 수 있게되는 방식입니다. 이렇게 점진적으로 전달 패킷 양을 늘리는걸 ‘Opening the congestion window’라고 부르고 어느 정도 데이터를 주고 받은 커넥션을 ‘튜닝된’ 커넥션이라고 부릅니다.&lt;/p&gt;

&lt;p&gt;새로운 커넥션은 튜닝된 커넥션보다 느리기 때문에(한 번에 보낼 수 있는 최대 패킷수가 제한되기 때문에) 커넥션을 재사용하지 않는다면 TCP의 slow start 때문에 네트워크 지연이 발생할수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;426-네이글nagle-알고리즘과-tcp_nodelay&quot;&gt;4.2.6. 네이글(Nagle) 알고리즘과 TCP_NODELAY&lt;/h4&gt;

&lt;p&gt;앞서 보았듯이 실제로 전송해야할 데이터가 얼마가 되든 IP 패킷으로 전송하기위해선 IP 패킷 헤더, TCP 세그먼트 헤더, 플래그등을 포함합니다. 따라서 전송해야할 데이터가 작다면 실제 보낼 데이터보다 헤더값들이 더 큰 상황이 발생할 수 있습니다.&lt;/p&gt;

&lt;p&gt;네이글 알고리즘은 이런 작은 패킷들을 하나로 합쳐 전송하는 역할을 합니다. 네이글 알고리즘은 다음과 같은 순서로 이루어집니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;전에 전송한 패킷에 아직 확인응답을 못받은 경우 전송할 데이터들을 버퍼에 쌓아둔다.&lt;/li&gt;
  &lt;li&gt;쌓아둔 데이터가 세그먼트의 최대크기 만큼 쌓이면 하나의 패킷으로 전송한다.&lt;/li&gt;
  &lt;li&gt;전에 전송한 패킷들이 모두 확인응답을 받아 확인응답을 기다리는 패킷들이 없다면, 버퍼에 쌓는 데이터가 세그머느의 최대 크기가 되지 않더라도 하나의 패킷으로 전송한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;네이글 알고리즘 역시 네트워크의 지연을 줄이고자 하는 목적으로 도입됐지만 오히려 네트워크 지연을 발생시키기도 합니다. 앞으로 생길지 말지 모르는 데이터를 하염없이 기다리며 지연됩니다.&lt;/p&gt;

&lt;p&gt;그리고 이 네이글 알고리즘은 앞서 본 확인응답 지연과 같이 쓰이면 성능이 매우 떨어지기도 합니다. 확인응답 지연은 패킷을 자주 주고받아 확인응답을 다른 패킷에 편승시켜야 하는데, 네이글 알고리즘은 작은 패킷들은 안보내고 모으고 있으니 서로 역효과를 발생시키게 됩니다.&lt;/p&gt;

&lt;p&gt;HTTP 어플리케이션 수준에서 HTTP 스택에 TCP_NODELAY 파라미터 값을 설정하면 네이글 알고리즘을 비활성화 할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;427-time_wait의-누적과-포트-고갈&quot;&gt;4.2.7. TIME_WAIT의 누적과 포트 고갈&lt;/h4&gt;

&lt;p&gt;TIME_WAIT의 누적과 포트 고갈은 실제 상황에서 발생할 가능성은 낮지만 발생시엔 심각한 성능 저하를 일으킵니다. 그렇다면 포트고갈은 왜 일어나는 것 인지 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;TCP 커넥션의 종단(end-point)에서 TCP 커넥션을 끊으면 커넥션의 IP 주소와 포트번호를 메모리의 제어영역(control block)에 기록해두고 해당 주소와 포트번호는 일정 시간 동안 사용하지 않게합니다. 이를 TIME_WAIT라고 하고 보통 세그먼트의 최대 생명주기의 두배(2MSL) 정도 유지하며 2MSL은 과거엔 2분, 현재는 1분 이내입니다.&lt;/p&gt;

&lt;p&gt;TIME_WAIT를 하는 이유는 이전 커넥션과 관련된 패킷이 이전 커넥션과 같은 IP, 포트를 갖는 새로운 커넥션에 들어오는 것을 방지하는 것입니다. 그래서 세그먼트의 생명주기의 두배정도를 기다리는 것입니다.&lt;/p&gt;

&lt;p&gt;하지만 요즘엔 라우터들이 향상되어 커넥션이 닫힌 후에 중복 패킷이 생기는 경우는 거의 없습니다.&lt;/p&gt;

&lt;p&gt;처음에 이 포트 고갈은 실제 상황에서 발생할 가능성이 낮다고 했습니다. 실제 상황보다 성능 테스트 시에 발생할 가능성이 높습니다. 커넥션에 관해 설명할때&lt;/p&gt;

&lt;p&gt;&amp;lt;발신지 IP주소, 발신지 포트, 목적지 IP주소, 목적지 포트&amp;gt;&lt;/p&gt;

&lt;p&gt;4가지가 모두 같아야 같은 커넥션이라고 했습니다. 실제 상황에선 한 발신지에서 많은 트랜잭션을 단시간에 보내는 경우는 드물기 때문에 실제론 잘 발생하지 않습니다. 오히려 발신지의 IP와 포트가 제한된 채로 많은 트랜잭션을 발생시켜 테스트하는 성능 테스트 단계에서 발생하기 쉽습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;43-http-커넥션-관리&quot;&gt;4.3. HTTP 커넥션 관리&lt;/h3&gt;

&lt;p&gt;이번 절에선 커넥션을 생성하고 최적화하는데 필요한 HTTP 기술을 알아볼 것입니다. HTTP의 Connection 헤더에 대해 알아보고 이를 최적화 하는 방법을 알아 볼 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;431-흔히-잘못-이해하는-connection-헤더&quot;&gt;4.3.1. 흔히 잘못 이해하는 Connection 헤더&lt;/h4&gt;

&lt;p&gt;클라이언트의 요청은 바로 목적지 서버로 들어가지 않고 여러 프록시를 거칠 수 있습니다. 이때를&lt;/p&gt;

  	클라이언트 - 프록시1 - 프록시2 - 서버

&lt;p&gt;순서로 통신이 이루어진다고 가정하면, 클라이언트와 프록시1 둘 간에만 적용될 옵션을 지정할 수 있습니다. 이를 hop-by-hop 헤더라고 합니다.&lt;/p&gt;

&lt;p&gt;HTTP메세지의 Connection헤더는 세가지 종류의 토큰이 올 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP 헤더 필드 명 : 해당 커넥션에서만 사용되는 HTTP 헤더를 나열합니다. 다음 커넥션에선 해당 HTTP 헤더를 삭제하고 보냅니다.&lt;/li&gt;
  &lt;li&gt;임시적인 토큰 : 커넥션에 대한 비표준 옵션입니다.&lt;/li&gt;
  &lt;li&gt;close : 커넥션 작업이 완료되면 종료되어야 한다는 뜻입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;예시를 보겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP/1.1 200 OK
Cache-control : max-age=3600
Connection : meter, close, bill-my-credit-card
Meter : max-uses=3, max-refuses=6, dont-report&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위는 서버에서 프록시쪽으로 갈 수 있는 응답 메세지 입니다. 이 중 Connection 헤더를 보면 meter 토큰이 있고 아래에 Meter라는 HTTP 헤더가 있습니다. 여기서 meter 헤더는 해당 커넥션에서만 사용되고 다음 커넥션으로 갈땐 Meter 헤더가 삭제 되어야 한다는 뜻입니다.&lt;/p&gt;

&lt;p&gt;bill-my-credit-card는 커넥션에서 사용하기 위해 만든 비표준 옵션이라고 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;추가적으로 Connection 헤더에 기술되지 않더라도 기본적으로 hop-by-hop 헤더인 HTTP 헤더들도 있습니다. Proxy-Authenticate, Proxy-Connection, Transfer-Encoding, Upgrade 같은 헤더들이 그것입니다.&lt;/p&gt;

&lt;h4 id=&quot;432-순차적인-트랜잭션-처리에-의한-지연&quot;&gt;4.3.2. 순차적인 트랜잭션 처리에 의한 지연&lt;/h4&gt;

&lt;p&gt;3개의 이미지가 있는 웹페이지를 연다고 가정해보겠습니다. 이 웹페이지를 열기 위해선 4번의 HTTP 트랜잭션이 필요합니다. (HTML을 가져오는 트랜잭션 1개 + 3개의 이미지를 가져오는 각각의 트랜잭션)&lt;/p&gt;

&lt;p&gt;각 트랜잭션들이 새로운 커넥션이 필요하다면(HTML과 각 이미지를 호스팅하는 서버가 다르거나 포트가 다를 경우) 핸드셰이킹 지연과 TCP slow start 지연이 추가로 발생합니다.&lt;/p&gt;

&lt;p&gt;이렇게 순차적으로 4개의 트랜잭션을 처리할 경우 물리적으로 지연이 발생할 뿐 아니라 사용자 입장에서 이미지가 로드될때까지 빈 화면을 바라봐야 하는 심리적인 지연도 있습니다. (뒤에서 살펴볼 병렬적으로 이미지를 받아오는 방식이 더 느릴때도 있지만 사용자는 그래도 동시에 로드되는걸 좋아한다고 합니다!)&lt;/p&gt;

&lt;p&gt;또한 특정 브라우저들의 경우엔 이미지의 크기를 알기 전엔 HTML의 뼈대조차 안그려주는 브라우저도 있습니다. (html 태그 상에서 width와 height를 지정해주면 해결되긴 합니다.)&lt;/p&gt;

&lt;p&gt;이렇게 발생하는 지연을 해결하기 위해 아래와 같은 방법들을 사용하고 앞으로 하나씩 알아보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;병렬 커넥션 : 여러개의 TCP 커넥션을 통한 동시 HTTP 요청&lt;/li&gt;
  &lt;li&gt;지속 커넥션 : 커넥션을 맺고 끊는 데서 발생하는 지연을 제거하기 위한 TCP 커넥션의 재활용&lt;/li&gt;
  &lt;li&gt;파이프라인 커넥션 : 공유 TCP 커넥션을 통한 병렬 HTTP 요청&lt;/li&gt;
  &lt;li&gt;다중 커넥션 : 요청과 응답들에 대한 중재(아직 실험적인 기술)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;44-병렬-커넥션&quot;&gt;4.4. 병렬 커넥션&lt;/h3&gt;

&lt;p&gt;병렬 커넥션은 말 그대로 여러개의 커넥션을 맺어 여러개의 HTTP 트랜잭션을 병렬로 처리하는 것입니다. 병렬 ‘커넥션’이기 때문에 가져와야할 리소스가 다른 호스트나 포트에 있어야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;441-병렬-커넥션은-페이지를-더-빠르게-내려-받는다&quot;&gt;4.4.1. 병렬 커넥션은 페이지를 더 빠르게 내려 받는다&lt;/h4&gt;

&lt;p&gt;하나의 커넥션은 HTTP 요청을 보내고 응답을 기다립니다. 그 기다리는 시간동안 다른 커넥션을 만들고 다른 요청을 보냅니다. 이렇게 하기 위해선 충분한 인터넷 대역폭이 확보되어야 합니다.&lt;/p&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;p&gt;이렇게 인터넷 대역폭이 충분하고 한 커넥션이 지연되는 시간이 있을때, 하나가 지연될때 다른 커넥션을 작동시켜 지연시간을 겹치게 만들 수 있습니다. 이렇게 하면 일반적으론 더 빠르게 웹 페이지를 받아올 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;442-병렬-커넥션이-항상-더-빠르지는-않다&quot;&gt;4.4.2. 병렬 커넥션이 항상 더 빠르지는 않다&lt;/h4&gt;

&lt;p&gt;하지만 병렬 커넥션이 항상 빠르지는 않습니다. 앞서 말했듯이 충분한 인터넷 대역폭이 확보되어야 하는데 인터넷 대역폭이 극히 작아 하나의 커넥션만으로 버겁다면 병렬적으로 커넥션을 사용할 수 없습니다. (오히려 여러 커넥션을 만들어야 되니 그로 인한 지연이 더 발생할 수 있습니다.)&lt;/p&gt;

&lt;p&gt;그리고 커넥션을 여러개 생성하는건 메모리의 문제로 이어질 수도 있습니다.&lt;/p&gt;

&lt;p&gt;또한, 복잡한 웹페이지의 경우엔 수십~수백개의 객체를 포함하는데 이를 수백개의 병렬 커넥션으로 연결할 순 없습니다. 서버쪽에서 거부하기 때문에 과도한 수의 커넥션이 맺어지면 서버쪽에서 임의로 끊을 수도 있습니다.&lt;/p&gt;

&lt;p&gt;사실 서버쪽에서 거부하기 전에 사용자가 사용하는 브라우저 자체에서 병렬 커넥션의 수를 제한합니다.(최신 브라우저들은 대부분 6~8개의 병렬 커넥션을 지원합니다. - 옮긴이)&lt;/p&gt;

&lt;h4 id=&quot;443-병렬-커넥션은-더-빠르게-느껴질-수-있다&quot;&gt;4.4.3. 병렬 커넥션은 더 빠르게 ‘느껴질 수’ 있다&lt;/h4&gt;

&lt;p&gt;이렇게 실제로 병렬 커넥션이 더 느릴 수도 있습니다. 하지만 사용자는 병렬 커넥션을 더 선호합니다. 앞서 말했듯이 빈 화면을 보고있는 것보단 동시에 로드되는 과정을 지켜볼때 사용자는 더 빠르다고 생각합니다.&lt;/p&gt;

&lt;p&gt;이렇게 사용자의 심리적인 부분을 고려하는 것도 중요합니다. 옮긴이에 따르면, 이미지 같은 것을 로드할때 처음엔 저화질 이미지를 로드해 보여주고 후에 고화질을 받아 보여주는 방식도 사용자의 심리적인 면을 고려하는 것중 하나라고 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;45-지속-커넥션&quot;&gt;4.5. 지속 커넥션&lt;/h3&gt;

&lt;p&gt;대부분의 웹 사이트를 이용할 때 웹 클라이언트는 같은 사이트에 여러 개의 커넥션을 맺습니다. 하나의 웹 페이지를 띄우기 위해 가져와야할 많은 리소스들이 같은 서버에 있는 경우 그 서버에 또 요청을 하게 됩니다. 이를 ‘site locality’ 라고 부릅니다.&lt;/p&gt;

&lt;p&gt;이를 위해 HTTP/1.1에선 처리가 완료된 후에도 TCP 커넥션을 유지합니다. 이를 ‘지속 커넥션’이라고 부르고 지속 커넥션을 이용하면 여러 번 커넥션을 맺을 때 발생할 수 있는 헨드셰이킹 지연, TCP slow start 지연을 방지해 더 빠르게 리소스를 가져올 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;451-지속-커넥션-vs-병렬-커넥션&quot;&gt;4.5.1. 지속 커넥션 vs 병렬 커넥션&lt;/h4&gt;

&lt;p&gt;병렬 커넥션의 장, 단점은 앞에서 살펴보았고 지속 커넥션의 장점은 방금 살펴보았습니다. 하지만 지속 커넥션이 장점만 갖는건 아닙니다. 지속 커넥션 관리가 제대로 되지 않을 경우, 연결된 상태의 커넥션이 계속 쌓여 클라이언트, 서버 양쪽에 리소스를 낭비할 것입니다.&lt;/p&gt;

&lt;p&gt;사실 가장 좋은 방법은 병렬 커넥션과 지속 커넥션을 같이 사용하는 것입니다. 요즘의 많은 웹 어플리케이션은 적은 수의 병렬 커넥션을 사용하며 각 커넥션을 지속 커넥션으로 사용합니다.&lt;/p&gt;

&lt;p&gt;쉽게 볼 수 있는 지속 커넥션엔 두 가지가 있습니다. HTTP/1.0+ 에서 사용되는 ‘keep alive’ 커넥션이 있고 HTTP/1.1 에서 사용되는 ‘지속’ 커넥션이 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;452-http10의-keep-alive-커넥션&quot;&gt;4.5.2. HTTP/1.0+의 Keep-Alive 커넥션&lt;/h4&gt;

&lt;p&gt;HTTP/1.0에서는 지속 커넥션이 없었습니다. 당시에 실험적인 수준이었던 keep-alive 커넥션을 지원하기 위해 HTTP/1.0+로 확장 됩니다.&lt;/p&gt;

&lt;p&gt;keep-alive 커넥션은 처음 등장한 지속 커넥션이어서 그런지 설계상 문제가 있었습니다. 하지만 아직도 많은 클라이언트와 서버들은 keep-alive 커넥션을 사용합니다. (&lt;strong&gt;책이 집필 된 지 오래돼서 아직도 이 문장이 유효한지 잘 모르겠습니다.&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;keep-alive의 설계상 문제는 HTTP/1.1 에서 수정되어 새로운 지속 커넥션으로 바뀌었습니다. 그리고 keep-alive 자체는 HTTP/1.1 명세에 빠졌습니다. 머지않아 레거시로만 남게 될 것 같습니다.&lt;/p&gt;

&lt;h4 id=&quot;453-keep-alive-동작&quot;&gt;4.5.3. Keep-Alive 동작&lt;/h4&gt;

&lt;p&gt;keep-alive가 HTTP/1.1 명세에서 공식적으로 빠졌더라도 아직 많은 웹 클라이언트와 서버가 keep-alive를 사용중이고 레거시와의 호환성은 개발자에겐 피할 수 없는 숙명이므로 keep-alive가 어떻게 동작하는지 알아보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 요청시 ‘Connection:Keep-Alive’ 헤더를 포함시킵니다.&lt;/li&gt;
  &lt;li&gt;‘Connection:Keep-Alive’헤더를 받은 서버가 이 지속 커넥션을 수락하고자 한다면 응답 메세지에도 ‘Connection:Keep-Alive’헤더 를 포함시킵니다.&lt;/li&gt;
  &lt;li&gt;응답 메세지에서 ‘Connection:Keep-Alive’헤더를 확인한 클라이언트는 지속 커넥션을 유지합니다. 만약 응답 메세지에서 ‘Connection:Keep-Alive’를 찾지 못했다면 서버가 커넥션을 끊을 것이라 추정하게 됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서 ‘Connection:Keep-Alive’ 헤더는 커넥션을 유지하기 바라는 요청일 뿐이고 해당 헤더를 포함시켰다고 해서 keep-alive 커넥션이 만들어질거라는 보장은 없습니다. 또한, 언제든지 keep-alive 커넥션은 끊어질 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;454-keep-alive-옵션&quot;&gt;4.5.4. Keep-Alive 옵션&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Connection : Keep-Alive
Keep-Alive : max=5, timeout=120&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위에서 처럼 Keep-Alive 헤더를 추가해 keep-alive에 대한 옵션 사항을 줄 수도 있습니다. 위의 예시에서 max 파라미터는 몇 개의 HTTP 트랜잭션을 처리할 때 까지 커넥션을 유지할 것인지를 나타냅니다. timeout 파라미터는 이 커넥션이 얼마간 유지될 것인지를 나타냅니다. 이 외에도 다양한 파라미터를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 ‘Connection:Keep-Alive’헤더가 keep-alive 커넥션을 보장하지 못하는 것 처럼 Keep-Alive 헤더에 옵션을 적었다고 해서 그렇게 동작할 것이라는 보장은 없습니다.&lt;/p&gt;

&lt;p&gt;끝으로 Keep-Alive 헤더는 ‘Connection:Keep-Alive’ 헤더가 있을때만 유효합니다.&lt;/p&gt;

&lt;h4 id=&quot;455-keep-alive-커넥션-제한과-규칙&quot;&gt;4.5.5. Keep-Alive 커넥션 제한과 규칙&lt;/h4&gt;

&lt;p&gt;앞에서 살펴본 것들과 뒤에서 살펴볼 keep-alive의 제한이나 규칙등을 정리해보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;keep-alive는 기본적으로 적용되는 것이 아닙니다.  Connection:Keep-Alive 요청 헤더를 보내야 합니다.&lt;/li&gt;
  &lt;li&gt;keep-alive를 유지하려면 계속 요청과 응답에서 Connection:Keep-Alive 헤더를 유지해야 합니다. 클라이언트가 Connection:Keep-Alive를 보내지 않으면 서버는 keep-alive 커넥션을 끊을 것입니다.&lt;/li&gt;
  &lt;li&gt;서버가 Connection:Keep-Alive를 보내지 않으면 클라이언트는 서버가 keep-alive 커넥션을 끊을 것이라 생각합니다.&lt;/li&gt;
  &lt;li&gt;keep-alive 커넥션에서 Content-Length의 값을 알려주는 것은 매우 중요합니다. Content-Length를 알아야만 메세지의 끝과 시작점을 알 수 있기 때문입니다.&lt;/li&gt;
  &lt;li&gt;정석대로라면 keep-alive 커넥션은 Connection 헤더를 인식하지 못하는 프록시와는 연결되면 안됩니다. 뒤에서 설명할 dumb 프록시로 인한 문제가 발생할 수 있기 때문입니다. 하지만 현실적으론 쉽지 않습니다.&lt;/li&gt;
  &lt;li&gt;기술적으론 HTTP/1.0 을 따르는 곳에서 오는 모든 Connection 헤더 필드는 무시해야 합니다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 응답을 전부 받기 전에 커넥션이 끊어진다면 다시 요청을 보낼 준비를 하고 있어야 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;456-keep-alive와-멍청한dumb-프록시&quot;&gt;4.5.6. Keep-Alive와 멍청한(dumb) 프록시&lt;/h4&gt;

&lt;p&gt;dumb 프록시에 관한 문제는 Connection 헤더를 이해못하는 구형 프록시 때문에 발생합니다. 발생 과정을 살펴보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트 - dumb proxy - 서버 간의 통신 상황입니다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 Connection : Keep-Alive 헤더를 포함한 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;dumb 프록시는 Connection : Keep-Alive 헤더를 단순히 확장 헤더로 취급하고 서버에 그대로 전달 합니다.
앞서 살펴봤듯이 Connection 헤더는 hop-by-hop 헤더로써, 다음 서버로 전송되면 안됩니다.&lt;/li&gt;
  &lt;li&gt;서버는 Connection : Keep-Alive 헤더가 담긴 메세지를 받고 문제가 없는 경우에 keep-alive 커넥션에 동의하고 Connection : Keep-Alive 헤더를 포함한 응답 메세지를 보냅니다.&lt;/li&gt;
  &lt;li&gt;dumb 프록시는 이번에도 Connection : Keep-Alive 헤더를 확장 헤더로 취급해 그대로 클라이언트에게 전달합니다.&lt;/li&gt;
  &lt;li&gt;그리고 dumb 프록시는 keep-alive를 이해하지 못하기 때문에 서버가 커넥션을 끊기를 기다립니다. 하지만 서버는 keep-alive 커넥션에 동의했기 때문에 커넥션을 끊지 않습니다.&lt;/li&gt;
  &lt;li&gt;Connection : Keep-Alive 헤더가 담긴 응답을 받은 클라이언트는 keep-alive가 맺어졌다고 생각하고 다음 요청을 프록시에 보냅니다.
하지만 프록시는 같은 커넥션에서 다른 요청이 또 올거라 예상하지 못하기 때문에 클라이언트의 다음 요청은 무시됩니다. 클라이언트는 계속 기다리게 됩니다.&lt;/li&gt;
  &lt;li&gt;dumb 프록시가 중간을 어지럽혔기 때문에 클라이언트나 서버는 타임아웃이 나서 커넥션이 끊길때 까지 기다리게 됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 모든 상황은 dumb 프록시가 다음으로 넘기지 말아야 할 Connection 헤더를 넘겨 일어난 일입니다.&lt;/p&gt;

&lt;h4 id=&quot;457-proxy-connection-살펴보기&quot;&gt;4.5.7. Proxy-Connection 살펴보기&lt;/h4&gt;

&lt;h4 id=&quot;458-http11의-지속-커넥션&quot;&gt;4.5.8. HTTP/1.1의 지속 커넥션&lt;/h4&gt;

&lt;p&gt;앞에서 많은 시간을 들여 keep-alive 커넥션에 대해 알아봤지만 사실 keep-alive는 deprecated된 기술입니다. HTTP/1.1에선 keep-alive보다 향상된 지속 커넥션을 사용합니다.&lt;/p&gt;

&lt;p&gt;HTTP/1.1의 지속 커넥션은 기본적으로 활성화되어 있습니다. keep-alive가 기본적으로 비활성이던 것과는 정반대입니다. HTTP/1.1의 지속 커넥션은 모든 커넥션을 지속 커넥션으로 취급하고, 이를 끊으러면 Connection : close 헤더를 보내야 합니다.&lt;/p&gt;

&lt;p&gt;Connection : close 헤더가 없다면 HTTP/1.1을 따르는 웹 어플리케이션들은 지속 커넥션이 유지된다고 생각합니다. 물론, Connection : close를 보내지 않았다고 해서 커넥션이 영원히 유지되는 것은 아닙니다.&lt;/p&gt;

&lt;h4 id=&quot;459-지속-커넥션의-제한과-규칙&quot;&gt;4.5.9. 지속 커넥션의 제한과 규칙&lt;/h4&gt;

&lt;p&gt;HTTP/1.1 지속 커넥션의 특징들을 정리하겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 Connection : close헤더를 포함한 요청을 보냈다면 그 커넥션으로 추가 요청을 보낼 순 없다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 추가적으로 요청을 보내지 않을 것이라면 Connection : close헤더를 포함해 마지막 요청을 보내야 한다.&lt;/li&gt;
  &lt;li&gt;메세지에 길이 정보가 있어야 지속 커넥션을 유지 시킬 수 있다. 즉, Content-Length를 가지고나 chunked transfer encoding 되어 있어야 한다.&lt;/li&gt;
  &lt;li&gt;HTTP/1.1 프록시는 클라이언트, 서버와 각각 별도의 지속 커넥션을 맺고 관리해야 한다.&lt;/li&gt;
  &lt;li&gt;HTTP/1.1 프록시는 클라이언트의 HTTP지원 범위를 모른다면 지속 커녁션을 맺으면 안된다.(하지만 이게 잘 지켜지진 않는다.)&lt;/li&gt;
  &lt;li&gt;HTTP/1.1 기기는 Connection : close 헤더와 관계 없이 언제든 커넥션을 끊을 수 있다.&lt;/li&gt;
  &lt;li&gt;HTTP/1.1 어플리케이션은 중간에 끊어진 커넥션을 복구할 수 있어야 한다. 다시 보내도 되는 요청이면 다시 보내야 한다.&lt;/li&gt;
  &lt;li&gt;클라이언트는 커넥션이 비정상적으로 끊어질 것을 대비해 다시 요청을 보낼 준비가 되어있어야 한다.&lt;/li&gt;
  &lt;li&gt;하나의 클라이언트는 서버의 과부하 방지를 위해 두개 정도의 지속 커넥션을 유지해야 한다. n명의 사용자를 상대하기 위해서 프록시나 서버는 2n개의 커넥션을 유지할 수 있어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;46-파이프라인-커넥션&quot;&gt;4.6. 파이프라인 커넥션&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;파이프라인 : 컴퓨터 과학에서 파이프라인은 한 데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 가리킨다. 이렇게 연결된 데이터처리 단계는 한 단계가 서로 동시에, 또는 병렬적으로 수행될 수 있어 효율성의 향상을 꾀할 수 있다. 각 단계 사이의 입출력을 중계하기 위해 버퍼가 사용될 수 있다.  - [위키백과][https://ko.wikipedia.org/wiki/%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8_(%EC%BB%B4%ED%93%A8%ED%8C%85)]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTP/1.1은 지속 커넥션을 위해 요청을 파이프라이닝 할 수 있습니다. 하나의 요청을 보내고 응답을 기다리는 동안 보낸 요청은 큐에 쌓아두고 새로운 요청을 보내고 또 큐에 쌓는 방식입니다. 대기시간이 긴 네트워크 상황에서 큰 효과를 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 파이프라이닝엔 다음과 같은 제약 사항들이 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HTTP 클라이어느는 커넥션이 지속 커넥션인지 확인하기 전 까진 파이프라인을 이어서는 안됩니다.&lt;/li&gt;
  &lt;li&gt;HTTP 응답은 요청 순서와 같게 와야 합니다. HTTP 메세지는 순번이 매개져 있지 않기 때문에 응답이 무작위로 오면 순서에 맞게 정렬시킬 방법이 없습니다.&lt;/li&gt;
  &lt;li&gt;HTTP 클라이언트는 커넥션이 언제 끊어지더라도 실패한 요청을 다시 보낼 수 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;POST 요청과 같이 반복해서 보낼때 문제가 생길 수 있는 요청은 파이프라인을 통해 보내면 안됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;47-커넥션-끊기에-대한-미스터리&quot;&gt;4.7. 커넥션 끊기에 대한 미스터리&lt;/h3&gt;

&lt;p&gt;커넥션을 관리(특히 언제, 어떻게 커넥션을 끊는지)에는 명확한 기준도 없고 관련한 기술문서도 많지 않습니다.&lt;/p&gt;

&lt;h4 id=&quot;471-마음대로-커넥션-끊기&quot;&gt;4.7.1. ‘마음대로’ 커넥션 끊기&lt;/h4&gt;

&lt;p&gt;모든 HTTP 클라이언트, 프록시, 서버는 사실 언제든지 TCP 전송 커넥션을 독자적으로 끊을 수 있습니다. 보통은 메세지를 다 보낸 다음 끊게 되지만 이렇게 마음대로 커넥션을 끊어 버리면 HTTP메세지의 중간이 끊기는것 처럼 다양한 문제가 발생할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;472-content-length와-truncation&quot;&gt;4.7.2. Content-Length와 Truncation&lt;/h4&gt;

&lt;p&gt;오래된 HTTP 서버는 ‘커넥션을 끊는다’ == ‘데이터 전송이 끝났다’ 라는 가정하에 개발되어 Content-Length를 가지지 않는 경우가 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 모든 HTTP 응답은 엔터티 본문의 크기를 값는 Content-Length헤더를 가지고 있어야 합니다.&lt;/p&gt;

&lt;p&gt;만약 클라이언트가 실제 엔터티 본문의 크기와 Content-Length의 값이 다른 응답을 받거나, Content-Length 자체를 받지 못했다면 정확한 길이를 다시 물어봐야 합니다. 이때, 발신자가 캐시 프록시였다면 응답을 캐시하면 안됩니다.&lt;/p&gt;

&lt;h4 id=&quot;473-커넥션-끊기의-허용-재시도-멱등성&quot;&gt;4.7.3. 커넥션 끊기의 허용, 재시도, 멱등성&lt;/h4&gt;

&lt;p&gt;앞서 몇번 언급했듯이 커넥션은 에러가 없더라도 언제든지 끊길 수 있습니다. HTTP 어플리케이션들은 이에 대한 대비가 되어있어야 합니다.&lt;/p&gt;

&lt;p&gt;클라이언트의 경우 커넥션이 끊겨 실패한 요청을 다시 보낼 수 있어야 합니다. 이 상황은 파이프라인 커넥션에선 좀 더 복잡해집니다. 응답 대기중인 요청은 큐에 쌓여있지만 모든 응답이 오기전에 커넥션이 끊기면 어느 요청들이 처리됐는지 알수 없습니다.&lt;/p&gt;

&lt;p&gt;이런 상황에서 요청이 어떤 종류의 요청이었는지는 중요합니다. 몇번을 보내도 서버에 영향을 미치지 않는 요청들(앞서 Safe Method라 배운 GET, HEAD)이나 한 번 실행됐는지, 여러번 실행됐는지에 상관없이 같은 결과를 반환하는 요청들(PUT, DELETE 와 같은)은 여러번 보내도 상관없습니다. 이런 부류의 요청을 ‘멱등(idempotent)한’ 요청이라고 합니다.&lt;/p&gt;

&lt;p&gt;POST와 같은 멱등하지 않은 요청을 파이프라인을 통해 요청하다 커넥션이 예상치 못하게 끊어진다면, POST 요청을 다시 보내도 될지 말지 결정할 수 없습니다. 이런 멱등하지않은 요청은 파이프라인 커넥션을 통해 요청하면 안됩니다.&lt;/p&gt;

&lt;h4 id=&quot;474-우아한-커넥션-끊기&quot;&gt;4.7.4. 우아한 커넥션 끊기&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;커넥션은 어깨너머 들은 지식을 정리하기 보단 새로운 지식으로 받아들이는 시간이었던 것 같습니다. 하지만 이 책의 학습 목표는 이런 웹 서비스가 동작하는데에 대한 깊고 근본적인 지식을 탐구하는 것이기 때문에 매우 재밌습니다! :smiley:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HTTP 메시지</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C3/"/>
   <updated>2020-03-12T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드3</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;앞서 HTTP는 ‘배달원’이라고 했습니다. 이번장에서 알아볼 HTTP 메시지는 배달원이 보내는 소포와 같은 역할을 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;31-메시지의-흐름&quot;&gt;3.1. 메시지의 흐름&lt;/h3&gt;

&lt;p&gt;HTTP 메세지는 메세지에 대한 메타 정보와 데이터로 이루어진 데이터의 블록입니다. HTTP 메세지는 클라이언트, 서버, 프록시 사이를 흐릅니다.&lt;/p&gt;

&lt;h4 id=&quot;311-메시지는-원-서버-방향을-인바운드로-하여-송신된다&quot;&gt;3.1.1. 메시지는 원 서버 방향을 인바운드로 하여 송신된다&lt;/h4&gt;

&lt;p&gt;인바운드, 아웃바운드는 DB서버를 열어주기 위해 방화벽을 설정해봤다면 한번쯤 마주쳐봤을 용어입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인바운드 :  HTTP의 요청 방향으로 가는 것 (클라이언트 -&amp;gt; 서버)&lt;/li&gt;
  &lt;li&gt;아웃바운드 : HTTP 요청이 온 방향(응답방향)으로 가는 것 (서버 -&amp;gt; 클라이언트)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;312-다운스트림으로-흐르는-메시지&quot;&gt;3.1.2. 다운스트림으로 흐르는 메시지&lt;/h4&gt;

&lt;p&gt;다운스트림, 업스트림은 인바운드, 아웃바운드와는 별개로 메세지가 흐르는 방향을 말합니다. 모든 메세지는 다운스트림으로 흐릅니다.&lt;/p&gt;

&lt;p&gt;예를들어, 아래 그림처럼 클라이언트의 요청이 프록시1, 프록시2, 프록시3을 거쳐 서버로 간다면, 인바운드에서 프록시2는 프록시1의 다운스트림이자 프록시3의 업스트림입니다.
 반대로 서버에서 클라이언트로 응답이가는 아웃바운드에선 프록시2는 프록시3의 다운스트림이자 프록시1의 업스트림이 됩니다.&lt;/p&gt;

&lt;p&gt;그림요망&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;32-메시지의-각-부분&quot;&gt;3.2. 메시지의 각 부분&lt;/h3&gt;

&lt;p&gt;메세지는 기본적으로 [ 시작줄 - 헤더 블록 - 본문 ] 으로 이루어져 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시작줄 : 메세지가 어떤 메세지인지를 알려줍니다. (요청인지 응답인지, 요청 및 응답의 상태는 어떤지, HTTP 버전이 무엇인지 등)&lt;/li&gt;
  &lt;li&gt;헤더 블록 : HTTP메세지에 대한 속성들을 가지고 있습니다. (본문의 길이, 인코딩 등..)&lt;/li&gt;
  &lt;li&gt;본문 : 실제 전송할 데이터가 담기는 부분이며, 없을 수도 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;시작줄과 헤더블록은 CRLF(Carriage Return + Line Feed)로 나뉘어집니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CR (Carriage Return) : 커서를 행의 맨 좌측으로 이동 (ASCII 13번이며, \r 라고도 표현함)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LF (Line Feed) : 커서를 아래 행으로 내림 (ASCII 10번이며, \n 라고도 표현함)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;HTTP명세에 등록된 시작줄과 헤더블록을 나누는 문자는 CRLF(\r\n)이지만 견고한 어플리케이션을 만들기 위해선 \n만으로도 시작줄과 헤더블록을 나누도록 해야 합니다. 오래되거나 잘못 만들어진 HTTP 어플리케이션들은 \r\n가 아닌 \n로 시작줄과 헤더블록을 구분하기 때문입니다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;321-메시지-문법&quot;&gt;3.2.1. 메시지 문법&lt;/h4&gt;

&lt;p&gt;요청 메세지의 형식은 다음과 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;메서드&gt; &lt;요청URL&gt; &lt;버전&gt;     GET /test/hi-there.txt HTTP/1.1
&lt;헤더&gt;                                          Accept: text/*
                                                     Host: www.joes-hardware.com

&lt;엔터티 본문=&quot;&quot;&gt;                             생략  
&lt;/엔터티&gt;&lt;/헤더&gt;&lt;/버전&gt;&lt;/요청URL&gt;&lt;/메서드&gt;
&lt;/blockquote&gt;

&lt;p&gt;응답 메세지의 형식은 다음과 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;버전&gt; &lt;상태코드&gt; &lt;사유 구절=&quot;&quot;&gt;  HTTP/1.0 200 OK
&lt;헤더&gt;                                             Content-type: text/plain
                                                         Content-length: 19

&lt;엔터티 본문=&quot;&quot;&gt;                                Hi, I'm message!
&lt;/엔터티&gt;&lt;/헤더&gt;&lt;/사유&gt;&lt;/상태코드&gt;&lt;/버전&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;메서드 : 클라이언트 입장에서 서버가 수행하길 바라는 동작 (GET, POST, PUT, DELETE …)&lt;/li&gt;
  &lt;li&gt;요청 URL : 요청 리소스의 URL 경로&lt;/li&gt;
  &lt;li&gt;버전 : 메세지에서 사용중인 HTTP 버전&lt;/li&gt;
  &lt;li&gt;상태코드 : 요청의 결과에 대한 상태를 설명하는 세자리 숫자.&lt;/li&gt;
  &lt;li&gt;사유 구절(reason - phrase) : 상태 코드를 설명하는 문구. 정해진 규칙은 없지만 정해진 상태코드의 의미와 맞아야 한다.&lt;/li&gt;
  &lt;li&gt;헤더 : 메세지의 속성들을 설명해주는 ‘이름:값’의 쌍들. 헤더들의 마지막은 빈줄(CRLF)로 끝내 엔터티 본문과 구분지어 준다.&lt;/li&gt;
  &lt;li&gt;엔터티 본문 : 메세지가 전달해야 할 데이터 블록. 생략 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;엔터티 본문이 생략되더라고 헤더의 마지막은 빈줄(CRLF)로 끝나야 합니다. &lt;strong&gt;하지만 많은 HTTP 어플리케이션들이 엔터티 본문이 없으면 헤더의 마지막에 CRLF를 빠뜨립니다. 이런 어플리케이션들과도 호환될 수 있게 HTTP 어플리케이션을 설계해야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;322-시작줄&quot;&gt;3.2.2. 시작줄&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;요청에서 시작줄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;메서드, 요청 URL, 버전으로 이루어져 있으며 서버에게 어떤 동작을 수행해줄 것인가를 알려줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;응답에서 시작줄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;버전, 상태코드, 사유구절로 이루어져 있으며 수행에 대한 결과를 알려줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메서드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP 명세에선 아래와 같은 9개의 요청 메서드를 정의하고 있습니다.(https://developer.mozilla.org/ko/docs/Web/HTTP/Methods 추가 참고) 하지만 &lt;strong&gt;모든 HTTP 어플리케이션이 아래의 모든 메서드를 구현한 것은 아니며, 어떤 HTTP 어플리케이션은 HTTP명세에 없는 새로운 메서드를 추가했을 수도 있습니다.(확장 메서드)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;메서드&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GET&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;서버에서 어떤 문서를 가져온다. 데이터를 받기만 하는 요청.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;HEAD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;GET메서드 요청과 동일한 응답을 요구하지만 응답의 엔터티 본문을 포함하지 않는다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;POST&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;요청 리소스에 필요한 데이터를 보낼때 쓰인다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PUT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;요청 메세지의 엔터티 본문을 서버에 저장한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DELETE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;특정 리소스를 삭제한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;CONNECT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;요청 리소스를 갖는 서버와 터널을 맺음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OPTIONS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;서버가 어떤 메서드를 수행할 수 있는지 체크한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TRACE&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;메세지가 여러 프록시를 거쳐 서버에 도달하는 과정을 추적한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PATCH&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;오청 리소스의 부분만 수정하는데 쓰인다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;상태코드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;요청의 처리결과를 3자리 숫자로 표현하며, 숫자의 가장 앞자리를 기준으로 처리결과의 분류가 나뉩니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;전체 범위&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;정의된 범위&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;분류&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100~199&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100~101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;정보&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;200~299&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;200~206&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;성공&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;300~399&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;300~305&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;리다이렉션&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;400~499&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;400~415&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;클라이언트 에러&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;500~599&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;500~505&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;서버 에러&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;사용가능한 범위에 비해 실제로 HTTP명세에 공식적으로 정의된 범위는 적습니다. 메서드와 마찬가지로 각각의 HTTP 어플리케이션에서 HTTP명세에 없는 새로운 코드를 정의할 수 있지만 코드의 분류에 맞게 정의하는 것이 바람직 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;사유 구절&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;상태 코드는 프로그램들이 읽기위한 데이터였다면 사유 구절은 사람들이 읽기위한 상태 코드를 설명하는 문구입니다. 따로 정의된 규칙은 없지만 상태코드를 설명할 수 있어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;버전 번호&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP 메세지를 보낸 어플리케이션이 어떤 버전의 HTTP를 따르는지를 알려줍니다. 두 가지를 유의해야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;버전 번호는 어플리케이션이 지원하는 가장 높은 버전의 HTTP를 알려주는 것이지 해당 HTTP메세지를 그 버전의 HTTP로 해석해 달라는 것이 아닙니다. 
예를들어, 응답이 HTTP/1.1로 온 것은 응답을 보낸 어플리케이션이 HTTP/1.1 까지 이해할 수 있다는 것이지 이 메세지를 HTTP/1.1로 해석해 달라는 것이 아닙니다.&lt;/li&gt;
  &lt;li&gt;버전 번호는 소수점이 아니라 [정수.정수] 입니다. HTTP/2.22 는 HTTP/2.3 보다 상위 버전입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;323-헤더&quot;&gt;3.2.3. 헤더&lt;/h4&gt;

&lt;p&gt;HTTP 명세에서 정의하는 헤더들이 있고 메서드, 상태코드와 마찬가지로 각 어플리케이션에서 새로운 헤더를 정의할 수 있습니다.
 헤더의 종류에 따라 아래와 같이 나뉠 수 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;분류&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;일반 헤더&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;요청, 응답 모두에서 쓰일 수 있는 헤더(ex - Date:Tue, 3 Oct 1997 …)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;요청 헤더&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;요청에 대한 부가정보를 제공하는 헤더(ex - Accept:text/html)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;응답 헤더&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;응답에 대한 부가정보를 제공하는 헤더(ex - Server: Tiki-Hut/1.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Entity 헤더&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;엔터티 본문에 대한 부가정보를 제공하는 헤더(ex - Content-Type: text/html)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;확장 헤더&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;각 어플리케이션이 정의한 HTTP 명세에 없는 헤더&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;헤더의 가독성을 위해 하나의 헤더를 개행할 수 있는데, 이때 아래 줄엔 하나의 스페이스 혹은 탭이 와야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Content-Length: 8572
Server: Test Server
	Version 1.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;324-엔터티-본문&quot;&gt;3.2.4. 엔터티 본문&lt;/h4&gt;

&lt;p&gt;HTTP메시지가 전송할 데이터이며 이미지, 비디오, HTML, 신용카드 트랜잭션, email 등 다양한 데이터를 포함할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;325-버전-09-메시지&quot;&gt;3.2.5. 버전 0.9 메시지&lt;/h4&gt;

&lt;p&gt;사실 지금까진 모드 HTTP/1.0 이상에 대해서만 알아봤습니다. 그 이전 버전인 HTTP/0.9의 메세지는 아래 그림과 같이 요청은 오직 요청 메서드와 URL만, 응답은 엔터티 본문만 존재합니다. HTTP/0.9는 나중에 맞닥드리게 되면 그때 추가로 살펴보는 것이 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;33-메서드&quot;&gt;3.3. 메서드&lt;/h3&gt;

&lt;p&gt;널리 사용되는 기본적인 메서드들에 대해 알아볼 것입니다. 다시 한 번 말씀드리지만 모든 어플리케이션이 모든 메서드들을 지원하는 것은 아닙니다. 웹 프레임워크를 사용할때 해당 웹 프레임워크는 어떤 메서드들을 지원하는지 아는게 중요할 것 같습니다.&lt;/p&gt;

&lt;h4 id=&quot;331-안전한-메서드safe-method&quot;&gt;3.3.1. 안전한 메서드(Safe Method)&lt;/h4&gt;

&lt;p&gt;Safe Method는 결과적으로 &lt;strong&gt;서버에 어떤 리소스의 변화도 줄 수 없는 메서드&lt;/strong&gt;들을 말합니다. 일반적으론 GET과 HEAD메서드가 Safe Method에 속합니다.&lt;/p&gt;

&lt;p&gt;하지만 Safe Method 자체가 Safe를 보장하진 않습니다. 그건 모두 우리 개발자에게 달렸습니다. HTTP에 대한 이해가 부족해 GET요청에도 리소스를 수정 및 삭제 하게 만든 어플리케이션이 있다면 조금 문제가 있는 어플리케이션일것 같습니다.&lt;/p&gt;

&lt;h4 id=&quot;332-get&quot;&gt;3.3.2. GET&lt;/h4&gt;

&lt;p&gt;서버에서 리소스를 가져오기 위해 사용됩니다. HTTP/1.1을 준수하기 위해 필요한 메서드중 하나입니다.&lt;/p&gt;

&lt;h4 id=&quot;333-head&quot;&gt;3.3.3. HEAD&lt;/h4&gt;

&lt;p&gt;GET과 동일하게 행동하지만 엔터티 본문을 포함하지 않습니다. 시작줄과 헤더만 가져와 아래와 같은 사항들을 알아 낼 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;리소스 전체를 가져오지 않고 리소스에 대한 정보를 알아냄(타입, 크기 등..)&lt;/li&gt;
  &lt;li&gt;리소스의 존재 여부를 알 수 있음&lt;/li&gt;
  &lt;li&gt;리소스의 변경 여부를 알 수 있음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;요청할 리소스의 크기가 큰 경우에 유용하게 사용할 수 있을 것 같습니다.&lt;/p&gt;

&lt;p&gt;HTTP/1.1 준수를 위해 필요한 메서드 중 하나이며, &lt;strong&gt;개발자들은 HEAD의 헤더가 GET의 헤더와 정확히 일치하도록 유의해하며 개발해야 합니다.&lt;/strong&gt;(웹 프레임워크에 다시 한 번 감사함을 느낍니다.)&lt;/p&gt;

&lt;h4 id=&quot;334-put&quot;&gt;3.3.4. PUT&lt;/h4&gt;

&lt;p&gt;PUT 메서드는 요청의 본문을 요청 URL 대로 서버에 저장하는 역할을 합니다. 이미 존재하는 URL이라면 수정을 합니다. 아래 그림과 같이 말이죠.&lt;/p&gt;

&lt;p&gt;그림 요망&lt;/p&gt;

&lt;h4 id=&quot;335-post&quot;&gt;3.3.5. POST&lt;/h4&gt;

&lt;p&gt;POST메서드는 서버에 입력 데이터를 전송하기 위해 설계 됐습니다. HTML을 다뤄봤다면 &amp;lt;form&amp;gt;태그에서 모두 본 적이 있을 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;336-trace&quot;&gt;3.3.6. TRACE&lt;/h4&gt;

&lt;p&gt;우리의 요청은 서버로 가기전에 여러개의 프록시들을 거칠 수 있습니다. 클라이언트의 입장에서 내가 보낸 요청이 서버에게 어떻게 받아들였는지를 알고 싶을때(프록시에서 요청이 수정될 수 있으므로) 사용하는 것이 TRACE 메서드입니다.&lt;/p&gt;

&lt;p&gt;TRACE 메서드는 요청의 목적지인 서버까진 일반적인 요청과 같이 진행됩니다. 서버에서 클라이언트로 응답을 돌려주는 과정에서 부터 loopback 진단이 시작됩니다. 아래 그림과 같이 응답이 오며 어떤 요청에 대한 응답인지를 기록해 클라이언트에서 서버로 가면서 요청들이 어떻게 수정됐는지 진단 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그림요망&lt;/p&gt;

&lt;p&gt;요청들의 기록은 응답의 엔터티 본문에 담겨 최종적으로 클라이언트에게 전달됩니다.&lt;/p&gt;

&lt;p&gt;TRACE메서드는 한 가지 취약점을 가지고 있습니다. 몇몇 프록시들은 자신이 받은 요청 메서드에 따라 다르게 처리하기도 합니다. 예를들어 어떤 프록시는 POST요청은 바로 서버로 전달하지만 GET 요청은 웹 캐시 프록시로 먼저 보냅니다. 하지만 TRACE메서드를 사용하면 이와 같은 처리를 하지 못합니다.&lt;/p&gt;

&lt;p&gt;TRACE 메서드 자체로는 해당 요청이 POST처럼 처리될지, GET처럼 처리될 지 알려주는 메커니즘을 제공하지 않습니다. 이를 어떻게 다룰 지는 각 프록시들이 결정하게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;337-options&quot;&gt;3.3.7. OPTIONS&lt;/h4&gt;

&lt;p&gt;OPTIONS 메소드는 간단합니다. 웹 서버에게 어떤 종류의 메서드를 지원하는 지 물어보는 역할을 합니다. 아래 그림과 같이 말이죠.&lt;/p&gt;

&lt;h4 id=&quot;338-delete&quot;&gt;3.3.8. DELETE&lt;/h4&gt;

&lt;p&gt;DELETE 메서드는 말 그대로 리소스의 삭제를 요청합니다. 하지만 DELETE 메서드를 보냈다고 해서 리소스의 삭제가 보장되는건 아닙니다.&lt;/p&gt;

&lt;h4 id=&quot;339-확장-메서드&quot;&gt;3.3.9. 확장 메서드&lt;/h4&gt;

&lt;p&gt;확장 메서드는 HTTP 명세에 정의되지 않은 메서드입니다. 아래는 확장 메서드의 사례로, WebDAV HTTP 확장입니다.(19장에서 더 자세히 알아볼 것입니다.)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;메서드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;LOCK&lt;/td&gt;
      &lt;td&gt;사용자가 리소스를 잠글 수 있게 해준다. 예를 들어, 문서를 편집하는 동안 다른 사람이 동시에 같은 문서를 편집하지 못하도록 문서를 잠글 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MKCOL&lt;/td&gt;
      &lt;td&gt;사용자가 문서를 생성할 수 있게 해준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COPY&lt;/td&gt;
      &lt;td&gt;서버에 있는 리소스를 복사한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOVE&lt;/td&gt;
      &lt;td&gt;서버에 있는 리소스를 옮긴다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;34-상태-코드&quot;&gt;3.4. 상태 코드&lt;/h3&gt;

&lt;h4 id=&quot;341-100199-정보성-상태-코드&quot;&gt;3.4.1. 100~199: 정보성 상태 코드&lt;/h4&gt;

&lt;p&gt;HTTP/1.1 부터 도입되어서 실제로 정의된 코드는 100, 101 밖에 없습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;상태코드&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;사유 구절&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;의미&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Continue&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;요청의 시작 부분 일부가 받아들여졌으며, &lt;br /&gt;클라이언트는 나머지를 계속 이어서 보내야 함을 의미한다. &lt;br /&gt;이것을 보낸 후, 서버는 반드시 요청을 받아 응답해야 한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Switching Protocols&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;클라이언트가 Upgrade 헤더에 나열한 것중 하나로, &lt;br /&gt;서버가 프로토콜을 바꾸었음을 의미한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;101 코드는 간단하다. 하지만 100 코드는 더 자세히 알아볼 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;100 코드는 클라이언트에서 서버로 엔터티 본문을 전송하기 전에, 서버가 그 엔터티 본문을 받아들일 것인지 확인하는 작업을 최적화 하기 위해 도입됐습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클라이언트 - 100 Continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;상태코드는 응답 메세지에서 볼 수 있는 것입니다. 클라이언트 측에서 100 Continue 응답을 받고 싶다면 “Expect : 100-continue” 헤더를 보내면 됩니다. “Expect : 100-continue” 헤더를 받은 서버는 클라이언트쪽에서 엔터티를 보낼 것이라 생각하게 됩니다.&lt;/p&gt;

&lt;p&gt;서버가 100 Continue를 보냈다면 클라이언트는 엔터티 전송을 시작할 것입니다. 하지만 100코드는 HTTP/1.1 부터 도입된 코드이기 때문에 &lt;strong&gt;아직 서버 쪽에서 100 Continue를 보내지 못할 수도 있습니다.&lt;/strong&gt; 이때 클라이언트는 계속 기다리는게 아니라 &lt;strong&gt;약간의 타임아웃 이후 100 Continue가 없다면 그냥 엔터티를 전송해야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버 - 100 Continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버가 “Expect : 100-continue” 헤더를 받는다면, 100 Continue 혹은 에러 코드로 응답을 해야 합니다.&lt;/p&gt;

&lt;p&gt;서버가 100 Continue를 보내기 전에 클라이언트쪽에서 엔터티의 일부나 전체를 받았다면 100 Continue를 보낼 필요 없이 요청에 대한 최종 응답을 보내야 합니다.&lt;/p&gt;

&lt;p&gt;서버가 Expect 요청을 받았지만 엔터티 본문을 읽기 전에 요청을 끝내기로 결정했다면 서버는 그냥 응답을 보내고 연결을 닫아서는 안됩니다. 그렇게 하면 클라이언트가 응답을 받을 수 없습니다.(이 부분은 4장을 읽고 다시 부연 설명하겠습니다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프록시 - 100 Continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라이언트와 서버 사이엔 프록시가 있을 수 있습니다. 그럼 “Expect : 100-continue” 헤더 요청을 프록시가 받는다면 어떻게 될까요?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;next-hop 서버가 HTTP/1.1 을 따르거나 어떤 버전을 따르는지 모를 때 : “Expect : 100-continue” 헤더 요청을 포함해 다음으로 전달.&lt;/li&gt;
  &lt;li&gt;next-hop 서버가 HTTP/1.1 이전 버전의 HTTP를 따를 때 : 417 Expectation Failed 에러를 뱉어야 함&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그런데, 클라이언트는 Expect 요청을 보내지 않았지만 프록시가 클라이언트를 대신해 서버로 “Expect : 100-continue” 헤더를 포함시켜 요청을 보낼 수도 있습니다. 이때 프록시가 100 Continue 응답을 받았더라도 100 Continue응답을 클라이언트에 전하면 안됩니다. 클라이언트는 100 Continue응답을 어떻게 다룰 지 모를수 있기 때문이죠.&lt;/p&gt;

&lt;h4 id=&quot;342-200299-성공-상태-코드&quot;&gt;3.4.2. 200~299: 성공 상태 코드&lt;/h4&gt;

&lt;p&gt;200번대 상태코드는 요청이 성공했음을 나타내고, 요청의 종류에 따라 성공 코드가 달라집니다.&lt;/p&gt;

&lt;p&gt;7가지의 성공 상태 코드가 정의되어 있고 양이 많은 관계로 [여기][]에 따로 기록해두겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;343-300399-리다이렉션-상태-코드&quot;&gt;3.4.3. 300~399: 리다이렉션 상태 코드&lt;/h4&gt;

&lt;p&gt;300번대 상태코드는 리다이렉션을 뜻하면 다음과 같은 경우에 사용됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트가 요청한 리소스가 옮겨지거나 변경됐을 때 요청한 리소스를 대신할 다른 대안 응답을 제시
    &lt;ul&gt;
      &lt;li&gt;Location 헤더에 새로운 위치를 담아 응답하며, 대부분의 브라우저는 Location헤더를 읽어 옮겨진 위치로 다시 요청한다. (ex - www.java.sun.com 으로 요청을 보내면 301 코드와 함께 Location: http://www.oracle.com/technetwork/java/index.html 헤더가 담겨오며, 브라우저는 Location으로 리다이렉트 한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리소스에 대한 클라이언트의 로컬 복사본이 원래 서버와 비교했을 때 유효한지 확인 할 때
    &lt;ul&gt;
      &lt;li&gt;요청할 때 If-Modified-Since: ~~ 같은 헤더와 같이 사용해 해당 시간 이후에 수정된 리소스면 가져올 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7가지의 라다이렉션 상태 코드가 정의되어 있고 [여기][]에 따로 기록해두겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;344-400499-클라이언트-에러-상태-코드&quot;&gt;3.4.4. 400~499: 클라이언트 에러 상태 코드&lt;/h4&gt;

&lt;p&gt;클라이언트측의 잘못으로 리소스를 가져오지 못할때를 알려주는 상태코드 입니다. 가장 흔한 400번대 에러는 존재하지 않는 URL을 요청하는 것으로 404 Not Found는 개발을 한다면 누구나 마주쳤을법한 에러코드 입니다.&lt;/p&gt;

&lt;p&gt;로그인등의 권한문제로 인해 발생하는 401 Unauthorized 역시 종종 볼 수 잇는 에러코드 입니다.&lt;/p&gt;

&lt;p&gt;18개의 에러코드가 정의되어 있으며 [여기][]에 기록해두겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;345-500599-서버-에러-상태-코드&quot;&gt;3.4.5. 500~599: 서버 에러 상태 코드&lt;/h4&gt;

&lt;p&gt;500번대 에러는 반대로 서버측의 잘못으로 요청을 처리하지 못하는 경우입니다. 서버 자체의 문제일 때도 있고 프록시, 게이트웨이 같은 서버의 보조 구성요소에서 발생한 에러일 수도 있습니다.&lt;/p&gt;

&lt;p&gt;6가지의 에러코드가 정의되어 있고 [여기][]에 기록해두었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;35-헤더&quot;&gt;3.5. 헤더&lt;/h3&gt;

&lt;p&gt;앞서 말했듯이 헤더는 메세지의 속성을 설명해주며 아래와 같이 크게 5가지로 분류 됩니다.
|    분류     |                             설명                             |
| :———: | :———————————————————-: |
|  일반 헤더  | 요청, 응답 모두에서 쓰일 수 있는 헤더(ex - Date:Tue, 3 Oct 1997 …) |
|  요청 헤더  | 요청에 대한 부가정보를 제공하는 헤더(ex - Accept:text/html)  |
|  응답 헤더  | 응답에 대한 부가정보를 제공하는 헤더(ex - Server: Tiki-Hut/1.0) |
| Entity 헤더 | 엔터티 본문에 대한 부가정보를 제공하는 헤더(ex - Content-Type: text/html) |
|  확장 헤더  |        각 어플리케이션이 정의한 HTTP 명세에 없는 헤더        |&lt;/p&gt;

&lt;h4 id=&quot;351-일반-헤더&quot;&gt;3.5.1. 일반 헤더&lt;/h4&gt;

&lt;p&gt;일반 헤더는 요청, 응답 모두에서 유용한 기본적인 속성들을 가리킵니다.&lt;/p&gt;

&lt;p&gt;일반 캐시 헤더 : HTTP/1.0에서 도입된 헤더로, 요청시 마다 매번 서버로 가지 않게 로컬 복사본으로 캐시할 수 있게 해주는 헤더입니다. 최신 HTTP버전엔 매우 많은 캐시 헤더를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;대표적인 헤더들은 [여기][]에 모아뒀습니다.&lt;/p&gt;

&lt;h4 id=&quot;352-요청-헤더&quot;&gt;3.5.2. 요청 헤더&lt;/h4&gt;

&lt;p&gt;요청헤더는 요청시에만 사용되고 서버가 클라이언트에게 더 나은 응답을 주기 위해 사용됩니다.&lt;/p&gt;

&lt;p&gt;Accept 관련 헤더 : Accept, Accept-Charset, Accept-Language 등의 헤더를 통해 서버에게 클라이언트 자신의 선호와 능력을 알려줄 수 있습니다.&lt;/p&gt;

&lt;p&gt;조건부 요청 헤더 : 앞서 100 Continue 코드에서 언급된 Expect 헤더나 300 코드에서 언급된 If-Modified-Since 헤더 같이 클라이언트는 조건을 붙여 서버에게 요청을 할 수 있습니다. 이때 사용 되는 헤더가 조건부 헤더 입니다.&lt;/p&gt;

&lt;p&gt;요청 보안 헤더 : HTTP는 자체적으로 간단한 인증 요구/응답 체계를 가지고 있습니다. 이는 HTTP 트랜잭션을 더 안전하게 만들어 줍니다. 14장에서 자세히 알아볼 것입니다. Authorization, Cookie와 같은 헤더가 이때 사용되는 헤더 입니다.&lt;/p&gt;

&lt;p&gt;프록시 요청 헤더 : 프록시가 많아지며 프록시와 관련한 헤더 역시 등장했습니다. 6장에서 자세히 알아봅니다. Max-Forwards, Proxy-Connection 등의 헤더가 있습니다.&lt;/p&gt;

&lt;p&gt;대표적인 헤더들은 [여기][]에 모아뒀습니다.&lt;/p&gt;

&lt;h4 id=&quot;353-응답-헤더&quot;&gt;3.5.3. 응답 헤더&lt;/h4&gt;

&lt;p&gt;응답 헤더는 응답시에 사용되어 클라이언트가 응답을 다루기 쉽게 도와줍니다.&lt;/p&gt;

&lt;p&gt;협상 헤더 : 서버에 프랑스어, 독일어로 번역된 같은 HTML문서가 있는 것과 같이 한 요청에 대해 여러 선택지가 있을 경우 HTTP/1.1은 그것들 중 어떤 표현을 택할 것인지 협상하도록 지원해준다. 17장에서 자세히 살펴보며,  Accept-Ranges, Vary와 같은 헤더가 사용됩니다.&lt;/p&gt;

&lt;p&gt;응답 보안 헤더 : 요청헤더에서 요청 보안 헤더가 있었듯이 응답에서도 응답 보안헤더가 있습니다. 14장에서 자세히 살펴보며 Proxy-Authenticate, Set-Cookie와 같은 헤더가 있습니다.&lt;/p&gt;

&lt;p&gt;대표적인 헤더들은 [여기][]에 모아뒀습니다.&lt;/p&gt;

&lt;h4 id=&quot;354-엔터티-헤더&quot;&gt;3.5.4. 엔터티 헤더&lt;/h4&gt;

&lt;p&gt;엔터티 헤더는 요청, 응답 모두 등장할 수 있으며 엔터티에 대한 광범위한 부가정보를 제공합니다.&lt;/p&gt;

&lt;p&gt;콘텐츠 관련 헤더 : Content-Base, Content-Language, Content-Location 과 같이 콘텐츠 헤더는 콘텐츠에 대한 구체적인 정보를 제공해줍니다.&lt;/p&gt;

&lt;p&gt;엔터티 캐싱 헤더 : 일반 헤더에서 언급된 일반 캐싱 헤더는 언제, 어떻게 캐시가 되어야 하는지 알려줬다면, 엔터티 캐싱 헤더는 리소스의 사본이 유효한지, 캐시된 리소스가 더 이상 유효하지 않게 되는 시점은 언제인지 등 엔터티 캐싱에 대한 정보를 제공합니다. 7장에서 자세히 살펴볼 것입니다.&lt;/p&gt;

&lt;p&gt;대표적인 헤더들은 [여기][]에 모아뒀습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;ajax 보낼때 말곤 헤더는 관찰만 했지 직접 조작해보진 않았습니다. 이렇게 헤더의 종류가 많고 다양하다니! 그리고 3장째 보고 있는데 가장 무서운 점은 모두 뒷장에서 더 자세히 설명해준다는 것입니다. (얼마나 자세히 설명해주시려고… :cry:)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>URL과 리소스</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C2/"/>
   <updated>2020-03-09T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드2</id>
   <content type="html">
&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;p&gt;앞 장에서 리소스, URI, URL, URN에 대해 간략히 살펴봤었습니다. 이번 장에선 URL과 리소스에 대해 자세히 알아볼 것입니다.&lt;/p&gt;

&lt;p&gt;특정한 하나를 식별해야 하는 것에는 모두 식별하는 체계가 있습니다. 특정한 집을 식별하기 위해 사용되는 주소, 책을 식별하기 위한 ISBN번호, 사람을 식별하기 위한 주민등록번호 등…&lt;/p&gt;

&lt;p&gt;URI는 인터넷 상에서 리소스를 식별하기 위한 체계입니다. 그리고 같은 주소를 식별하는데 지번주소, 도로명주소가 있듯이 리소스를 식별하는데에도 URL과 URN이 있습니다.&lt;/p&gt;

&lt;p&gt;URN은 아직 개발중이고 대중적으로 사용되지 않기 때문에 URL에 대해서 집중적으로 알아볼 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;21-인터넷의-리소스-탐색하기&quot;&gt;2.1. 인터넷의 리소스 탐색하기&lt;/h3&gt;
&lt;p&gt;몇 가지 URL의 사례를 살펴보겠습니다.
 1) http://www.joes-hardware.com/seasonal/index-fall.html
 여기서 http는 ‘스킴’이라고 합니다. 리소스에 접근하는 방법을 말해줍니다.
 www.joes-hardware.com 은 서버의 위치 입니다. 리소스가 어느 서버에 호스팅 되었는지 알려줍니다.
 /seasonal/index-fall.html은 서버 내의 리소스 경로 입니다.&lt;/p&gt;

&lt;p&gt;2) mailto:president@whitehouse.gov
 위 URL의 mailto는 이메일 전송 프로토콜 입니다. 다른 URL들과는 형식이 조금 다릅니다.&lt;/p&gt;

&lt;p&gt;3) ftp://ftp.lots-o-books.com/pub/complete-price-list.xls
 ftp(File Transfer Protocol)는 파일 전송 프로토콜이고 ftp.lots-o-books.com는 서버 주소를, /pub/complete-price-list.xls는 서버 내 리소스 위치 입니다.&lt;/p&gt;

&lt;p&gt;4) rtsp://www.joes-hardware.com:554/interview/cto_video
 rtsp(Real Time Streaming Protocol)는 스트리밍 전송 프로토콜입니다.&lt;/p&gt;

&lt;p&gt;대부분의 URL은 ‘스킴://서버위치/리소스경로’로 이루어져 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;211-url이-있기-전-암흑의-시대&quot;&gt;2.1.1. URL이 있기 전 암흑의 시대&lt;/h4&gt;
&lt;p&gt;‘스킴://서버위치/리소스경로’의 어느정도 통일된 URL을 사용하게 된건 그리 오래되지 않았습니다. URL이 있기 이전엔 애플리케이션마다 리소스를 찾는 방법이 매우 다양했습니다.&lt;/p&gt;

&lt;p&gt;책에 나온 사례를 보겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;URL이 있기 전에 친구와 complete-catalog.xls이라는 파일을 공유하려고 했다면 이렇게 말해야 했을 것이다. “ftp.joes-hardware.com에 FTP로 접속해. 익명 사용자로 로그인한 다음 비밀번호로 네 이름을 입력해. pub 디렉토리로 이동한 다음, 바이너리 형식으로 전환해. 이제 complete-catalog.xls란 이름의 파일을 너의 로컬 파일 시스템에 내려 받은 다음 보면 될 거야.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;URL이 없던 시절엔 이렇게 직접 서버에 커넥션을 맺고, 디렉터리를 찾아서 리소스를 받아왔다고 합니다. URL과 웹 브라우저가 발달된 지금은 아래와 같이 진행됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 복잡한 설명 대신에, 친구에게 브라우저에서 “ftp://frp.lots-o-books.com/pub/complete-catalog.xmls 를 열어봐” 라고 말하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다시 한 번 선배 개발자님들이 존경스러워 지는 순간입니다.&lt;/p&gt;

&lt;p&gt;그리고 사실 요즘 웹 브라우저를 사용한다면 ftp를 사용할 필요도 없습니다. 저도 개발을 시작하기 전엔 URL에 http, https 말곤 다른 프로토콜이 들어가는걸 본적이 없으니까요. http 프로토콜로 파일 다운을 요청해도 1장에서 설명했고 뒤에서 설명할 게이트웨이, 프록시 등이  ftp 통신을 대신 해줍니다.&lt;/p&gt;

&lt;h3 id=&quot;22-url-문법&quot;&gt;2.2. URL 문법&lt;/h3&gt;
&lt;p&gt;URL의 문법은 스킴(앞서 본 http, ftp, mailto 등..)에 따라 달라집니다. 하지만 대부분 스킴의 URL문법은 일반적인 URL 문법을 따릅니다. 몇몇 스킴을 제외한다면 말이죠.&lt;/p&gt;

&lt;p&gt;일반적인 URL 문법은 아래와 같습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;스킴&gt;://&lt;사용자이름&gt;:&lt;비밀번호&gt;@&lt;호스트&gt;:&lt;포트&gt;/&lt;경로&gt;;&lt;파라미터&gt;?&lt;질의&gt;#&lt;프래그먼트&gt;
&lt;/프래그먼트&gt;&lt;/질의&gt;&lt;/파라미터&gt;&lt;/경로&gt;&lt;/포트&gt;&lt;/호스트&gt;&lt;/비밀번호&gt;&lt;/사용자이름&gt;&lt;/스킴&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 &amp;lt; &amp;gt; 를 컴포넌트라고 부릅니다. 위 모든 컴포넌트를 모두 갖는 URL 스킴은 거의 없습니다.&lt;/p&gt;

&lt;p&gt;각 컴포넌트에 대해 자세히 알아봅시다.&lt;/p&gt;

&lt;h4 id=&quot;221-스킴-사용할-프로토콜&quot;&gt;2.2.1. 스킴: 사용할 프로토콜&lt;/h4&gt;
&lt;p&gt;스킴은 리소스에 접근하는 방법을 알려주는 아주 중요한 컴포넌트입니다. 스킴은 대소문자를 가리지 않고 나머지 부분들과 ‘ : ‘로 구분합니다.&lt;/p&gt;

&lt;h4 id=&quot;222-호스트와-포트&quot;&gt;2.2.2. 호스트와 포트&lt;/h4&gt;
&lt;p&gt;리소스를 찾기 위해선 리소스를 갖고 있는 컴퓨터와 그 컴퓨터 내에 서버가 어딘인지 알아야 합니다.
 호스트 컴포넌트가 리소스를 가지고 있는 컴퓨터(장비)를 가리키고, 포트 컴포넌트가 컴퓨터 내에 어느 서버인지를 가리킵니다. 
 TCP 프로토콜을 사용하는 HTTP의 기본 포트는 80입니다.&lt;/p&gt;

&lt;h4 id=&quot;223-사용자-이름과-비밀번호&quot;&gt;2.2.3. 사용자 이름과 비밀번호&lt;/h4&gt;
&lt;p&gt;일반인이나 저와 같이 이제 막 개발에 입문한 개발자라면 URL에 id와 pw가 들어가는 걸 본적이 없을겁니다. 
 어느 스킴에서 사용자 이름이나 비밀번호를 요구하지만 입력하지 않은 경우 사용자 이름엔 기본 사용자이름인 ‘anonymous’ 가 들어가고, 비밀번호는 브라우저마다 가지고 있는 기본 비밀번호가 입력됩니다.(크롬 - chrome@example.com, IE - IEUser) 
 따라서 아래와 같은 URL들이 가능합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ftp://ftp.prep.ai.mit.edu/pub/gnu
ftp://anonymous@ftp.prep.ai.mit.edu/pub/gnu
ftp://anonymous:my_password@ftp.prep.ai.mit.edu/pub/gnu
http://joe:joespasswd@www.joes-hardware.com/sales_info.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용자이름 컴포넌트와 비밀번호 컴포넌트는 ‘ : ‘로 구분하고 비밀번호 컴포넌트와 호스트 명 컴포넌트는 ‘@’로 구분합니다. 위의 URL들을 보면 우리가 잘 알고있는 메일 주소와 비슷하게 생겼습니다.&lt;/p&gt;

&lt;p&gt;우리가 알고있는 메일 주소도 사실은 URL 스킴입니다. ntz4kiseung@gmail.com 제 메일주소입니다. 여기서 ntz4kiseung이 사용자명, 비밀번호 컴포넌트는 생략되고 ‘@’로 비밀번호와 호스트를 구분해줍니다. 그리고 제 메일과 관련한 리소스들을 가지고 있는 서버는 gmail.com이 되는 겁니다.&lt;/p&gt;

&lt;h4 id=&quot;224-경로&quot;&gt;2.2.4. 경로&lt;/h4&gt;
&lt;p&gt;URL 경로는 리소스가 서버 내 어디에 위치해 있는지를 지정합니다. 폴더 디렉터리를 생각하면 쉬울 것 같습니다. 각 경로내 디렉토리는 ‘ / ‘로 각각의 경로 조각으로 나뉩니다. 각 경로조각은 각각 파라미터를 가질 수 있습니다.&lt;/p&gt;

&lt;p&gt;윈도우에서 사용하는 백슬래쉬 ‘ \ ‘가 아니라 그냥 슬래쉬 ‘ / ‘임을 한 번더 각인합시다. 
 여담으로 첫 프로젝트에 나갔을때 윈도우 환경인 로컬 서버에서 파일 저장 경로를 ‘ \ ‘로 지정해 ‘folder1 &amp;gt; folder2 &amp;gt; folder3 &amp;gt; file1.txt’ 와 같은 디렉토리에 파일이 저장되게 해뒀었습니다. 그 후에 팀원들이 공동으로 사용하는 리눅스 기반의 개발서버에 올려놓으니까 원래 구성해놓은 디렉토리 구조를 따라가는게 아니라  ‘folder1\folder2\folder3'라는 이름의 폴더가 생기고 그 안에 file1.txt가 만들어 졌었습니다.&lt;/p&gt;

&lt;h4 id=&quot;225-파라미터&quot;&gt;2.2.5. 파라미터&lt;/h4&gt;
&lt;p&gt;웹 서비스가 방대해지면 단순히 호스트명, 포트, 리소스 경로만 가지고는 리소스들을 특정하기 힘들어 집니다. 이때 서버는 경로 안에서 더 상세하게 리소스를 특정하기 위해 파라미터들을 요구할 수 있습니다. 
 파라미터는 경로와 ‘ ; ‘ 로 구분되며 {name}={value}의 형태로 전달됩니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ftp://prep.ai.mit.edu/pub/gnu;type=d&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 사례에서 type이 name, d가 value인 type=d 파라미터가 사용됐습니다.&lt;/p&gt;

&lt;p&gt;2.2.4.에서 말했듯이 경로조각 마다 파라미터가 사용될 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://www.joes-hardware.com/hammers;sale=false/index.html;graphics=true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;hammers경로 조각에 ‘sale=false’ 파라미터가 사용됐고 index.html 경로조각에 ‘graphics=true’ 파라미터가 사용됐습니다.&lt;/p&gt;

&lt;h4 id=&quot;226-질의-문자열query-string&quot;&gt;2.2.6. 질의 문자열(Query String)&lt;/h4&gt;
&lt;p&gt;사실 이전에 웹을 배울때 URL에서 리소스 다음 ? 뒤에 오는 부분을 ‘파라미터’라고 부르곤 했습니다. 책을 보면서 다시 용어를 제대로 확립해야 할것 같습니다. parameter는 2.2.5. 에서 본 ‘ ; ‘ 로 구분되는게 파라미터고 파라미터라고 편하게 부르면서 사용하던 ‘ ? ‘ 뒤 name=value쌍이 Query String이었습니다.&lt;/p&gt;

&lt;p&gt;Query String은 말그대로 Query를 사용하는 데이터베이스 기반의 서비스에서 많이 사용됩니다. 요청받을 리소스 형식의 범위를 좁히기 위해 사용됩니다. 게시판에서 글 하나를 선택시 하나의 글을 지정할때, 게시판 조회시 필터 항목들을 걸어줄때 사용하곤 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://www.joes-hardware.com/inventory-check.cgi?item=12731
http://www.joes-hardware.com/inventory-check.cgi?item=12731&amp;amp;color=blue&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Query String끼리 ‘ &amp;amp; ‘로 연결해 여러개의 Query String을 보낼 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;227-프래그먼트&quot;&gt;2.2.7. 프래그먼트&lt;/h4&gt;

&lt;p&gt;HTML같은 형식의 리소스는 더 작은 단위로 나뉠 수 있습니다. 전체 리소스 중 특정 부분을 가리키기 위해 사용하는 것이 프래그먼트 컴포넌트입니다.  ‘#’으로 연결되어 사용됩니다. 아래와 같이&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://www.joes-hardware.com/tools.html/#drills&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;모든 tool들을 보여주는 tools.html 리소스에서 드릴 부분만 #drill로 특정했습니다.&lt;/p&gt;

&lt;p&gt;프래그먼트에서 주의할 점은 클라이언트쪽에서 프래그먼트를 서버로 보내지 않는다는 것입니다. 온전한 HTTP 객체를 요청 및 응답받은 이후에 웹 클라이언트 어플리케이션쪽에서 프래그먼트에 맞는 리소스의 일부분만 사용자에게 보여줍니다. 브라우저는 정말 많은 일을 하는 것 같습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;23-단축-url&quot;&gt;2.3. 단축 URL&lt;/h3&gt;

&lt;p&gt;단축 URL은 사용하는 웹 클라이언트 프로그램에 따라 지원할 수도 있고 안할 수도 있습니다. 단축 URL은 사용자가 URL을 다루기 쉽게 하기 위해 사용됩니다.&lt;/p&gt;

&lt;h4 id=&quot;231-상대-url&quot;&gt;2.3.1. 상대 URL&lt;/h4&gt;

&lt;p&gt;상대 URL은 웹 페이지를 제작해본 경험이 있다면 자연스럽게 써봤을 것이다. http://www.servername.com/ 등 앞부분을 생략하고 리소스 부분만 기술한 URL입니다.&lt;/p&gt;

&lt;p&gt;상대 URL을 사용하면 유지보수에 용이해진다. html 문서 안에서 이미지를 삽입할 때&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img path=&quot;http://www.servername.com/images/img1.png&quot; /&gt;
&lt;img path=&quot;http://www.servername.com/images/img2.png&quot; /&gt;
&lt;img path=&quot;http://www.servername.com/images/img3.png&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 식으로 지정해 둔다면 후에 이미지 리소스들을 /images에서 /public/images로 옮겨야 할 때 혹은 도메인 네임을 servername.com에서 server.com으로 옮길때 위 코드를 모두 수정해줘야 할 것입니다. 하지만&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img path=&quot;/images/img1.png&quot; /&gt;
&lt;img path=&quot;/images/img2.png&quot; /&gt;
&lt;img path=&quot;/images/img3.png&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같이 상대 URL을 사용한다면 Base URL만 바꿔주면 다시 제대로 리소스를 찾아올 수 있습니다.&lt;/p&gt;

&lt;p&gt;상대 URL을 사용하기 위해선 Base URL을 알아내야 한다. Base URL은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;리소스에서 명시적으로 지시 : &amp;lt; BASE &amp;gt; HTML 태그를 통해&lt;/li&gt;
  &lt;li&gt;리소스를 포함하고 있는 Base URL : 상대 URL이 사용된 리소스를 포함하는 상위 리소스의 Base URL(위의 예시에선 &amp;lt; img &amp;gt; 태그가 사용된 html 문서의 Base URL)&lt;/li&gt;
  &lt;li&gt;Base URL이 없는 경우 : 절대 URL만으로 이루어진 경우 혹은 불완전하거나 깨진 URL&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위와 같은 방법으로 구해집니다.&lt;/p&gt;

&lt;p&gt;Base URL과 상대 URL을 알았다면 둘을 조합해 실제 요청할 절대 URL 경로를 알아내야 합니다. 단순히 붙이면 될 거라 생각하지만(실제로 거진 잘 될 것 같지만) 상대 URL을 절대 URL로 변환하는 알고리즘이 공식적으로 존재합니다. 그 알고리즘은 RFC1808에서 최초 제안되고 RFC2396에서 포함되었습니다. 하단의 사진과 같은 알고리즘인데 필요하면 추후에 확인해도 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;사진 넣기&lt;/p&gt;

&lt;h4 id=&quot;232-url-확장&quot;&gt;2.3.2. URL 확장&lt;/h4&gt;

&lt;p&gt;URL 확장은 웹 브라우저마다 제공해주는 범위와 방식이 다릅니다. 크게 호스트명 확장, 히스토리 확장으로 나뉠 수 있습니다.&lt;/p&gt;

&lt;p&gt;호스트명 확장 : 호스트명 yahoo를 입력하면 웹 브라우저에서 www.과 .com을 붙여 완성된 www.yahoo.com을 만들어주는 방식입니다. 요즘 브라우저들에선 url입력창이 각 브라우저의 검색창 역할을 하므로 호스트명 확장은 요즘엔 꽤 보기 힘들어진 것 같습니다.&lt;/p&gt;

&lt;p&gt;히스토리 확장 : 과거에 사용자가 방문했던 기록을 토대로 URL을 완성해줍니다. 제가 쓰는 크롬 브라우저에선 URL 창에 y만 쳐도 www.youtube.com이 완성되고 n만 눌러도 www.netflix.com이 완성됩니다. 개인적으로 네이버에 접속하고 싶은데 넥플릭스에 접속되서 가끔 불편함을 느낍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;24-안전하지-않은-문자shady-characters&quot;&gt;2.4. 안전하지 않은 문자(Shady Characters)&lt;/h3&gt;

&lt;p&gt;컴퓨터 시스템은 영어 중심으로 발달해왔기 때문에 기본 문자 집합역시 US - ASCII가 대부분이었습니다. 알파벳과 일부 특수문자만을 가지고 있는 작은 문자 집합 입니다.&lt;/p&gt;

&lt;p&gt;하지만 US - ASCII 문자열이라고 해서 모두가 URL에 사용될 수 있는 것은 아니었습니다. 왜냐하면 URL의 설계자들은 다음과 같은 사항들을 고민했는데&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;어떤 인터넷 프로토콜과도 호환이 되어야 한다.&lt;/li&gt;
  &lt;li&gt;정보가 유실될 위험 없이 URL을 전송해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위와 같은 제약사항들을 만족시키려다 보니 URL에 사용될 수 없는 안전하지 않은 문자들이 생겼습니다. 특정 프로토콜에서 전송시 제거하는 문자, URL 컴포넌트를 구분하는 등 URL에서 이미 특정 기호로 쓰이기 위해 예약된 문자들이 그것들입니다. 아래의 표가 URL에 그대로 사용되지 못하는 문자열들입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;문자&lt;/th&gt;
      &lt;th&gt;선전 및 제한&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td&gt;인코딩된 문자에 사용할 이스케이프 토큰으로 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/&lt;/td&gt;
      &lt;td&gt;경로 컴포넌트에 있는 경로 세그먼트를 나누는 용도로 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;경로 컴포넌트에서 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;..&lt;/td&gt;
      &lt;td&gt;경로 컴포넌트에서 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;프래그먼트의 구획 문자로 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;?&lt;/td&gt;
      &lt;td&gt;질의 문자열의 구획 문자로 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;;&lt;/td&gt;
      &lt;td&gt;파라미터의 구획 문자로 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:&lt;/td&gt;
      &lt;td&gt;스킴, 사용자이름/비밀번호, 호스트/포트의 구획 문자로 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$, +&lt;/td&gt;
      &lt;td&gt;선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@ &amp;amp; =&lt;/td&gt;
      &lt;td&gt;특정 스킴에서 특별한 의미가 있기 때문에 선점&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{ } | \ · [ ] `&lt;/td&gt;
      &lt;td&gt;게이트웨이와 같은 여러 전송 에이전트에서 불안전하게 다루기 때문에 제한됨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt; &amp;gt; “&lt;/td&gt;
      &lt;td&gt;안전하지 않음. 웹 문서에서 URL을 구분지어 표시하듯이,&lt;br /&gt; URL 범위 밖에서 역할이 있는 문자이기 때문에 반드시 인코딩 해야 한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;241-url-문자-집합&quot;&gt;2.4.1. URL 문자 집합&lt;/h4&gt;

&lt;p&gt;하지만 위와 같은 문자열을 URL에 포함해야 하는 경우도 생겼고, URL이 특정 이진 데이터를 포함해야 하는 경우도 생겼으며, 컴퓨터가 확산됨에 따라 유럽언어, 비서구권 언어들을 표현해야 했습니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 URL 설계자들은 흔히 Percent Encoding이라고 부르는 인코딩 체계를 도입했습니다.&lt;/p&gt;

&lt;h4 id=&quot;242-인코딩-체계&quot;&gt;2.4.2. 인코딩 체계&lt;/h4&gt;

&lt;p&gt;Percent Encoding은 기본적으로 ‘%+16진수 2개’ 로 이루어집니다.&lt;/p&gt;

&lt;p&gt;’ ~ ‘ 같은 경우 ASCII 코드가 126이기 때문에 %7E 로 표현됩니다.&lt;/p&gt;

&lt;p&gt;1바이트 문자인 기존의 US - ASCII 내의 Shady Character들은 %__ 로 표현이 가능합니다. 하지만 언어권에 따라 2Byte 문자, 3Byte문자가 있습니다. 한글의 경우엔 3Byte 문자입니다.&lt;/p&gt;

&lt;p&gt;‘가’ 의 경우 Unicode는 44032 (= 0xAC00) 인데 이를 UTF-8로 인코딩 하면 234, 176, 128 이며 각각 %EA %B0 %80로 인코딩 됩니다. 결국 ‘가’ -&amp;gt; ‘%EA%B0%80’ 가 되는 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;243-문자-제한&quot;&gt;2.4.3. 문자 제한&lt;/h4&gt;

&lt;p&gt;위 표가 제한되는 문자들입니다.&lt;/p&gt;

&lt;h4 id=&quot;244-좀-더-알아보기&quot;&gt;2.4.4. 좀 더 알아보기&lt;/h4&gt;

&lt;p&gt;Shady Character를 사용했다고 해서 모든 요청이 실패하는 것은 아닙니다. 상황에 따라 성공할 수도, 실패할 수도 있습니다. 하지만 어플리케이션은 약속대로 구현이 되어야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;25-스킴의-바다&quot;&gt;2.5. 스킴의 바다&lt;/h3&gt;

&lt;p&gt;이 절에선 다양한 스킴을 요약해 두었습니다. 단순 정보 나열이지만 본 포스팅에 포함시키면 너무 방대해 질것 같아 [여기][https://www.naver.com]에 따로 빼두겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;26-미래&quot;&gt;2.6. 미래&lt;/h3&gt;

&lt;p&gt;URL은 인터넷에 존재하는 모든 리소스를 특정할 수 있습니다. 확장성도 좋아 새로운 포맷을 추가할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 현재 URL이 가지고 있는 약점이 있습니다. URL은 리소스의 위치를 특정하는 것이기 때문에 리소스가 옮겨진다면 기존의 URL은 쓸모 없어지게 됩니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 IEFT(Internet Engineering Task Force) 에선 URN(Uniform Resource Names)라는 새로운 URI 표준 작업에 들어갔습니다. URN은 Name으로 리소스를 특정하기 때문에 리소스의 위치가 옮겨지더라도 리소스를 찾을 수 있습니다.&lt;/p&gt;

&lt;p&gt;URL과 URN을 호환할 수 있게하는 기술도 연구중입니다. PURL(Persistent Uniform Resource Locators)입니다. URL과 URN을 중개해주는 역할을 합니다.&lt;/p&gt;

&lt;h4 id=&quot;261-지금이-아니면-언제&quot;&gt;2.6.1. 지금이 아니면, 언제?&lt;/h4&gt;

&lt;p&gt;사실 URN은 이미 사용가능합니다. 하지만 아직 연구단계이기도 하고, 기존의 URL환경이 워낙 방대하기 때문에 교체되는데도 시간이 걸릴것입니다.&lt;/p&gt;

&lt;p&gt;그리고 무엇보다 URL을 URN으로 대체하는 것은 웹 개발 커뮤니티에서 긴급한 사안으로 생각되지 않습니다.&lt;/p&gt;

&lt;p&gt;하지만 URN도 계속 발전해나갈 것이며 언젠가 한계를 가진 URL을 대체할 것입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;두 번째 포스팅인데 확실히 첫 번째 포스팅보단 빨라진 것 같습니다. 다만 아직 포스팅의 전체적인 구조를 어떻게 구성해 나가야 할지는 고민중입니다. 정말 책을 요약하는 데에서 끝내는게 정확한 정보전달 차원에서 맞는건지, 개인적인 이해와 사견, 비유등을 덧붙여도 좋을지 고민이 됩니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>1장 HTTP 개관</title>
   <link href="http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C1/"/>
   <updated>2020-03-03T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/study/http%20the%20definitive%20guide/Http완벽가이드1</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;본 포스팅의 첫번째 목적은 제가 학습한 것을 스스로 정리해보며 정리하는 것&lt;/strong&gt;입니다. 따라서 책의 내용을 오해하고 정리했을 소지가 있으니 &lt;strong&gt;제 포스팅에 너무 의존하진 말아주세요.&lt;/strong&gt;(훗날 자신있게 제 포스팅에 의존해 달라고 할 수 있는 날이 왔으면 좋겠습니다!) 내용에 대한 지적은 언제나 환영입니다.&lt;/p&gt;

&lt;h3 id=&quot;들어가며&quot;&gt;들어가며&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;본 장에선 아래와 같은  HTTP와 연관된 대략적인 개념들을 살펴봅니다. &lt;strong&gt;각 개념들은 이후 장들에서 더 자세히 알아볼 것입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;HTTP: 인터넷의 멀티미디어 배달부&lt;/li&gt;
  &lt;li&gt;웹 클라이언트와 서버&lt;/li&gt;
  &lt;li&gt;리소스&lt;/li&gt;
  &lt;li&gt;트랜잭션&lt;/li&gt;
  &lt;li&gt;메시지&lt;/li&gt;
  &lt;li&gt;TCP 커넥션&lt;/li&gt;
  &lt;li&gt;프로토콜 버전&lt;/li&gt;
  &lt;li&gt;웹의 구성요소&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;11-http--인터넷의-멀티미디어-배달부&quot;&gt;1.1. HTTP : 인터넷의 멀티미디어 배달부&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;본 책은 HTTP에 대한 여정을 시작하는 첫 장, 첫 절에서 HTTP를 &lt;strong&gt;인터넷의 멀티미디어 배달부&lt;/strong&gt;‘라고 표현하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷 : 기기와 운영체제를 가리지 않는다.&lt;/li&gt;
  &lt;li&gt;멀티미디어 : 텍스트, 이미지, 영상 등 다양한 형식의 데이터를 다룬다.&lt;/li&gt;
  &lt;li&gt;배달부 : 클라이언트에서 서버로, 서버에서 서버로, 서버에서 클라이언트로 데이터를 전송해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 의미로 HTTP를 압축적으로 표현한 것 같습니다.&lt;/p&gt;

&lt;p&gt;HTTP는 신뢰성 있는 데이터 전송 프로토콜(뒤에서 살펴볼 TCP/IP)을 사용하기 때문에 전송중에 데이터가 꼬이거나 손상될 걱정이 없습니다. 개발자의 입장에선 네트워크에 관한 문제는 제쳐두고 어플리케이션 개발에 집중할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;12-웹-클라이언트와-서버&quot;&gt;1.2. 웹 클라이언트와 서버&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;웹 서버 : 데이터를 저장하며, HTTP 클라이언트가 요청한 데이터를 제공한다. HTTP서버 라고도 부른다.&lt;/p&gt;

&lt;p&gt;웹 클라이언트 : 사용자를 대신해 HTTP 요청을 보내줌준다. 매일 사용하는 웹 브라우저들이 웹 클라이언트 중 하나라고 부를 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;웹 브라우저에서 https://www.naver.com/index.html 를 입력하면 브라우저는 HTTP 요청 객체를 www.naver.com 로 보낸다. 요청을 받은 서버는 서버에서 /index.html에 해당하는 &lt;strong&gt;컨텐츠&lt;/strong&gt;를 찾고 성공했다면 웹 브라우저로 응답 HTTP 객체를 보낸다. 응답을 받은 웹 브라우저는 응답 컨텐츠를 웹 브라우저에 띄워준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;요망&lt;/p&gt;

&lt;h3 id=&quot;13-리소스&quot;&gt;1.3. 리소스&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;본 책에서 데이터, 리소스, 컨텐츠와 같이 유사한 개념이 나옵니다. 책에서 따로 각각을 비교하며 명확히 정의하진 않았지만 데이터와 리소스의 관계는 ‘데이터⊂리소스’ 인것 같고 컨텐츠는 리소스를 가공해 얻어지고 사용자가 접하게 되는 것이라고 이해하고 있습니다.(‘웹 리소스는 웹 콘텐츠의 원천이다.’)&lt;/p&gt;

&lt;p&gt;웹에서의 가장 간단한 리소스는 정적 파일입니다. 웹 서버에 저장된 텍스트파일, 사진, 동영상, html 파일등이 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;리소스는 항상 정적인 것은 아닙니다. 리소스는 동적으로 컨텐츠를 만드는 프로그램을 뜻할 수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;131-미디어-타입&quot;&gt;1.3.1. 미디어 타입&lt;/h4&gt;
&lt;p&gt;본 포스팅의 제일 처음에서 HTTP는 ‘인터넷의 &lt;strong&gt;멀티미디어&lt;/strong&gt; 배달부’라고 했습니다. 인터넷은 multi 미디어라는 말 처럼 수천 가지 데이터 타입을 다룹니다.&lt;/p&gt;

&lt;p&gt;그리고 HTTP 프로토콜에선 이 수천 가지 데이터 타입을 다루기 위해 &lt;strong&gt;HTTP가 전송하는 데이터에 MIME(Multipurpose Internet Mail Extension) 타입이라는 데이터 포맷 라벨을 붙입니다.&lt;/strong&gt;  지금 HTTP객체가 전송중인 데이터가 ‘어떤 타입의 데이터다’ 라는 것을 말해주는 것이죠.&lt;/p&gt;

&lt;p&gt;(MIME 타입은 전자메일 시스템에서 처음 사용한 데이터 타입 분류인데 메일에서 잘 작동하여 HTTP에서도 채택해 사용 중입니다.)&lt;/p&gt;

&lt;p&gt;MIME 타입은 ‘주타입/부타입’ 으로 이루어진 문자열 라벨입니다. html의 &amp;lt;form&amp;gt;태그에서 봤을법한 text/html, text/plain, image/jpeg, image/gif 같은 것들입니다.&lt;/p&gt;

&lt;p&gt;수천 가지의 데이터 타입을 다루는 만큼 MIME 타입을 상세히 열거하면 엄청나게 많습니다. 아래 링크에서 MIME 타입의 모든 목록을 볼 수 있습니다.
https://www.iana.org/assignments/media-types/media-types.xhtml&lt;/p&gt;

&lt;h4 id=&quot;132-uriuniform-resource-identifier&quot;&gt;1.3.2. URI(Uniform Resource Identifier)&lt;/h4&gt;
&lt;h4 id=&quot;133-urluniform-resource-locator&quot;&gt;1.3.3. URL(Uniform Resource Locator)&lt;/h4&gt;
&lt;h4 id=&quot;134-urnuniform-resource-name&quot;&gt;1.3.4. URN(Uniform Resource Name)&lt;/h4&gt;
&lt;p&gt;위 세개의 절은 한 번에 설명을 해야할 것 같습니다. 우선 세 개념의 관계는 아래 과 같습니다.&lt;/p&gt;

&lt;p&gt;요망&lt;/p&gt;

&lt;p&gt;앞 절에서 웹 서버는 데이터(리소스)를 저장하고 있다고 했습니다. 리소스들엔 각자의 이름(파일명)이 있겠죠. URI는 말 그대로 Resource를 Identify하는 역할을 합니다. http://www.naver.com/index.html 에서 본다면 www.naver.com 서버에서 index.html을 식별하도록 지정하는 것이죠.&lt;/p&gt;

&lt;p&gt;이 지정하는 방식이 URL과 URN으로 나뉩니다.&lt;/p&gt;

&lt;p&gt;URL은 우리가 쉽게 접한 형태입니다. 방금전 예시의  http://www.naver.com/index.html 도 쉽게 접할 수 있는 URL 형태의 URI였습니다.&lt;/p&gt;

&lt;p&gt;URL은 ‘스킴+ 서버 주소+ 리소스’ 로 나타내며 리소스의 위치를 지정해 리소스를 식별합니다.&lt;/p&gt;

&lt;p&gt;스킴 : 리소스에 접근하기 위해 사용되는 프로토콜(ex) http://, ftp://, mailto://)
서버주소 : 서버의 주소. IP+port(127.0.0.1:4000) 혹은 Domain ( www.naver.com )
리소스 : /index.html, /image/error.png ..&lt;/p&gt;

&lt;p&gt;URN은 리소스의 위치가 아닌 이름으로 리소스를 지정합니다. 아래는 인터넷 표준문서 ‘RFC 2141’을 지정하는 URN입니다.&lt;/p&gt;

&lt;p&gt;urn:ietf:rfc:2141&lt;/p&gt;

&lt;p&gt;URN은 URL의 단점을 보완하기 위해 나왔으나 아직 실험 단계에 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;14-트랜잭션&quot;&gt;1.4. 트랜잭션&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;트랜잭션이란?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Transaction processing : information processing that is divided into individual, indivisible operations
Database transaction : a unit of work performed within a database management system
Atomic transaction : a series of database operations such that either all occur, or nothing occurs
Financial transaction : an agreement, communication, or movement carried out between a buyer and a seller to exchange an asset for payment 
https://en.wikipedia.org/wiki/Transaction&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위키에서 찾아본 다양한 트랜잭션에 대한 정의입니다. 공통적으로 보면 ‘분리할 수 없는 하나의 업무 단위’ 라고 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;HTTP에서 트랜잭션은 ‘요청명령+응답결과’ 입니다. 요청이 있으면 요청에 맞는 데이터를 돌려주든, 에러를 뱉든 응답결과가 있어야 HTTP 통신이 이루어졌다고 할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;141-메서드&quot;&gt;1.4.1. 메서드&lt;/h4&gt;
&lt;p&gt;모든 HTTP 요청은 하나의 메서드를 갖습니다. 메서드는 클라이언트가 서버에게 ‘어떤 동작이 취해져야 하는지’ 말해줍니다. 아래는 웹에서 많이 사용되는 5개의 메서드입니다.
| HTTP메서드 | 설명 |
|:—:|:—:|
|GET|서버에서 클라이언트로 지정한 리소스를 보내라.|
|PUT|클라이언트에서 서버로 보낸 데이터를 지정한 이름의 리소스로 저장하라|
|DELETE|지정한 리소스를 서버에서 삭제하라.|
|POST|클라이언트 데이터를 서버 게이트웨이 어플리케이션으로 보내라.|
|HEAD|지정한 리소스에 대한 응답에서, HTTP 헤더 부분만 보내라.|&lt;/p&gt;

&lt;h4 id=&quot;142-상태-코드&quot;&gt;1.4.2. 상태 코드&lt;/h4&gt;
&lt;p&gt;모든 HTTP 응답은 하나의 상태코드를 갖습니다. 상태코드는 요청의 성공/실패 여부 등을 알려주는 코드입니다. 아래는 웹에서 많이 볼 수 있는 몇 가지 상태코드 입니다.
|HTTP 상태코드|설명|
|:—:|:—:|
|200|응답 성공. 문서가 올바르게 반환됨.|
|302|다시 보내라. 다른 곳에서 리소스를 가져가라.|
|404|리소스를 찾을 수 없다.|&lt;/p&gt;

&lt;h4 id=&quot;143-웹페이지는-여러-객체로-이루어질-수-있다&quot;&gt;1.4.3. 웹페이지는 여러 객체로 이루어질 수 있다.&lt;/h4&gt;
&lt;p&gt;http://www.naver.com/index.html 를 웹 브라우저 주소창에 쳐보자. 하나의 화면이 나타난다. 그렇다면 한 웹 페이지는 하나의 HTTP 요청, 객체로 이루어지는 것일까? 아니다.&lt;/p&gt;

&lt;p&gt;하나의 웹페이지를 만들기 위해선 여러 HTTP 객체가 이용될 수 있다. 우리가 웹 브라우저를 통해 하나의 URL을 요청하면 웹 브라우저는 기본적으로 html 뼈대를 받아온다. 브라우저가 받아온 html을 읽으면서 html을 보여주기 위한 이미지, 자바 애플릿 등을 다시 요청해 가져온다.&lt;/p&gt;

&lt;p&gt;이 요청들은 처음 요청한 URL과 다른 서버에서 가져올 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;15-메시지&quot;&gt;1.5. 메시지&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;HTTP 메시지는 HTTP 요청과 응답을 표현해주는 단순한 문자열이다. 요청메세지와 응답메세지 모두 3부분(start line, header, body)로 구분됩니다. header는 빈 문자열로 끝납니다.&lt;/p&gt;

&lt;p&gt;아래는 요청 메세지의 예시입니다.&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;GET / test/hi-there.txt HTTP/1.0&lt;/p&gt;

  &lt;p&gt;Accept: text/*&lt;br /&gt;
Accept-Language: en, fr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래는 응답 메세지의 예시입니다.&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;HTTP/1.0 200 OK&lt;/p&gt;

  &lt;p&gt;Content-type: text/plain&lt;br /&gt;
Content-length: 19
　&lt;/p&gt;

  &lt;p&gt;Hi! I’m a message!&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;자세한 사항은 2장에서 이어집니다.&lt;/p&gt;

&lt;h3 id=&quot;16-tcp-커넥션&quot;&gt;1.6. TCP 커넥션&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;앞선 1.1. 에서 HTTP는 신뢰성 있는 데이터 전송 프로토콜을 사용한다고 했습니다. TCP(Transmission Control Protocol) 커넥션이 바로 그 프로토콜입니다. TCP 커넥션에 관해선 4장에서 더 자세히 배울 예정입니다.&lt;/p&gt;

&lt;h4 id=&quot;161-tcpip&quot;&gt;1.6.1. TCP/IP&lt;/h4&gt;
&lt;p&gt;이제 개발을 막 시작했을 무렵 정보처리기사 자격증을 공부했습니다. 그때 OSI 7계층이란 걸 배웠습니다. 아래와 같은 것이죠. 아래 사진 출처 포스트에 OSI 7계층에 대해 알기 쉽게 나와 있으니 참고하셔도 좋을 것 같습니다. (참고 - https://brunch.co.kr/@wangho/6  서킷통신 vs 패킷통신)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/image/Http The Definitive Guide/iso7layer.png&quot; alt=&quot;iso7layer.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출처 : https://medium.com/harrythegreat/osi%EA%B3%84%EC%B8%B5-tcp-ip-%EB%AA%A8%EB%8D%B8-%EC%89%BD%EA%B2%8C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-f308b1115359&lt;/p&gt;

&lt;p&gt;출처의 포스트에서&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;각 계층은 다른 계층에 대해 알 필요가 없이 자신의 계층에서 캡슐화와 은닉(숨기기)가 가능&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라고 표현했습니다. 책에서 “HTTP는 신뢰성있는 데이터 전송 프로토콜을 사용하기 때문에 데이터가 전송중에 꼬이거나 손상될 걱정 할 필요 없다.”라고 한 것과 일치합니다. 데이터의 신뢰성문제는 TCP 프로토콜이 보장한다는 것이죠.&lt;/p&gt;

&lt;p&gt;HTTP는 OSI 7계층에서 어플리케이션 계층에 속합니다. 어플리케이션 안에서 일어나는 일에만 관여하고 어플리케이션에서 어플리케이션으로(클라이언트 &amp;lt;-&amp;gt; 서버) 데이터가 전달되는 과정엔 HTTP는 손을 떼고 TCP/IP 프로토콜이 담당하는 것이죠.&lt;/p&gt;

&lt;p&gt;TCP/IP에 대한 세부 사항은 4장에서 자세히 다룰 예정입니다. 1장에서의 TCP/IP는 HTTP통신을 도와 데이터를 전송해주는 프로토콜이라고 생각하면 좋을것 같습니다.&lt;/p&gt;

&lt;h4 id=&quot;162-접속-ip주소-포트번호&quot;&gt;1.6.2. 접속, IP주소, 포트번호&lt;/h4&gt;
&lt;p&gt;클라이언트와 서버가 데이터를 주고 받기 위해선 TCP/IP 커넥션을 맺어야 합니다. 대화를 전달하기 위해 전화를 거는 것과 비슷한 개념이라고 생각할 수 있습니다.&lt;/p&gt;

&lt;p&gt;전화를 걸기 위해선 전화번호를 알아야 합니다. 마찬가지로  TCP/IP 커넥션을 맺기 위해 알아야 할 것들이 있는데 그게 바로 IP 주소와 포트번호입니다. IP주소가 컴퓨터를 찾는다면 포트번호는 그 컴퓨터 내에 어떤 프로그램인지를 찾아간다고 보면 좋습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://207.200.83.29:80/index.html
http://www.netscape.com:80/index.html
http://www.netscape.com/index.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;세 가지 URL이 나와있는데 이중 첫 번째 URL에서 ‘207.200.83.29’가 IP, ‘80’이 포트번호 입니다.
 두 번째 URL에선 숫자로 된 IP가 없고 ‘www.netsacpe.com’이라는 우리에게 친숙한 알파벳의 주소가 있습니다. 이를 도메인 네임, 호스트 명 이라고 부릅니다. 숫자로 이루어진 IP를 직관적으로 기억하기 위해 사용되는 별명과 같은 것인데 DNS(Domain Name Service)라는 장치를 통해 IP로 변환됩니다.
 세 번째 URL은 포트번호가 없습니다. 포트번호가 없다면 기본 포트번호인 80이 사용되었다고 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 클라이언트와 서버가 데이터를 주고받는 간단한 개요입니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;사용자가 입력한 URL에서 웹 브라우저가 호스트 명을 추출한다.&lt;/li&gt;
    &lt;li&gt;웹 브라우저가 네임서버(앞서말한 DNS를 제공하는 서버)를 통해 호스트명을 IP로 변환한다.&lt;/li&gt;
    &lt;li&gt;웹 브라우저가 URL에 포트번호가 있다면 추출한다.&lt;/li&gt;
    &lt;li&gt;웹 브라우저와 웹 서버가 TCP 커넥션을 맺는다.&lt;/li&gt;
    &lt;li&gt;웹 브라우저가 웹 서버에게 HTTP 요청을 보낸다.&lt;/li&gt;
    &lt;li&gt;웹 서버가 웹 브라우저에게 HTTP 응답을 보낸다.&lt;/li&gt;
    &lt;li&gt;TCP 커넥션이 닫히면 웹 브라우저는 받은 데이터를 파싱해 사용자에게 보여준다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리가 편하게 사용하는 브라우저가 엄청난 일을 해주고 있음을 다시 한 번 느낍니다.&lt;/p&gt;

&lt;h3 id=&quot;17-프로토콜-버전&quot;&gt;1.7. 프로토콜 버전&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP 0.9 : 1991년 개발. 초기 버전이며 굉장히 한정적인 기능을 갖고 있음.
HTTP 1.0 : 1996년 개발. 인터넷이 급성장 하던 시기에 만들어 졌기 때문에 급하게 여러 기능들을 붙여 깔끔하게 정의되지 않음.
HTTP 1.0 + : 1996년 개발. 1.0 버전에 좀 더 기능들을 추가, 확장 한 것.
HTTP 1.1 : 1997년 개발. 기능적인 확장보단 그동안 급하게 발전한 온 HTTP의 설계 구조적 결함 교정, 성능 최적화, 잘못된 기능 제거에 집중함. **현재 대중적으로 쓰이는 HTTP 버전 **
HTTP 2.0 : 1.1 버전의 성능을 개선하기 위해 구글의 SPDY 프로토콜을 기반으로 설계가 진행중.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쉽게 만날수 있는 버전은 1.1 버전이고 개발을 진행하다가 기존의 HTTP 지식으로 이해가 안되는 현상을 만날때 HTTP 버전을 한 번 확인해보면 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;상세한 사항은 https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP 를 참고하시면 좋을 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;18-웹의-구성요소&quot;&gt;1.8. 웹의 구성요소&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;웹이 작동하는데엔 많은 애플리케이션들이 관여합니다. 이번 절에선 프록시, 캐시, 게이트웨이, 터널, 에이전트에 대해 간략히 알아볼 것입니다. 물론 각 어플리케이션들은 각각의 장에서 자세히 알아볼 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;181-프록시&quot;&gt;1.8.1. 프록시&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;프록시 : 클라이언트와 서버 사이에 위치한 HTTP 중개사&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;개인적으로 ‘프록시’라는 개념은 매번 들어도 친숙해지지 않았습니다. CS에서 사용되는 여러 개념들은 인터넷을 하다보면 어깨너머로 듣기 때문에 대략적인 개념을 유추할 수 있었는데 말이죠.&lt;/p&gt;

&lt;p&gt;프록시의 어원은 라틴어 procuratia라고 합니다.(https://www.hankookilbo.com/News/Read/201610111434651573)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;procuratia = 대신, 앞에서(pro) + 관여하다, 조심하다, 배려하다(curare)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;분쟁이 있을때 당사자가 직접 싸우는게 아니라 제 삼자를 내세워 싸우는걸 proxy war 라고  합니다.  비만도를 체질량 지수로 대신하고, 삶의 질을 GDP로 대신하는 것 같이 한 지수를 다른 지수로 표현하는 걸 통계학에서 proxy variable 이라고 합니다.&lt;/p&gt;

&lt;p&gt;이와 같은 맥락으로 CS에서 프록시는 클라이언트와 서버 사이에서 요청과 응답을 대신해서 주고 받는 역할을 합니다.&lt;/p&gt;

&lt;p&gt;주로 보안을 위해 많이 사용됩니다. 다운로드시 바이러스 검사를 한다던가, 성인 콘텐츠를 차단한다던가 하는 식입니다.&lt;/p&gt;

&lt;h4 id=&quot;182-캐시&quot;&gt;1.8.2. 캐시&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;캐시 : 많이 찾는 웹페이지를 클라이언트 가까이에 보관하는 HTTP 창고&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;cache는 원래 ‘은닉처’라는 뜻을 가지고 있습니다. 책에서도 HTTP ‘창고’라고 표현을 해두었네요.&lt;/p&gt;

&lt;p&gt;웹 캐시는 위에서 말한 프록시 서버중 하나입니다. 요청 사항을 보고 이미 일전에 여러번 수행했던 요청이라면 굳이 멀리 있는 요청 서버를 통해 결과를 가져오는게 아니라 가까이 있는 웹 캐시에서 결과를 받아 옵니다.&lt;/p&gt;

&lt;h4 id=&quot;183-게이트웨이&quot;&gt;1.8.3. 게이트웨이&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;게이트웨이 : 다른 애플리케이션과 연결된 특별한 웹 서버&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;게이트웨이는 HTTP 트래픽을 다른 프로토콜로 변환하기 위해 사용됩니다. 게이트웨이는 자신이 리소스를 가지고 있는 진짜 서버처럼 행동하기 때문에 클라이언트의 입장에선 본인이 게이트웨이와 통신하는지, 게이트웨이를 통한 서버와 통신하는지 모릅니다.&lt;/p&gt;

&lt;p&gt;예를들어 파일전송만 담당하는 FTP(File Transfer Protocol) 서버가 있다면 HTTP 클라이언트와 직접 통신할 수 없습니다. 그래서 이를 중개하고 변환해 주는게 HTTP/FTP 게이트웨이 입니다.&lt;/p&gt;

&lt;h4 id=&quot;184-터널&quot;&gt;1.8.4. 터널&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;터널 : 단순히 HTTP 통신을 전달하기만 하는 특별한 프록시&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;터널은 두 커넥션 사이에서 raw 데이터를 열어보지 않고 그대로 전달해주는 프록시라고 합니다.&lt;/p&gt;

&lt;p&gt;대표적인 예로 암호화된 SSL 트래픽을 HTTP 커넥션으로 전송해 웹 트래픽만 허용하는 사내 방화벽을 통과시키는 것을 예로 들 수 있다는데… 사실 이 책을 보며 이해가 안되는 첫 부분입니다. 나중에 보강 하도록 하겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;185-에이전트&quot;&gt;1.8.5. 에이전트&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;에이전트 : 자동화된 HTTP 요청을 만드는 준지능적(semi-inteligent) 웹 클라이언트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;앞서 HTTP의 구성요소들에 대해 간략히 알아봤습니다. start-line, header, body, 호스트명, IP주소, 포트번호 등… 하지만 우리가 실 생활에서 HTTP 통신을 할 땐 정말 간단하다. 웹 브라우저를 열고 www.naver.com 만 입력하면 됩니다.&lt;/p&gt;

&lt;p&gt;이렇게 사용자를 위해 HTTP 요청을 만들어주는 클라이언트 프로그램을 통틀어 HTTP 에이전트라고 한다.&lt;/p&gt;

&lt;p&gt;웹 브라우저가 가장 대표적인 HTTP 에이전트이고, 개발할때 테스트 용으로 자주쓰는 postman 이라는 프로그램 역시 HTTP 에이전트라고 볼 수 있습니다.
 이렇게 사용자가 직접 URL을 입력하는 에이전트도 있고 웹 크롤러와 같이 완전 자동화 되어 지정된 HTTP 요청을 수행하는 것 역시 HTTP 에이전트입니다.&lt;/p&gt;

&lt;p&gt;### 마치며&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 포스팅이 첫 포스팅인데 만만하게만 봤던 포스팅이 생각보다 많이 어렵다는걸 느꼈습니다. 알고있다고 생각한 개념들을 다른 사람이 모두 볼 수 있는 곳에 올려놓기 위해 정리하다보니 내가 제대로 알고 있던게 아니구나라는걸 느끼게 됐습니다.&lt;/p&gt;

&lt;p&gt;시간도 생각보다 굉장히 많이 걸렸습니다.&lt;/p&gt;

&lt;p&gt;하지만 첫 포스팅이니 그럴 거라고 생각합니다. 앞으로 하나씩 새로 배우는 개념들, 알고 있었지만 다시 정리하는 개념들을 다른 사람에게 보여줄 수 있을 정도로 다듬으면 포스팅도 술술 되는 날이 오겠죠?&lt;/p&gt;

&lt;p&gt;이만 마칩니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2020년 목표 및 방향</title>
   <link href="http://localhost:4000/posts/daily%20thoughts/2020%EB%85%84-%EB%AA%A9%ED%91%9C-%EB%B0%8F-%EB%B0%A9%ED%96%A5/"/>
   <updated>2020-03-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/daily%20thoughts/2020년 목표 및 방향</id>
   <content type="html">&lt;h2 id=&quot;2020년에는&quot;&gt;2020년에는…&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;새해가 시작한지 2달이 지났는데 이제서야 2020년의 목표를 다잡는 이유는… 퇴사를 했기 때문입니다! 전 직장이 생각했던것과 다른 점이 많아 일찍 나오게 됐고, 조용히 공부에 집중할 수 있는 시간이 주어졌습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;작년은 무지와 호기심의 환상적인 조합으로 잡다하게 많은 기술을 사용 했습니다.&lt;/strong&gt; &lt;strong&gt;html, css, js&lt;/strong&gt;같은 웹의 기본 언어부터  학원에서 공부한 &lt;strong&gt;java, oracle, jsp, spring&lt;/strong&gt;, 혼자 프로젝트하면서 써본 &lt;strong&gt;python, node js, mongodb, express, react+redux&lt;/strong&gt;, 회사에서 처음배워본 &lt;strong&gt;C#+winform, 전자정부프레임워크&lt;/strong&gt; 까지 뭔가 넓고 얕게 &lt;strong&gt;‘How to use’ 위주로 공부&lt;/strong&gt;를 한 것 같습니다.(그나마 다행인건 ‘How to use’는 무난하게 하는 것 같습니다.)&lt;/p&gt;

&lt;p&gt;하지만 몇몇 에러를 접할때 마다 &lt;strong&gt;더 깊은 지식이 필요함을 느꼈습니다.&lt;/strong&gt; 그래서 올해는, 위의 기술스택 밖으로 나가지 않고 &lt;strong&gt;더 깊게 내려가볼 생각&lt;/strong&gt;입니다.(다음 직장에서 ) ‘How it works’를 이해해야 더 실력있는 개발자가 되지 않을까합니다.&lt;/p&gt;

&lt;p&gt;잠깐 생각해본 공부할 것들은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;지금까지 썼던 기술들의 동작 방식과 장단점 파악하기&lt;/li&gt;
  &lt;li&gt;Http 통신의 이론적인 기초를 알아보기&lt;/li&gt;
  &lt;li&gt;C, C++ 언매니지드언어를 배워, 하드웨어 수준에서 어떤 코드 및 프로그램이 더 좋은 프로그램인지 알아보기&lt;/li&gt;
  &lt;li&gt;코딩테스트도 준비할 겸 알고리즘 연습하기&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>github 블로그를 시작하며</title>
   <link href="http://localhost:4000/posts/daily%20thoughts/%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0/"/>
   <updated>2020-02-28T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/daily%20thoughts/블로그를 시작하며</id>
   <content type="html">&lt;h2 id=&quot;정말-너무-좋은-개발자-생태계&quot;&gt;정말 너무 좋은 개발자 생태계&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;개발을 시작하고 난 뒤 느낀 충격적이었던 것 중 하나는 개발자들의 문화였습니다. 다른 분야에선 보통 자기 지식은 자기만 고이 간직하려는 경향이 강한데, &lt;strong&gt;개발자들은 서로 못알려줘서 안달난것 같은 그런 느낌&lt;/strong&gt;이었습니다. Stackoverflow는 말할 것도 없고, 한글로 된 블로그들에도 정보들이 정말 많았습니다.&lt;/p&gt;

&lt;p&gt;개발하면서 정말 많은 블로그들을 참고했습니다. 빠르게 코드만 보고 나온 블로그부터 북마크 해놓고 몇번이고 다시 본 블로그까지 아마 블로그, 포스팅이 없었으면 지금 수준에 1/4이나 되었을까 싶습니다. (​​블로그들이 많지 않던 시절에 개발하신 선배님들 존경… :flushed:)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;저도 이런 생태계에 보탬이 되고 싶었습니다.&lt;/strong&gt; 물론 아직 제가 생산할 포스팅들이 깊은 수준은 아니겠지만 그래도 제가 다른 블로그에서 코드나 설명 한줄 슥 보고 나온것 처럼 다른 사람들도 제 블로그에서 짧막한 지식이라도 슥 얻어 갈 수 있으면 좋겠습니다.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>TCA3</title>
   <link href="http://localhost:4000/posts/projects/twitch_chat_anaylsis/TCA3/"/>
   <updated>2016-03-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/projects/twitch_chat_anaylsis/TCA3</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  TCA3
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TCA2</title>
   <link href="http://localhost:4000/posts/projects/twitch_chat_anaylsis/TCA2/"/>
   <updated>2016-02-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/projects/twitch_chat_anaylsis/TCA2</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  TCA2
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/projects/sagyo%20reboot/Sagyo3/"/>
   <updated>2015-03-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/projects/sagyo%20reboot/Sagyo3</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-03-01-Sagyo3
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/python/Python3/"/>
   <updated>2015-03-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/python/Python3</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-03-01-Python3s
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/network/Network3/"/>
   <updated>2015-03-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/network/Network3</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-03-01-Network3
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/java/Java3/"/>
   <updated>2015-03-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/java/Java3</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-03-01-Java3
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/projects/sagyo%20reboot/Sagyo2/"/>
   <updated>2015-02-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/projects/sagyo%20reboot/Sagyo2</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-02-01-Sagyo2
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/python/Python2/"/>
   <updated>2015-02-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/python/Python2</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-02-01-Python2
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/network/Network2/"/>
   <updated>2015-02-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/network/Network2</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-02-01-Network2
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/java/Java2/"/>
   <updated>2015-02-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/java/Java2</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2015-02-01-Java2
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/python/Python1/"/>
   <updated>2015-01-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/python/Python1</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Python1
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/network/Network1/"/>
   <updated>2015-01-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/network/Network1</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Network1
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/googling/java/Java1/"/>
   <updated>2015-01-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/googling/java/Java1</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Java1
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/posts/about%20me/AboutMe/"/>
   <updated>2013-01-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/posts/about%20me/AboutMe</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  2013-01-01-AboutMe
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
